{
  "source": "ArXiv",
  "filename": "025_Efficient_Heuristics_for_Multi-Robot_Path_Planning.pdf",
  "total_chars": 42679,
  "total_chunks": 62,
  "chunks": [
    {
      "id": 1,
      "content": "=== 페이지 1 ===\nEfficient Heuristics for Multi-Robot Path Planning in Crowded Environments\nTeng Guo Jingjin Yu\nAbstract—OptimalMulti-RobotPathPlanning(MRPP)has\ngarnered significant attention due to its many applications in\ndomains including warehouse automation, transportation, and\nswarm robotics. Current MRPP solvers can be divided into\nreduction-based, search-based, and rule-based categories, each\nwiththeirstrengthsandlimitations.Regardlessofthemethod-\nology, however, the issue of handling dense MRPP instances\n(a) (b) (c)\nremainsasignificantchallenge,whereexistingapproachesgen-\nerally demonstrate a dichotomy regarding solution optimality\nand efficiency.",
      "size": 661,
      "sentences": 2
    },
    {
      "id": 2,
      "content": ", however, the issue of handling dense MRPP instances\n(a) (b) (c)\nremainsasignificantchallenge,whereexistingapproachesgen-\nerally demonstrate a dichotomy regarding solution optimality\nand efficiency. This study seeks to bridge the gap in optimal\nMRPP resolution for dense, highly-entangled scenarios, with\npotentialapplicationstohigh-densitystoragesystemsandtraffic\ncongestioncontrol.Towardthatgoal,weanalyzethebehaviors\nof SOTA MRPP algorithms in dense settings and develop two\nhybridalgorithmsleveragingthestrengthsofexistingSOTAal-\ngorithms:DCBS(database-acceleratedenhancedconflict-based\nsearch) and SCBS (sparsified enhanced conflict-based search). (d) (e)\nExperimental validations demonstrate that DCBS and SCBS\ndeliverasignificantreductionincomputationaltimecompared Fig.1.",
      "size": 780,
      "sentences": 3
    },
    {
      "id": 3,
      "content": "lict-based\nsearch) and SCBS (sparsified enhanced conflict-based search). (d) (e)\nExperimental validations demonstrate that DCBS and SCBS\ndeliverasignificantreductionincomputationaltimecompared Fig.1. (a)-(c)Achallenginglocally-denseMRPPexampleon20×20map\nto existing bounded-suboptimal methods and improve solution with49robots.Itrequiresrearrangingtherobotsfromthestartconfiguration\n(a)tothegoalconfiguration(c).By“sparsifying”theconfigurationusingour\nquality compared to existing rule-based methods, achieving a\nmethods,asshowninanintermediatestep(b),theproblemcanbesolved\ndesirablebalancebetweencomputationalefficiencyandsolution\nquicklywithdecentsolutionoptimality. (d)-(e)Achallengingglobally-dense\noptimality. As a result, DCBS and SCBS are particularly MRPP example on a 24×18 warehouse map with 203 robots. In both\nsuitableforquicklycomputinggood-qualitysolutionsformulti- settings,eachrobothasauniquestartandgoal. robot routing in dense settings.",
      "size": 954,
      "sentences": 7
    },
    {
      "id": 4,
      "content": "rly MRPP example on a 24×18 warehouse map with 203 robots. In both\nsuitableforquicklycomputinggood-qualitysolutionsformulti- settings,eachrobothasauniquestartandgoal. robot routing in dense settings. Simulation video: https://youtu.be/dZxMPUr7Bqg\nUpon the publication of the manuscript, source code and data\nrecently that balance fairly well between computational ef-\nwill be released at https://github.com/arc-l/dcbs\nficiency and solution optimality. Existing MRPP algorithms\nI. INTRODUCTION have been tested on randomly generated instances and yield\ndecent performance for instances with relatively limited\nWe study the labeled Multi-Robot Motion Planning\nrobot-robot interactions, i.e., either the number of robots is\n(MRPP)problemunderagraph-theoreticsetting,alsoknown\nlimited, or the density of robots is relatively low. However,\nasMulti-AgentPathFinding(MAPF).Thebasicobjectiveof\ntheyfrequentlyfailininstancesthatarebothlargeanddense.",
      "size": 940,
      "sentences": 7
    },
    {
      "id": 5,
      "content": "raph-theoreticsetting,alsoknown\nlimited, or the density of robots is relatively low. However,\nasMulti-AgentPathFinding(MAPF).Thebasicobjectiveof\ntheyfrequentlyfailininstancesthatarebothlargeanddense. MRPPistofindasetofcollision-freepathstoroutemultiple\nRecently, MRPP algorithms have been applied in high-\nrobots from a start configuration to a goal configuration. density applications, such as autonomous vehicle parking\nIn practice, solution optimality is also of key importance;\nsystems[18],[19],toincreasespaceutilizationefficiency.In\nyet optimally solving MRPP in terms of makespan and\nsuchdensescenarios,robots’motionsarestronglycorrelated\nsum-of-costisgenerallyNP-hard[1]–[3]. MRPP algorithms\nand may block the paths of each other, which makes the\nfindmanyimportantlarge-scaleapplications,including,e.g.,\nproblem extremely difficult for existing MRPP solvers. in warehouse automation for general order fulfillment [4],\nResults and contributions.",
      "size": 952,
      "sentences": 6
    },
    {
      "id": 6,
      "content": "e\nfindmanyimportantlarge-scaleapplications,including,e.g.,\nproblem extremely difficult for existing MRPP solvers. in warehouse automation for general order fulfillment [4],\nResults and contributions. This research proposes effi-\ngrocery order fulfillment [5], and parcel sorting [6]. Other\ncient heuristics and uses them to build complete solvers for\napplication scenarios include formation reconfiguration [7],\ntackling dense and difficult MRPP instances. We address\nagriculture[8],objecttransportation[9],swarmrobotics[10]. twoclassesofdense MRPP:globallydenseinstanceswhere\nGiven the potential of employing its solutions in a wide\nthenumberofrobotsislargewithhighaveragerobotdensity\nrange of impactful applications, even though MRPP had\n(more than 40%, see Fig. 1(c)), and locally dense instances\nbeen studied since the 1980s in the robotics domain [11]–\nwhere the robot distribution is unbalanced with high local\n[14], it remains a highly active research topic. Many effec-\nrobot density (i.e.",
      "size": 997,
      "sentences": 8
    },
    {
      "id": 7,
      "content": "s\nbeen studied since the 1980s in the robotics domain [11]–\nwhere the robot distribution is unbalanced with high local\n[14], it remains a highly active research topic. Many effec-\nrobot density (i.e. 100%, see Fig. 1(a)-(b)). tive algorithms, for example [15]–[17], have been proposed\nWe develop two hybrid MRPP algorithms to address\nG. Teng, and J. Yu are with the Department of Computer Science, the above-mentioned challenges. In the first algorithm, we\nRutgers,theStateUniversityofNewJersey,Piscataway,NJ,USA.Emails: introduce a (motion-primitive) database-based conflict res-\n{ teng.guo, jingjin.yu}@rutgers.edu. olution mechanism inspired by [20] to augment a conflict-\nThis work was supported in part by NSF award IIS-1845888 and an\nAmazonResearchAward. based search [21].",
      "size": 779,
      "sentences": 8
    },
    {
      "id": 8,
      "content": "{ teng.guo, jingjin.yu}@rutgers.edu. olution mechanism inspired by [20] to augment a conflict-\nThis work was supported in part by NSF award IIS-1845888 and an\nAmazonResearchAward. based search [21]. We also design a set of rules to maintain\n3202\nnuJ\n62\n]OR.sc[\n1v90441.6032:viXra\n=== 페이지 2 ===\nthe solution quality as well as the completeness of the heavily on the heuristic for reducing the number of node\nresulting algorithm. We call the algorithm DCBS, standing expansions, i.e., Number Of Conflicts (NOC) which is used\nfor database-accelerated enhanced conflict-based search. in ECBS. In dense scenarios, since robots are strongly\nWhile our first algorithm works for both globally dense correlated,thisheuristicisnotenoughsincetherearelotsof\nandlocallydensescenarios,oursecondalgorithmisdesigned nodeswiththesame NOC.Asaresult,thenumberofnodes\nspecifically for locally dense instances.",
      "size": 889,
      "sentences": 7
    },
    {
      "id": 9,
      "content": "correlated,thisheuristicisnotenoughsincetherearelotsof\nandlocallydensescenarios,oursecondalgorithmisdesigned nodeswiththesame NOC.Asaresult,thenumberofnodes\nspecifically for locally dense instances. Inspired by [22], we neededtoexpandtofindasolutionforexistingCBSvariants\nfirstconvertthechallengingconfigurationtoasparsifiedcon- grows exponentially with respect to the robot density, even\nfiguration,whichisrelativelyeasiertosolve,usingunlabeled if there is only a small number of robots. MRPP planning solutions. To reduce the extra overhead of Rule-basedsolversareanotherclassofsuboptimal MRPP\nthe conversion, we adopt a best-first heuristic for finding solvers. Prioritized planners [31], [34] assign priorities to\na proper sparsified configuration and a path refinement robots and low-priority robots avoid conflicts with high-\ntechnique for better concatenating the intermediate paths. priority robots by treating them as dynamic obstacles.",
      "size": 945,
      "sentences": 6
    },
    {
      "id": 10,
      "content": "ation and a path refinement robots and low-priority robots avoid conflicts with high-\ntechnique for better concatenating the intermediate paths. priority robots by treating them as dynamic obstacles. This\nWe call the second algorithm SCBS, standing for sparsified is efficient but can easily cause dead-lock issues in dense\nenhanced conflict-based search. scenarios,whichleadstoalowsuccessrate.Anotherclassof\nExperimentsondiverseenvironmentmapsdemonstratethe rule-basedsolversintroducesmotionprimitivesforswapping\neffectiveness of our proposed methods in solving instances the position of robots, such as Push-And-Swap [35] and\nwith robot densities greater than 60%-70% with a high Rubik Table [22], [36], [37]. They are polynomial-time\nsuccess rate and decent levels of solution quality. DCBS algorithms and can even solve extremely dense instances,\nand SCBS outperform previous MRPP algorithms in terms but the solution quality is far from optimal. DDM [20]\nof combined speed and solution quality.",
      "size": 999,
      "sentences": 7
    },
    {
      "id": 11,
      "content": "thms and can even solve extremely dense instances,\nand SCBS outperform previous MRPP algorithms in terms but the solution quality is far from optimal. DDM [20]\nof combined speed and solution quality. resolves the inter-robot conflicts efficiently by utilizing the\nOrganization. The rest of the paper is organized as precomputed motion primitive within the 3 3 sub-grid. It\n×\nfollows. Sec. III covers the preliminaries, including the finds near-optimal solutions when the robot density is not\nproblem formulation and two suboptimal algorithms ECBS high but has the same optimality issue in dense scenarios. andDDM.InSec.V-Sec.IV,wedescribeourheuristicsand\nalgorithms for solving dense MRPP. We perform thorough III. PRELIMINARIES\nevaluations and discussions of the proposed algorithms in\nA. Multi-Robot Path Planning on Graphs\nSec. VI and conclude with Sec. VII. A graph-based Multi-Robot Path Planning (MRPP) prob-\nII. RELATEDRESEARCH\nlem is defined on a graph = ( , ).",
      "size": 969,
      "sentences": 14
    },
    {
      "id": 12,
      "content": "ed algorithms in\nA. Multi-Robot Path Planning on Graphs\nSec. VI and conclude with Sec. VII. A graph-based Multi-Robot Path Planning (MRPP) prob-\nII. RELATEDRESEARCH\nlem is defined on a graph = ( , ). We assume that\nG V E\nMRPP/MAPF has been widely studied in the field of is a grid graph. That is, given integers w and h as the\nG\nrobotics. In the static or one-shot setting [23], given a graph graph’s width and height, the vertex set can be represented\nenvironment and a number of robots with each robot having as (i,j) 1 i w,1 j h,i Z,j Z . V ⊆ { | ≤ ≤ ≤ ≤ ∈ ∈ }\nauniquestartpositionandagoalposition,thetaskistofind The graph is 4-way connected, i.e., for a vertex v = (i,j),\ncollision-free paths for all the robots from start to goal. It the set of its neighboring vertices are defined as (v) =\n⋂︁ N\nhas been proven that solving one-shot MRPP optimally in (i+1,j),(i 1,j),(i,j+1),(i,j 1) .",
      "size": 891,
      "sentences": 10
    },
    {
      "id": 13,
      "content": "paths for all the robots from start to goal. It the set of its neighboring vertices are defined as (v) =\n⋂︁ N\nhas been proven that solving one-shot MRPP optimally in (i+1,j),(i 1,j),(i,j+1),(i,j 1) . The problem\n{ − − } V\nterms of minimizing either makespan or sum of costs is NP- involves n robots r ,...,r , where each robot r has a\n1 n i\nhard [24], [25]. Moreover, it is also NP-hard to approximate unique start state s and a unique goal state g . We\ni i\n∈V ∈V\nwithin any constant factor less than 4/3 if the solution denote the joint start configuration as X = s ,...,s\nS 1 n\n{ }\nmakespan is to be minimized [26]. and the goal configuration as X = g ,...,g . G 1 n\n{ }\nExisting solvers for MRPP can be broadly categorized The objective of MRPP is to find a set of feasible paths\ninto reduction-based, search-based, and rule-based. for all robots.",
      "size": 850,
      "sentences": 8
    },
    {
      "id": 14,
      "content": "g ,...,g . G 1 n\n{ }\nExisting solvers for MRPP can be broadly categorized The objective of MRPP is to find a set of feasible paths\ninto reduction-based, search-based, and rule-based. for all robots. Here, a path for robot r is defined as a\ni\nReduction-based solvers reduce MRPP to other well- sequence of T +1 vertices P i =(p0 i ,...,pT i ) that satisfies:\nstudiedproblems,suchasILP[27],SAT[24]andASP[28]. (i) p0 i = s i ; (ii) pT i = g i ; (iii) ∀ 1 ≤ t ≤ T,pt i −1 ∈ N(pt i ). These solvers are able to find optimal solutions and are effi- Apart from the feasibility of each individual path, for P to\ncient for small and dense instances. There are dividing-and- be collision(conflict)-free , 1 t T,1 i < j n,\n∀ ≤ ≤ ≤ ≤\nconquerheuristicsforenhancingtheirscalability[27],[29]at P i ,P j must satisfy\nthe cost of optimality.",
      "size": 824,
      "sentences": 7
    },
    {
      "id": 15,
      "content": "ense instances. There are dividing-and- be collision(conflict)-free , 1 t T,1 i < j n,\n∀ ≤ ≤ ≤ ≤\nconquerheuristicsforenhancingtheirscalability[27],[29]at P i ,P j must satisfy\nthe cost of optimality. Unfortunately, these reduction-based 1) There is no vertex collision: pt =pt;\nmethods are still incapable of dealing with the extremely 2) There is no edge collision: (pt i − ̸ 1,pt j )=(pt,pt−1). dense scenarios we study in this paper. i i ̸ j j\nand the following criteria are used to evaluate solution\nAnother more popular approach develops search-based\nquality:\nalgorithmsfor MRPP problemsthatcanbeviewedarehigh-\nsophisticated A* [30] variants. Coupled A* [31], ICTS [32], 1) Makespan (MKPN): the time required to move all\nand CBS [21] are optimal solvers and efficient on large robots to their desired positions;\nmaps but with sparse robots.",
      "size": 845,
      "sentences": 6
    },
    {
      "id": 16,
      "content": ". Coupled A* [31], ICTS [32], 1) Makespan (MKPN): the time required to move all\nand CBS [21] are optimal solvers and efficient on large robots to their desired positions;\nmaps but with sparse robots. ECBS [33] is the bounded- 2) Sum-of-cost (SOC): the cumulative cost function that\nsuboptimal version of CBS with enhanced scalability and sums over all robots of the number of time steps\nbounded suboptimality. The search-based algorithms rely required to reach the goals. For each robot, denoting\n=== 페이지 3 ===\nt such that t t T,pt = g , the sum-of-costs certain local areas, causing unwanted congestion, in order to\ni ∀ i ≤ ≤ i ∑︁ i\nobjective is calculated as min t . reduce the number of conflicts of the initial paths. 1≤i≤n i\nIn general, these two objectives create a Pareto front [25], Then, in resolving the path conflicts, a database resolu-\nanditisnotalwayspossibletosimultaneouslyoptimizethese tion heuristic is introduced, which builds a min-makespan\nobjectives.",
      "size": 972,
      "sentences": 7
    },
    {
      "id": 17,
      "content": "areto front [25], Then, in resolving the path conflicts, a database resolu-\nanditisnotalwayspossibletosimultaneouslyoptimizethese tion heuristic is introduced, which builds a min-makespan\nobjectives. solution database for all 2 3 and 3 3 sub-problems and\n× ×\nensuresquicklocalconflictresolutionviadatabaseretrievals. B. Enhanced Conflict Based Search (ECBS) Specifically, for each conflicting robot pair in each step,\nDDMtriestofinda2 3or3 3subgraphthatcontainsthese\nECBS (w 1 ) [33] is a variant of CBS [21] that is w 1 - × ×\nrobots.Temporarygoalsareassignedtotherobotswithinthe\nsuboptimal, which employs the focal search method [38] in\nsubgraph to resolve the conflict. The paths for routing them\nboth its high-level and low-level searches rather than best-\nto the temporary goals can be obtained easily by accessing\nfirst searches. the precomputed database.",
      "size": 860,
      "sentences": 6
    },
    {
      "id": 18,
      "content": "conflict. The paths for routing them\nboth its high-level and low-level searches rather than best-\nto the temporary goals can be obtained easily by accessing\nfirst searches. the precomputed database. Obviously, each time resolving\nA focal search, like A*, uses an OPEN list whose nodes\na conflict using subgraphs will introduce an extra overhead\nn are sorted in increasing order of their f-values f(n) =\nto the paths’ length. In dense environments, the number of\ng(n)+h(n), where h(n) are the primary heuristic values. conflicts needed to resolve is high, and as a result, DDM\nUnlike A*, a focal search with suboptimality factor w also\n1 can be very suboptimal under these scenarios. uses a FOCAL list of all nodes currently in the OPEN list\nwhose f-values are no larger than w 1 times the currently IV.",
      "size": 802,
      "sentences": 7
    },
    {
      "id": 19,
      "content": "ith suboptimality factor w also\n1 can be very suboptimal under these scenarios. uses a FOCAL list of all nodes currently in the OPEN list\nwhose f-values are no larger than w 1 times the currently IV. DATABASECONFLICTRESOLUTIONINECBS\nsmallestf-valueintheOPENlist.ThenodesintheFOCAL\nDenseinstancesarechallengingforECBStosolve.Fig.2\nlistaresortedinincreasingorderoftheirsecondaryheuristic\nshows an example of applying ECBS to solve a dense\nvalues.A*expandsanodeintheOPENlistwiththesmallest\ninstance in 20 20 that has 272 robots with random starts\nf-value, but a focal search expands a node in the FOCAL ×\nand goals. The NOC decreases as the number of iterations\nlistinsteadwiththesmallestsecondaryheuristicvalue.Thus,\nof high-level expansion increases.",
      "size": 749,
      "sentences": 4
    },
    {
      "id": 20,
      "content": "e, but a focal search expands a node in the FOCAL ×\nand goals. The NOC decreases as the number of iterations\nlistinsteadwiththesmallestsecondaryheuristicvalue.Thus,\nof high-level expansion increases. the secondary heuristic values should favor a node in the\nWhen robot density is not very high, every time a con-\nFOCAL list close to a goal node to speed up the search\nstraintisaddedtoahigh-levelnode,itwillleadtothe NOC\nand thus exploitthe leeway afforded by w that A* doesnot\n1\ndecreasingbyatleastone.Meanwhile,theNOCoftheinitial\nhaveavailable.Iftheprimaryheuristicvaluesareadmissible,\nnodeisnotverylargeforsparseinstances.Therefore,ECBS\nthenafocalsearchisw -suboptimal.Thesecondaryheuristic\n1\nfinds a conflict-free solution efficiently when robot density\nvalues can be inadmissible. is not very high. However, when robot density is high, the\nThe high-level and low-level searches of ECBS(w ) are\n1 NOC will be stuck at some non-zero point. This is because\nboth focal searches.",
      "size": 978,
      "sentences": 6
    },
    {
      "id": 21,
      "content": "ible. is not very high. However, when robot density is high, the\nThe high-level and low-level searches of ECBS(w ) are\n1 NOC will be stuck at some non-zero point. This is because\nboth focal searches. During the generation of a high-level\nrobots’ interactions are strongly correlated in high-density\nnode N, ECBS(w ) performs a low-level focal search with\n1 settings. Adding one constraint to resolve a given conflict\nOPEN list OPEN (N) and FOCAL list FOCAL (N) for the\ni i may cause the low-level planner to find a path conflicting\nrobot i affected by the added constraint. The number of\nwith another robot.",
      "size": 607,
      "sentences": 7
    },
    {
      "id": 22,
      "content": "conflict\nOPEN list OPEN (N) and FOCAL list FOCAL (N) for the\ni i may cause the low-level planner to find a path conflicting\nrobot i affected by the added constraint. The number of\nwith another robot. As a result, the NOC does not decrease\ncollisions(NOC) is used as the secondary heuristic value for\nand there would be a large number of nodes with the same\nthehigh-levelandlow-levelsearches,allowingECBS(w )to\n1 NOCintheOPENlist.ThestagnationofNOCwillcontinue\ngenerate high-level nodes with fewer collisions compared to\nforalongperiodofhigh-levelexpansionuntilitaccidentally\nCBS, which improves its efficiency. However, the path costs\nexpands the correct node. Even worse, it is possible that\ncanbecomelargeforECBS(w )withlargevaluesofw due\n1 1 ECBS cannotfindafeasiblesolutionafterexpandingallthe\nto the larger leeway afforded by w .",
      "size": 834,
      "sentences": 5
    },
    {
      "id": 23,
      "content": "expands the correct node. Even worse, it is possible that\ncanbecomelargeforECBS(w )withlargevaluesofw due\n1 1 ECBS cannotfindafeasiblesolutionafterexpandingallthe\nto the larger leeway afforded by w . The robots might move\n1 nodes with the stagnated NOC in the current OPEN list and\naround in wiggly lines, increasing the chance of collisions,\nit needs to expand nodes with higher NOC, which makes\nthusincreasingthenumberofcollisionsinthehigh-leveland\nECBS very inefficient. low-level nodes of ECBS(w ) and slowing it down. Thus,\n1\nlargervaluesofw donotnecessarilyentailsmallerruntimes 1\nof ECBS(w ). In this paper, the SOC suboptimality bound\n1 10000\nis chosen to be w =1.5, which is a good choice according\n1\nto the original paper [33]. 5000\nC. DDM 0\n1 2 3 4 5 6 7 8 9 10\nDDM [33], standing for diversified path and database- instanceindex\ndriven multi-robot path planner, is a fast suboptimal MRPP\nsolver.",
      "size": 907,
      "sentences": 7
    },
    {
      "id": 24,
      "content": "1\nto the original paper [33]. 5000\nC. DDM 0\n1 2 3 4 5 6 7 8 9 10\nDDM [33], standing for diversified path and database- instanceindex\ndriven multi-robot path planner, is a fast suboptimal MRPP\nsolver. It first generates a shortest path between each pair of\nstartandgoalverticesandthenresolveslocalconflictsamong\nthe initial paths. In generating the initial paths, a path diver-\nsification heuristic is introduced that attempts to make the\npath ensemble use all graph vertices in a balanced manner,\nwhich minimizes the chance that many robots aggregate in\nnoitangatsfosnoitareti\ndfs 103\nsoc\n102\n101\n100\n0\n0 2000 4000 6000\niteration\nstciflnocfomun\ndfs\nsoc\nFig.2. Left:NumberofiterationstoenterNOCstagnationon10random\ninstances on 20×20 map with 272 robots. Right: An example of NOC\nstagnationphenomenonwhenapplyingECBStosolveadenseinstancein\n20×20mapwith272robots. To address the issue, we propose database-accelerated\nenhanced conflict-based search (DCBS) (Alg.",
      "size": 959,
      "sentences": 7
    },
    {
      "id": 25,
      "content": "An example of NOC\nstagnationphenomenonwhenapplyingECBStosolveadenseinstancein\n20×20mapwith272robots. To address the issue, we propose database-accelerated\nenhanced conflict-based search (DCBS) (Alg. 1), which\n[표 데이터 감지됨]\n\n=== 페이지 4 ===\nintroduces a database-driven conflict resolution mechanism the right time to trigger the database-driven conflict resolu-\ninto ECBS to speed up the high-level expansion and cir- tion. Second, the NOC of the node should drop as quickly\ncumventthe NOC stagnation. DCBS expandsthehigh-level as possible and enter the NOC stagnation state as fast as\nnodes regularly as ECBS does initially. When the NOC of possible. For example, in Fig. 2, the blue curve is better\nthe node to expand drops to a specific point, the database than the yellow curve for DCBS since it “converges” to the\nconflict resolution mechanism is triggered and is applied to stagnation point in a much shorter time.",
      "size": 916,
      "sentences": 8
    },
    {
      "id": 26,
      "content": "rops to a specific point, the database than the yellow curve for DCBS since it “converges” to the\nconflict resolution mechanism is triggered and is applied to stagnation point in a much shorter time. Third, if we want a\nthatnode(Line7).Thepathsofthecurrentnodeareusedas suboptimality guarantee at some desired level, ω should be\n2\ntheinitialpathsforconflictresolution.Weapplythedatabase also carefully chosen to balance runtime and optimality. We\nheuristics to resolve all the conflicts in the paths, in a local certainly hope that the NOC of the node to apply database\n2 3 sub-graph or 3 3 sub-graph. There is the possibility conflict resolution is small enough. Otherwise, if the node\n× ×\nthat we cannot find a sub-graph for a pair of conflicting still contains a lot of conflicts, the resulting paths would be\nrobots if the map is not a low-resolution graph [20]. very sub-optimal.",
      "size": 884,
      "sentences": 6
    },
    {
      "id": 27,
      "content": "e\n× ×\nthat we cannot find a sub-graph for a pair of conflicting still contains a lot of conflicts, the resulting paths would be\nrobots if the map is not a low-resolution graph [20]. very sub-optimal. On the other hand, in dense scenarios, if\nWhen we could not resolve the conflicts, we return to thedesired NOC istoosmall,itmighttakeaverylongtime\nthe ECBS high-level expansion routine and continue to use for the NOC of the node to drop to this value. focal search in the low level to resolve the conflicts. If Based on the observations above, we introduce several\nDbResolution succeeds in finding a solution, to ensure additionaltechniquestoenhancetheperformanceof DCBS.",
      "size": 671,
      "sentences": 5
    },
    {
      "id": 28,
      "content": "low level to resolve the conflicts. If Based on the observations above, we introduce several\nDbResolution succeeds in finding a solution, to ensure additionaltechniquestoenhancetheperformanceof DCBS. the solution quality, we check if the MKPN (SOC) sub- We first apply a DFS-like expansion mechanism to speed up\noptimality ratio of paths is within the bound of w , where the NOC descent.Thehighlevelisabest-firstsearchwhich\n2\nw >w isanotheruser-definedsuboptimalitybound.When always first expands the node with the smallest NOC in the\n2 1\nthe solution, after resolving all the conflicts using database FOCAL. When the density is high, as mentioned before,\nheuristicssatisfiestheoptimalityneed,wereturnthesolution. addingoneconstraintforavoidingagivenconflictmaycause\nOtherwise, we continue the ECBS high-level expansion. a new conflict in the child node. As a result, there would\nbe a lot of nodes with the same NOC.",
      "size": 916,
      "sentences": 7
    },
    {
      "id": 29,
      "content": "ingoneconstraintforavoidingagivenconflictmaycause\nOtherwise, we continue the ECBS high-level expansion. a new conflict in the child node. As a result, there would\nbe a lot of nodes with the same NOC. The high-level may\nAlgorithm 1: DCBS Outline randomly pick one node among them, which can be very\ninefficient. Using SOC of the paths as the tie-breaker is a\n1 Root←InitializeRoot()\ncommonwayforthehigh-level search.However,thismakes\n2 OPEN.push(Root)\nthe high-level search inclined to expand nodes with shorter\n3 while OPEN̸=∅ do\npaths, which is efficient in sparse environments. In dense\n4 FOCAL←PriorityQueue({n∈OPEN|n.SOC<\nenvironments, robots inevitably need to take more detours,\nω ·n.LB})\n1\nand shorter paths do not really have fewer conflicts. 5 N ←FOCAL.pop()\nSince shorter paths can be wasteful to sift through, we\n6 OPEN.remove(N)\nspeed up the expansion in DCBS by adopting a DFS-like\n7 if DbTriggered(N)=true then\nstrategy.",
      "size": 934,
      "sentences": 7
    },
    {
      "id": 30,
      "content": "ewer conflicts. 5 N ←FOCAL.pop()\nSince shorter paths can be wasteful to sift through, we\n6 OPEN.remove(N)\nspeed up the expansion in DCBS by adopting a DFS-like\n7 if DbTriggered(N)=true then\nstrategy. Specifically, among the nodes with the same NOC,\n8 success←DbResolution(N)\n9 if success=true and we choose to first explore the node that was most lately\nCheckOptimality(N,ω 2)=true then pushed to the OPEN list. With this choice, the high-level\n10 return N.paths search is more inclined to explore as far as possible along a\n11 end branch. As it goes deeper along a branch more quickly, the\n12 end\nNOC descent enters stagnation in less time. In the example\n13 conflict←FindFirstConflict(N)\nfrom Fig. 2, the blue curve uses the second strategy while\n14 for r involved in conflict do the orange one uses SOC as the tie-breaker.",
      "size": 825,
      "sentences": 7
    },
    {
      "id": 31,
      "content": "n in less time. In the example\n13 conflict←FindFirstConflict(N)\nfrom Fig. 2, the blue curve uses the second strategy while\n14 for r involved in conflict do the orange one uses SOC as the tie-breaker. Using DFS-like\n15 N′ ←N.copy()\n16 C′ ←ResolveConflict(conflict,r) expansion strategy leads to “steeper” NOC descent, which\n17\nN′.constraints.add(C′) is more suitable for DCBS. 18\nsuccess←LowLevelPlanner(N′)\nIn our method, the proper time to trigger the database can\n19 if success=true then be based on the following rules:\n20\nOPEN.push(N′)\n21 end 1) The NOC of the current high-level node is less than a\n22 predefined value NOC p . 23 end 2) The NOC is in stagnation. For example, the value-\n24 end changeoftheNOCinthehigh-levelexpansioniswithin\na range for a number of iterations. Because DCBS preserves the general structure of ECBS, Rule (1) is straightforward. The solution quality of the\nthe bounded-suboptimality guarantee of ECBS is inherited.",
      "size": 950,
      "sentences": 9
    },
    {
      "id": 32,
      "content": "ge for a number of iterations. Because DCBS preserves the general structure of ECBS, Rule (1) is straightforward. The solution quality of the\nthe bounded-suboptimality guarantee of ECBS is inherited. database conflict resolution mechanism is heavily affected\nby the NOC of the node. If the NOC of the current node is\nProposition IV.1. DCBS is complete and w bounded-\n2\nsmall enough, applying the database to resolve the conflicts\nsuboptimal. will introduce only small overheads, and leads to a solution\nTo make DCBS efficient, we observe that we must pay withgoodquality.However,thesuitableNOC mayvaryin\np\ncareful attention to a few key points. First, we must choose different maps and densities. If the NOC is set very small\np\n=== 페이지 5 ===\ninaverydenseenvironment,thehigh-levelsearchmayenter Algorithm 2: SCBS\nNOC stagnation before its NOC drops below NOC p .",
      "size": 861,
      "sentences": 9
    },
    {
      "id": 33,
      "content": "oose different maps and densities. If the NOC is set very small\np\n=== 페이지 5 ===\ninaverydenseenvironment,thehigh-levelsearchmayenter Algorithm 2: SCBS\nNOC stagnation before its NOC drops below NOC p . As a Input: Starts X S, goals X G, preferred density ρ∗\nresult, it takes a long time to trigger the database conflict 1 Function SECBS(S,G):\nresolution. In rule (2), the database conflict resolution is 2 X S ′′ ←SparsifyConfig(X S ,X G ,ρ∗)\nappliedwhenthesearchingenters NOC stagnation,whichis 3 X G ′′ ←SparsifyConfig(X G ,X S ,ρ∗)\nmore flexible than the rule (1). The main drawback of this 4 X S ′,P S ←UMRPP(X S ,X S ′′)\nrule is that there might be multiple stagnations. If the high- 5 X G ′ ,P G ←UMRPP(X G ,X G ′′)\nlevel search enters one stagnation but the NOC is still large,\nthe final solution can be very sub-optimal.",
      "size": 826,
      "sentences": 6
    },
    {
      "id": 34,
      "content": "e is that there might be multiple stagnations. If the high- 5 X G ′ ,P G ←UMRPP(X G ,X G ′′)\nlevel search enters one stagnation but the NOC is still large,\nthe final solution can be very sub-optimal. 6 P M ←ECBS(X S ′,X G ′ )\n7 solution←Merge(P S ,P M ,P G )\n8 return solution\nV. CONFIGURATIONSPARSIFICATION\nIn this section, we describe sparsified enhanced conflict-\nbased search (SCBS), a new algorithm for solving the\ni,weuseA*toexplorethenodesinthegraphwheretheA*\nlocally-dense MRPP instances. In locally-dense MRPP in-\nheuristic is set to be the sum of the distance from its start\nstances,thetotalnumberofrobotsinamapisnotnecessarily\nand goal. For the node u to expand, we check if we choose\nhigh. But in the start/goal configurations, robots might be\nu as the intermediate vertex for robot i whether the local\ndistributed unevenly. In these instances, the local density at\ndensity at each vertex in CONFIG is still less than ρ∗.",
      "size": 933,
      "sentences": 7
    },
    {
      "id": 35,
      "content": "ions, robots might be\nu as the intermediate vertex for robot i whether the local\ndistributed unevenly. In these instances, the local density at\ndensity at each vertex in CONFIG is still less than ρ∗. If\nsomelocationsisextremelyhigh,i.e., 100%.Assumethat\n≈ that is true, we set u as an intermediate vertex and add it to\nthe local area of the vertex v is the W W square area\n× CONFIG. The configurations found by the greedy algorithm\ncentered at v. The local density at vertex v is defined as\nt ρ h l e (v l ) oc = al A n a v v re , a w o h f er v e a n n v d i A s th i e s n t u h m e b n e u r m o b f er ro o b f ot n s on lo - c o a b t s e t d ac i l n e a u r n e la u b s e e le d d a M s t R h P e P un s l o a l b v e e l r e fi d n c d o s n t fi h g e u i r n a t t e io rm ns ed X ia S ′ t ′ e a p n a d th X s P G ′′ S . T an h d e\nv\nP and assigns the intermediate vertices to the robots to get\nvertices in the local area of v. G\nthe labeled configurations X′,X′ .",
      "size": 976,
      "sentences": 5
    },
    {
      "id": 36,
      "content": "io rm ns ed X ia S ′ t ′ e a p n a d th X s P G ′′ S . T an h d e\nv\nP and assigns the intermediate vertices to the robots to get\nvertices in the local area of v. G\nthe labeled configurations X′,X′ . The hybrid SCBS algorithm is outlined in Alg. 2 and S G\nAlg. 3. The basic idea of SCBS is to convert the con-\ngested configurations into some intermediate configura- Algorithm 3: SparsifyConfig\ntions that are less dense and correlated and thus easier 1 CONFIG←{}\nto solve. SCBS first tries to find an intermediate start 2 for i in [1,...,n] do\nconfiguration X S ′ and an intermediate goal configuration 3 n←(s i ,dist(s i ,g i ))\nX G ′ which are more sparse than original starts and goals. 4 OPEN←{n}\nThen the original problem breaks into three sub-problems, 5 CLOSE←{}\nP 1 ( G ,X S ,X S ′),P 2 ( G ,X S ′,X G ′ ),P 3 ( G ,X G ′ ,X G ).",
      "size": 835,
      "sentences": 8
    },
    {
      "id": 37,
      "content": "hich are more sparse than original starts and goals. 4 OPEN←{n}\nThen the original problem breaks into three sub-problems, 5 CLOSE←{}\nP 1 ( G ,X S ,X S ′),P 2 ( G ,X S ′,X G ′ ),P 3 ( G ,X G ′ ,X G ). Since the 6 while OPEN̸=∅ do\nintermediate states are less dense than the original starts 7 (u,f)←OPEN.pop()\nand goals, robots are less correlated, and as a consequence,\n8 if u∈CLOSE then\nsolving P 2 ( G ,X S ′,X G ′ ) using ECBS takes less time than 9 continue\nsolving the original problem. While for P 1 and P 3 , they 10 end\ncan be formulated as unlabeled MRPP and be solved in 11 CLOSE.add(u)\npolynomial time using algorithms in [39], [40] (line 4-5). 12 if CheckDensity(u,CONFIG,ρ∗)∧u̸∈\nThe final solution can be obtained by merging the paths for CONFIG then\nthe sub-problems (line 7). 13 CONFIG.add(u)\nObviously, the sparsification procedure introduces addi- 14 break\ntional overhead on the optimality.",
      "size": 907,
      "sentences": 6
    },
    {
      "id": 38,
      "content": "n can be obtained by merging the paths for CONFIG then\nthe sub-problems (line 7). 13 CONFIG.add(u)\nObviously, the sparsification procedure introduces addi- 14 break\ntional overhead on the optimality. Finding a good interme- 15 end\ndiate state is essential for balancing the computation time 16 for v∈u.neighbors do\nand solution quality. The intermediate configurations should 17 f ←dist(v,s i )+dist(v,g i )\ntry to satisfy the following: (i). X S ′ and X G ′ should be 18 OPEN.push((v,f))\nclose to the original states as much as possible; (ii). The 19 end\nlocal density for each robot is controlled under a preferred 20 end\nrobot density ρ∗, if possible. Finding the intermediate state 21 end\n22 return CONFIG\ncan be formulated as an optimal assignment problem, which\nmay be solved using integer linear programming. However,\nthis would be very time-consuming.",
      "size": 859,
      "sentences": 8
    },
    {
      "id": 39,
      "content": "ng the intermediate state 21 end\n22 return CONFIG\ncan be formulated as an optimal assignment problem, which\nmay be solved using integer linear programming. However,\nthis would be very time-consuming. Instead, we develop As for merging the paths, simply concatenating the paths\nan efficient suboptimal greedy algorithm for finding the which may make the solution very suboptimal in terms of\nassignment. SOC [29]. This is because robots need to be synchronized\nAlg. 2 describes how we find the intermediate configu- to execute the planned paths of each subproblem and some\nration. It runs in a decoupled manner and finds the best of the robots have to wait unnecessarily. We use the method\nlocation for each robot one by one greedily. For each robot based on Minimum Communication Policy (MCP) [41] in\n=== 페이지 6 ===\n[18].Thismethodtriestomovetherobotstotheirnextvertex 60\nin their original plan as quickly as possible, which leads to\n40\na solution with better SOC optimality. 20\nVI.",
      "size": 980,
      "sentences": 10
    },
    {
      "id": 40,
      "content": "licy (MCP) [41] in\n=== 페이지 6 ===\n[18].Thismethodtriestomovetherobotstotheirnextvertex 60\nin their original plan as quickly as possible, which leads to\n40\na solution with better SOC optimality. 20\nVI. EVALUATION\n0\nIn this section, we evaluate the proposed algorithms on 200 220 240 260 280\ndense instances. All experiments are performed on an Intel®\nCoreTM i7-9700 CPU at 3.0GHz. We compare the proposed\nmethods with ECBS (w = 1.5) [33] and DDM [20]. All algorithms are implemented in C++. We evaluate the\nmakespan, SOC, computation time, and success rate on a\ndiverse set of maps and under different robot density levels. We repeated each experiment 20 times for each specific\nsetting using different randomly generated instances for the\nagents, and report the mean values. Each algorithm is given\n60 seconds time limit for each instance and the success\nrate is the number of solved instances divided by the total\nnumber of instances.",
      "size": 934,
      "sentences": 9
    },
    {
      "id": 41,
      "content": "he\nagents, and report the mean values. Each algorithm is given\n60 seconds time limit for each instance and the success\nrate is the number of solved instances divided by the total\nnumber of instances. The source code and evaluation data\nassociated with this research will be made available at\nhttps://github.com/arc-l/dcbs. A. Evaluation on globally dense instances\nInthissection,weevaluate DCBS ondifferentmapswith\ndifferent high robot densities. Here, the starts and goals are\nuniformly randomly generated. We evaluate the algorithms\non three maps as shown in Fig. 3. The results are presented\nin Fig. 4-6. Here, we tested three variants of DCBS. They\ndifferinthestrategyusedtostartdatabaseconflictresolution. DCBS (NOC=20) applies the database conflict resolution\nwhen NOC of the high-level node drops below 20 and uses\nw = . DCBS (POC=10%) applies the database conflict 2\n∞\nresolution when the ratio of the NOC of the current node\nto the NOC of the initial node is less than 10% and uses\nw = .",
      "size": 996,
      "sentences": 14
    },
    {
      "id": 42,
      "content": "drops below 20 and uses\nw = . DCBS (POC=10%) applies the database conflict 2\n∞\nresolution when the ratio of the NOC of the current node\nto the NOC of the initial node is less than 10% and uses\nw = . DCBS (w = 2) applies the database conflict\n2 2\n∞\nresolution when it finds that the NOC enters stagnation for\n100 iterations and uses w = 2. Here for DCBS (w = 2),\n2 2\nwe check the MKPN suboptimality. (a) (b) (c)\nFig.3. Themapusedintheevaluation.(a)20×20emptygridgraph. (b)\n24×18warehouse-likemap.Ithas360non-blockedvertices. (c)24×24\n“lak103”gamemapadaptedfromDAObenchmarks[42].Ithas293non-\nblockedvertices.",
      "size": 606,
      "sentences": 8
    },
    {
      "id": 43,
      "content": "(c)\nFig.3. Themapusedintheevaluation.(a)20×20emptygridgraph. (b)\n24×18warehouse-likemap.Ithas360non-blockedvertices. (c)24×24\n“lak103”gamemapadaptedfromDAObenchmarks[42].Ithas293non-\nblockedvertices. From the experimental data, we observe that the MKPN\nand SOC suboptimality ratio of DCBS variants are much\nbetterthanDDM.Whenenablingthesuboptimalitychecking\nmechanism, the suboptimality ratio of DCBS is around 1.x,\nwhichisquiteacceptable.Ontheotherhand,DCBSvariants\nemitnuR\nDDM ECBS 8\nDCBS(POC=10%)\nDCBS(NOC=20) 6\nDCBS(w2=2)\n4\n2\n200 220 240 260 280\nytilamitpoNPKM\n15\n10\n5\n200 220 240 260 280\nNumofrobots\nytilamitpoCOS\n1.00\n0.75\n0.50\n0.25\n0.00\n200 220 240 260 280\nNumofrobots\netarsseccuS\nFig.4. Performance(computationtime,conservativemakespanoptimality\nratio,conservativesum-of-costoptimalityratio,andsuccessrate)on20×20\nempty grid graph (Fig. 3(a)) for DDM, ECBS, multiple DCBS variants.",
      "size": 889,
      "sentences": 7
    },
    {
      "id": 44,
      "content": "g.4. Performance(computationtime,conservativemakespanoptimality\nratio,conservativesum-of-costoptimalityratio,andsuccessrate)on20×20\nempty grid graph (Fig. 3(a)) for DDM, ECBS, multiple DCBS variants. DCBS with w2 =2 scales much better than ECBS without losing much\noptimalityguarantee.DCBSwithPOC-andNOC-basedheuristicsachieves\nanexcellentbalancebetweencomputationtimeandsolutionoptimality. 60\n40\n20\n0\n180 190 200 210\nemitnuR\nDDM\nECBS 6\nDCBS(POC=10%)\nDCBS(NOC=20)\nDCBS(w2=2)\n4\n2\n180 190 200 210\nytilamitpoNPKM\n10.0\n7.5\n5.0\n2.5\n180 190 200 210\nNumofrobots\nytilamitpoCOS\n1.00\n0.75\n0.50\n0.25\n0.00\n180 190 200 210\nNumofrobots\netarsseccuS\nFig.5. Performance(computationtime,conservativemakespanoptimality\nratio, conservative sum-of-cost optimality ratio, and success rate) on the\nwarehousemap(Fig.3(b))forDDM,ECBS,multipleDCBSvariants.All\nDCBSvariantsachieveanexcellentbalancebetweencomputationtimeand\nsolutionoptimalitycomparedtoDDMandECBS;DCBSwithw2=2does\nespeciallywell.",
      "size": 968,
      "sentences": 6
    },
    {
      "id": 45,
      "content": "n the\nwarehousemap(Fig.3(b))forDDM,ECBS,multipleDCBSvariants.All\nDCBSvariantsachieveanexcellentbalancebetweencomputationtimeand\nsolutionoptimalitycomparedtoDDMandECBS;DCBSwithw2=2does\nespeciallywell. and DDM are more scalable than ECBS and thus yield a\nhigher success rate. On the empty grid and the warehouse\nmap, the success rate of DCBS variants is almost always\n100%,capableoftacklinginstanceswithrobotdensitymore\nthan 60%-70%. On the DAO map that is more complex and\nhassomenarrowpassages, DCBS isstillabletosolvemore\ninstances than ECBS. Despite the lower success rate, the\nsuboptimality checking mechanism is essential to preserve\nthe solution quality. B.",
      "size": 662,
      "sentences": 6
    },
    {
      "id": 46,
      "content": "plex and\nhassomenarrowpassages, DCBS isstillabletosolvemore\ninstances than ECBS. Despite the lower success rate, the\nsuboptimality checking mechanism is essential to preserve\nthe solution quality. B. Evaluation on locally dense instances\nIn this section, we evaluate SCBS with DDM, ECBS,\nand SCBS in two classes of locally dense instances, named\nmulti-robot rearrangement and Gaussian distributed MRPP\n[표 데이터 감지됨]\n\n=== 페이지 7 ===\n60\n40\n20\n0\n100 120 140 160 180\nemitnuR\nDDM\nECBS\nDCBS(NOC=20) 6 DCBS(POC=10%)\nDCBS(w2=2)\n4\n2\n100 120 140 160 180\nytilamitpoNPKM\n15\n10\n5\n100 120 140 160 180\nNumofrobots\nytilamitpoCOS\n1.00\n0.75\n0.50\n0.25\n0.00 100 120 140 160 180\nNumofrobots\netarsseccuS\n60\n40\n20\n0\n20 40 60 80\nFig.6. Performance(computationtime,conservativemakespanoptimality\nratio, conservative sum-of-cost optimality ratio, and success rate) on the\nDAO gamp map (Fig. 3(c)) for DDM, ECBS, multiple DCBS variants. DCBS stilldoesreasonablywellinbalancingsolutioncomputationspeed\nandoptimality.",
      "size": 985,
      "sentences": 7
    },
    {
      "id": 47,
      "content": "e sum-of-cost optimality ratio, and success rate) on the\nDAO gamp map (Fig. 3(c)) for DDM, ECBS, multiple DCBS variants. DCBS stilldoesreasonablywellinbalancingsolutioncomputationspeed\nandoptimality. instance.TogenerateaGaussiandistributedMRPPinstance,\nfor each point, we generate a 2D vector ( x , y ) where\n⌊ ⌋ ⌊ ⌋ x,y (0,σ2) if point ( x , y ) has not been used yet. ∼ N ⌊ ⌋ ⌊ ⌋\nIn the first class, the robots are randomly concentrated in\nthe lower-left corner square area in start/goal configurations\n(e.g., the top row of Fig. 1). In the second class, the\nconfigurations are generated following a two-dimensional\nnormal distribution with σ = 5. In both classes, the graph\nsize can be arbitrarily large (we set a sufficiently large\nboundary in the actual implementation). The results are shown in Fig. 7-8.",
      "size": 810,
      "sentences": 10
    },
    {
      "id": 48,
      "content": "sional\nnormal distribution with σ = 5. In both classes, the graph\nsize can be arbitrarily large (we set a sufficiently large\nboundary in the actual implementation). The results are shown in Fig. 7-8. In the first class\n(rearrangement),robotsaresostrongly-correlatedthatECBS\nstrugglestosolveinstanceswithmorethan36robots.SCBS\n(ρ∗ = 50%) yields 100% success rate and is able to deal\nwith 100+ robots. The unlabeled MRPP only introduces\nsmall overheads to the solution, and the suboptimality ratio\nof SCBS is around 1.x-2.x. VII. CONCLUSIONANDDISCUSSIONS\nIn this paper, we present two novel heuristics-based algo-\nrithms for multi-robot path planning (MRPP) in dense and\ncongested environments, with the goal to provide to quickly\nprovide high-quality solutions for these problems. The first\nmethod, DCBS, incorporates a database-driven conflict res-\nolutionmechanismtoresolvenodeconflictsindensesetups. Optimalityprotectionrulesarealsoinstilledtomaintainrea-\nsonable solution quality.",
      "size": 982,
      "sentences": 10
    },
    {
      "id": 49,
      "content": "first\nmethod, DCBS, incorporates a database-driven conflict res-\nolutionmechanismtoresolvenodeconflictsindensesetups. Optimalityprotectionrulesarealsoinstilledtomaintainrea-\nsonable solution quality. Whereas DCBS addresses globally\ndense scenarios, the second method, SCBS, tackles locally\ndense settings by converting ultra-dense configurations into\nsparser ones through a greedy start-goal assignment and\nthen solving an unlabeled MRPP. The sparsification step,\nwhile incurring some overhead, makes the overall problem\nsignificantlyeasier.Throughextensiveexperiments,weshow\nthat our proposed methods achieve excellent performance in\nbalancing success rate, running time, and solution quality. Currently, DCBS only uses a fairly basic solution\nemitnuR\nDDM 20\nECBS\nD SC C B B S S ( ( ρ w ∗ 2 = = 5 2 0 ) %) 15\nSCBS(ρ∗=60%)\n10\n5\n20 40 60 80\nytilamitpoNPKM\n40\n30\n20\n10\n0 20 40 60 80\nNumofrobots\nytilamitpoCOS\n1.00\n0.75\n0.50\n0.25\n0.00 20 40 60 80\nNumofrobots\netarsseccuS\nFig.7.",
      "size": 974,
      "sentences": 5
    },
    {
      "id": 50,
      "content": "S S ( ( ρ w ∗ 2 = = 5 2 0 ) %) 15\nSCBS(ρ∗=60%)\n10\n5\n20 40 60 80\nytilamitpoNPKM\n40\n30\n20\n10\n0 20 40 60 80\nNumofrobots\nytilamitpoCOS\n1.00\n0.75\n0.50\n0.25\n0.00 20 40 60 80\nNumofrobots\netarsseccuS\nFig.7. Performance(computationtime,conservativemakespanoptimality\nratio,conservativesum-of-costoptimalityratio,andsuccessrate)onmulti-\nrobotrearrangementsettings(e.g.,thetoprowofFig.1)forDDM,ECBS,\nDCBS, and SCBS. Whereas DCBS does better than DDM and ECBS,\nSCBS leaves all methods far behind in achieving an excellent balance\nbetweenoptimalityandcomputationalefficiency. 60\n40\n20\n0\n150 200 250 300\nemitnuR\nDDM 8\nECBS\nDCBS(w2=2) SCBS(ρ∗=50%) 6\nSCBS(ρ∗=60%)\n4\n2\n150 200 250 300\nytilamitpoNPKM\n15\n10\n5\n150 200 250 300\nNumofrobots\nytilamitpoCOS\n1.00\n0.75\n0.50\n0.25\n0.00\n150 200 250 300\nNumofrobots\netarsseccuS\nFig.8. Performance(computationtime,conservativemakespanoptimality\nratio,conservativesum-of-costoptimalityratio,andsuccessrate)onGaus-\nsian distributed MRPP instances for DDM, ECBS, DCBS, and SCBS.",
      "size": 994,
      "sentences": 5
    },
    {
      "id": 51,
      "content": "uS\nFig.8. Performance(computationtime,conservativemakespanoptimality\nratio,conservativesum-of-costoptimalityratio,andsuccessrate)onGaus-\nsian distributed MRPP instances for DDM, ECBS, DCBS, and SCBS. Again,SCBStradesverynicelybetweenscalabilityandsolutionoptimality. database, which is limiting the speed and flexibility of\nDCBS. In future work, we plan to significantly expand the\nsolution database while keeping it sufficiently small for fast\nlook-ups. Portions of the database may also be augmented\nusing machine learning. We expect this to provide a sizable\nperformance boost for DCBS. There are also many open questions that should be inves-\ntigated further. For example, as of now, the way we trigger\ntheconflictresolutionmechanismissomewhatrigid.Canwe\ndevise a better approach, e.g., using a data-driven method,\nto figure out the optimal time to trigger conflict resolution?",
      "size": 881,
      "sentences": 9
    },
    {
      "id": 52,
      "content": "now, the way we trigger\ntheconflictresolutionmechanismissomewhatrigid.Canwe\ndevise a better approach, e.g., using a data-driven method,\nto figure out the optimal time to trigger conflict resolution? As another example, there is still a lack of understanding\nof the exact relationship between time complexity and robot\ndensityanddistribution.Canweestablishadeeper,orbetter\nyet, quantitative, relationship between the two? [표 데이터 감지됨]\n\n=== 페이지 8 ===\nREFERENCES [24] P. Surynek, “An optimization variant of multi-robot path planning\nis intractable,” in Proceedings of the AAAI Conference on Artificial\n[1] J. Yu and S. M. LaValle, “Structure and intractability of optimal\nIntelligence,vol.24,no.1,2010. multi-robotpathplanningongraphs,”inProceedingsAAAINational\n[25] J.YuandS.M.LaValle,“Structureandintractabilityofoptimalmulti-\nConferenceonArtificialIntelligence,2013,pp.1444–1449.",
      "size": 879,
      "sentences": 4
    },
    {
      "id": 53,
      "content": "e,vol.24,no.1,2010. multi-robotpathplanningongraphs,”inProceedingsAAAINational\n[25] J.YuandS.M.LaValle,“Structureandintractabilityofoptimalmulti-\nConferenceonArtificialIntelligence,2013,pp.1444–1449. robot path planning on graphs,” in Twenty-Seventh AAAI Conference\n[2] P. Surynek, “An optimization variant of multi-robot path planning is onArtificialIntelligence,2013. intractable,” in Proceedings AAAI National Conference on Artificial\n[26] H.Ma,C.Tovey,G.Sharon,T.Kumar,andS.Koenig,“Multi-agent\nIntelligence,2010,pp.1261–1263. pathfindingwithpayloadtransfersandthepackage-exchangerobot-\n[3] J. Yu, “Intractability of optimal multi-robot path planning on planar routingproblem,”inProceedingsoftheAAAIConferenceonArtificial\ngraphs,” IEEE Robotics and Automation Letters, vol. 1, no. 1, pp. Intelligence,vol.30,no.1,2016. 33–40,2016.",
      "size": 833,
      "sentences": 9
    },
    {
      "id": 54,
      "content": "robot path planning on planar routingproblem,”inProceedingsoftheAAAIConferenceonArtificial\ngraphs,” IEEE Robotics and Automation Letters, vol. 1, no. 1, pp. Intelligence,vol.30,no.1,2016. 33–40,2016. [27] J.YuandS.M.LaValle,“Optimalmultirobotpathplanningongraphs:\n[4] P.R.Wurman,R.D’Andrea,andM.Mountz,“Coordinatinghundreds Completealgorithmsandeffectiveheuristics,”IEEETransactionson\nof cooperative, autonomous vehicles in warehouses,” AI magazine, Robotics,vol.32,no.5,pp.1163–1177,2016. vol.29,no.1,pp.9–9,2008. [28] E.Erdem,D.G.Kisa,U.O¨ztok,andP.Schueller,“Ageneralformal\n[5] R.Mason,“Developingaprofitableonlinegrocerylogisticsbusiness: framework for pathfinding problems with multiple agents.” in AAAI,\nExploring innovations in ordering, fulfilment, and distribution at\n2013.\nocado,”inContemporaryOperationsandLogistics. Springer,2019,\n[29] T.Guo,S.D.Han,andJ.Yu,“Spatialandtemporalsplittingheuristics\npp.365–383.",
      "size": 920,
      "sentences": 9
    },
    {
      "id": 55,
      "content": "nnovations in ordering, fulfilment, and distribution at\n2013.\nocado,”inContemporaryOperationsandLogistics. Springer,2019,\n[29] T.Guo,S.D.Han,andJ.Yu,“Spatialandtemporalsplittingheuristics\npp.365–383. formulti-robotmotionplanning,”in2021IEEEInternationalConfer-\n[6] Q. Wan, C. Gu, S. Sun, M. Chen, H. Huang, and X. Jia, “Lifelong enceonRoboticsandAutomation(ICRA),2021,pp.8009–8015. multi-agent path finding in a dynamic environment,” in 2018 15th\n[30] P. E. Hart, N. J. Nilsson, and B. Raphael, “A formal basis for the\nInternationalConferenceonControl,Automation,RoboticsandVision\nheuristicdeterminationofminimumcostpaths,”IEEEtransactionson\n(ICARCV). IEEE,2018,pp.875–882. SystemsScienceandCybernetics,vol.4,no.2,pp.100–107,1968. [7] S. Poduri and G. S. Sukhatme, “Constrained coverage for mobile [31] D. Silver, “Cooperative pathfinding.” AIIDE, vol. 1, pp. 117–122,\nsensor networks,” in Proceedings IEEE International Conference on\n2005. Robotics&Automation,2004.",
      "size": 966,
      "sentences": 10
    },
    {
      "id": 56,
      "content": "onstrained coverage for mobile [31] D. Silver, “Cooperative pathfinding.” AIIDE, vol. 1, pp. 117–122,\nsensor networks,” in Proceedings IEEE International Conference on\n2005. Robotics&Automation,2004. [32] G.Sharon,R.Stern,M.Goldenberg,andA.Felner,“Theincreasing\n[8] F. A. A. Cheein and R. Carelli, “Agricultural robotics: Unmanned cost tree search for optimal multi-agent pathfinding,” Artificial Intel-\nroboticserviceunitsinagriculturaltasks,”IEEEindustrialelectronics\nligence,vol.195,pp.470–495,2013. magazine,vol.7,no.3,pp.48–58,2013. [33] M. Barer, G. Sharon, R. Stern, and A. Felner, “Suboptimal variants\n[9] D.Rus,B.Donald,andJ.Jennings,“Movingfurniturewithteamsof\noftheconflict-basedsearchalgorithmforthemulti-agentpathfinding\nautonomous robots,” in Proceedings IEEE/RSJ International Confer- problem,” in Seventh Annual Symposium on Combinatorial Search,\nenceonIntelligentRobots&Systems,1995,pp.235–242. 2014.",
      "size": 917,
      "sentences": 9
    },
    {
      "id": 57,
      "content": "gentpathfinding\nautonomous robots,” in Proceedings IEEE/RSJ International Confer- problem,” in Seventh Annual Symposium on Combinatorial Search,\nenceonIntelligentRobots&Systems,1995,pp.235–242. 2014. [10] J.A.Preiss,W.Ho¨nig,G.S.Sukhatme,andN.Ayanian,“Crazyswarm:\n[34] K. Okumura, M. Machida, X. De´fago, and Y. Tamura, “Priority\nAlargenano-quadcopterswarm,”inIEEEInt.Conf.onRoboticsand\ninheritance with backtracking for iterative multi-agent path finding,”\nAutomation(ICRA),2017.\narXivpreprintarXiv:1901.11282,2019. [11] D.Kornhauser,G.Miller,andP.Spirakis,“Coordinatingpebblemo-\n[35] R.J.LunaandK.E.Bekris,“Pushandswap:Fastcooperativepath-\ntionongraphs,thediameterofpermutationgroups,andapplications,” findingwithcompletenessguarantees,”inTwenty-SecondInternational\ninProceedingsIEEESymposiumonFoundationsofComputerScience,\nJointConferenceonArtificialIntelligence,2011. 1984,pp.241–250.",
      "size": 888,
      "sentences": 5
    },
    {
      "id": 58,
      "content": "applications,” findingwithcompletenessguarantees,”inTwenty-SecondInternational\ninProceedingsIEEESymposiumonFoundationsofComputerScience,\nJointConferenceonArtificialIntelligence,2011. 1984,pp.241–250. [36] M.SzegedyandJ.Yu,“Onrearrangementofitemsstoredinstacks,”\n[12] M.A.ErdmannandT.Lozano-Pe´rez,“Onmultiplemovingobjects,” in The 14th International Workshop on the Algorithmic Foundations\ninProceedingsIEEEInternationalConferenceonRobotics&Automa-\nofRobotics,2020. tion,1986,pp.1419–1424. [37] T.Guo,S.W.Feng,andJ.Yu,“PolynomialTimeNear-Time-Optimal\n[13] S. M. LaValle and S. A. Hutchinson, “Optimal motion planning for\nMulti-Robot Path Planning in Three Dimensions with Applications\nmultiple robots having independent goals,” IEEE Transactions on to Large-Scale UAV Coordination,” in 2022 IEEE/RSJ International\nRobotics&Automation,vol.14,no.6,pp.912–925,Dec.1998. ConferenceonIntelligentRobotsandSystems(IROS),2022.",
      "size": 918,
      "sentences": 6
    },
    {
      "id": 59,
      "content": "goals,” IEEE Transactions on to Large-Scale UAV Coordination,” in 2022 IEEE/RSJ International\nRobotics&Automation,vol.14,no.6,pp.912–925,Dec.1998. ConferenceonIntelligentRobotsandSystems(IROS),2022. [14] Y.GuoandL.E.Parker,“Adistributedandoptimalmotionplanning [38] J.PearlandJ.H.Kim,“Studiesinsemi-admissibleheuristics,”IEEE\napproach for multiple mobile robots,” in Proceedings IEEE Interna- transactionsonpatternanalysisandmachineintelligence,no.4,pp. tionalConferenceonRobotics&Automation,2002,pp.2612–2619. 392–399,1982. [15] J. Yu and S. M. LaValle, “Optimal multi-robot path planning on\n[39] J.YuandM.LaValle,“Distanceoptimalformationcontrolongraphs\ngraphs: Complete algorithms and effective heuristics,” IEEE Trans- with a tight convergence time guarantee,” in 2012 IEEE 51st IEEE\nactionsonRobotics,vol.32,no.5,pp.1163–1177,2016. ConferenceonDecisionandControl(CDC).",
      "size": 873,
      "sentences": 7
    },
    {
      "id": 60,
      "content": "lgorithms and effective heuristics,” IEEE Trans- with a tight convergence time guarantee,” in 2012 IEEE 51st IEEE\nactionsonRobotics,vol.32,no.5,pp.1163–1177,2016. ConferenceonDecisionandControl(CDC). IEEE,2012,pp.4023–\n[16] E. Boyarski, A. Felner, R. Stern, G. Sharon, O. Betzalel, D. Tolpin,\n4028.\nandE.Shimony,“Icbs:Theimprovedconflict-basedsearchalgorithm\n[40] J. Yu and S. M. LaValle, “Multi-agent path planning and network\nformulti-agentpathfinding,”inEighthAnnualSymposiumonCombi-\nflow,”inAlgorithmicfoundationsofroboticsX. Springer,2013,pp. natorialSearch,2015. 157–173. [17] L. Cohen, T. Uras, T. Kumar, H. Xu, N. Ayanian, and S. Koenig,\n[41] K.-C. Ma, L. Liu, and G. S. Sukhatme, “An information-driven and\n“Improved bounded-suboptimal multi-agent path finding solvers,” in\ndisturbance-awareplanningmethodforlong-termoceanmonitoring,”\nInternationalJointConferenceonArtificialIntelligence,2016.",
      "size": 902,
      "sentences": 7
    },
    {
      "id": 61,
      "content": "n-driven and\n“Improved bounded-suboptimal multi-agent path finding solvers,” in\ndisturbance-awareplanningmethodforlong-termoceanmonitoring,”\nInternationalJointConferenceonArtificialIntelligence,2016. in Intelligent Robots and Systems (IROS), 2016 IEEE/RSJ Interna-\n[18] T. Guo and J. Yu, “Toward efficient physical and algorithmic design tionalConferenceon. IEEE,2016,pp.2102–2108. ofautomatedgarages,”arXivpreprintarXiv:2302.01305,2023. [42] R. Stern, N. R. Sturtevant, A. Felner, S. Koenig, H. Ma, T. T.\n[19] A.Okoso,K.Otaki,S.Koide,andT.Nishi,“Highdensityautomated\nWalker, J. Li, D. Atzmon, L. Cohen, T. K. S. Kumar, E. Boyarski,\nvalet parking via multi-agent path finding,” in 2022 IEEE 25th In-\nand R. Bartak, “Multi-agent pathfinding: Definitions, variants, and\nternationalConferenceonIntelligentTransportationSystems(ITSC). benchmarks,”SymposiumonCombinatorialSearch(SoCS),pp.151–\nIEEE,2022,pp.2146–2153. 158,2019.",
      "size": 921,
      "sentences": 7
    },
    {
      "id": 62,
      "content": "agent pathfinding: Definitions, variants, and\nternationalConferenceonIntelligentTransportationSystems(ITSC). benchmarks,”SymposiumonCombinatorialSearch(SoCS),pp.151–\nIEEE,2022,pp.2146–2153. 158,2019. [20] S. D. Han and J. Yu, “Ddm: Fast near-optimal multi-robot path\nplanning using diversified-path and optimal sub-problem solution\ndatabaseheuristics,”ArXiv,vol.abs/1904.02598,2019. [21] G.Sharon,R.Stern,A.Felner,andN.R.Sturtevant,“Conflict-based\nsearchforoptimalmulti-agentpathfinding,”ArtificialIntelligence,vol. 219,pp.40–66,2015. [22] T.GuoandJ.Yu,“Sub-1.5Time-OptimalMulti-RobotPathPlanning\non Grids in Polynomial Time,” in Proceedings of Robotics: Science\nandSystems,NewYorkCity,NY,USA,June2022. [23] R.Stern,N.Sturtevant,A.Felner,S.Koenig,H.Ma,T.Walker,J.Li,\nD.Atzmon,L.Cohen,T.Kumar,etal.,“Multi-agentpathfinding:Def-\ninitions,variants,andbenchmarks,”arXivpreprintarXiv:1906.08291,\n2019.",
      "size": 896,
      "sentences": 8
    }
  ]
}