{
  "source": "ArXiv",
  "filename": "039_Novel_Approach_for_Solving_a_Variant_of_Equal_Flow.pdf",
  "total_chars": 21431,
  "total_chunks": 30,
  "chunks": [
    {
      "id": 1,
      "content": "=== 페이지 1 ===\n9102\nceD\n01\n]IA.sc[\n2v43040.2191:viXra\nA novel approach for solving a variant of\nTransportation Problem\nSwapnil K Sinha1, Sasikanth Raghava Goteti2\n1swapnil.bit@iitbombay.org\n2raghavas@thoughtworks.com\nAbstract\nIn this article we consider a certain sub class of Integer Equal Flow problem,\nwhich are known NP hard [8]. Currently there exist no direct solutions for\nthe same. It is a common problem in various inventory management systems. Here we discuss a local minima solution which uses projection of the convex\nspaces to resolve the equal flows and turn the problem into a known linear\ninteger programming or constraint satisfaction problem which have reasonable\nknown solutions and can be effectively solved using simplex or other standard\noptimization strategies. Keywords— Integer Equal Flow, Transportation, Constraint Satisfaction\n1 Problem Space\nInteger equal flow problems are known to be NP-Hard as observed by Meyers and Schulz\n[8].",
      "size": 959,
      "sentences": 5
    },
    {
      "id": 2,
      "content": "ptimization strategies. Keywords— Integer Equal Flow, Transportation, Constraint Satisfaction\n1 Problem Space\nInteger equal flow problems are known to be NP-Hard as observed by Meyers and Schulz\n[8]. Most solutionstothiswouldrequiregraphtheoreticlanguagetoformulateitcorrectly,\nas proposed by Morrison et al. [9]. Effective algorithms like network simplex can be used\nto iteratively improve upon a simple feasible solution. We can formally define an integer\nequal flow problem as:\nmin cTX\nX\ns.t. P x − P x = b\nj:(i,j)∈A ij j:(j,i)∈A ji i\nx ≥ 0 ∀j ∈ N\nij (1)\nx ≤ u\nij ij\nx = t ∀ik ∈ Class(t)\nik\nx ∈ Z\nij\nOne could extend the same definition of network flow optimization to specific cases\nof transportation and assignment problems. An equal transportation problem can be\n1\n=== 페이지 2 ===\nextended as:\nmin cTX\nX\nn\ns.t.",
      "size": 814,
      "sentences": 8
    },
    {
      "id": 3,
      "content": "tend the same definition of network flow optimization to specific cases\nof transportation and assignment problems. An equal transportation problem can be\n1\n=== 페이지 2 ===\nextended as:\nmin cTX\nX\nn\ns.t. P x = b\nj=1 ij i\nn\nP x = a\ni=1 ij j\nx ≥ 0 (2)\nij\nx ≤ u\nij ij\nx = t ∀ik ∈ Class(t)\nik\nx ∈ Z\nij\nIn many cases of transportation or assignment problems, it is important to follow the\nsame routes or same inventory allocations over a period of repeated inventory assignment\ncycles mainly to reduce maintenance costs or other taxation charges. To resolve these\nscenarios, it is important that the same inventory takes the same route every time. So if\nwe add a third index τ for time period, we can define an equal assignment over time. We\ndefine a corresponding same route transportation problem as:\nmin cTX\nX\nn\ns.t. P x = b\nj=1 ijτ iτ\nn\nP x = a\ni=1 ijτ jτ\nx ≥ 0 (3)\nijτ\nx ≤ u\nijτ ijτ\nx = t ∀τ ∈ Class(t )\nikτ ik ik\nx ∈ Z\nijτ\nDefinition 1.1.",
      "size": 935,
      "sentences": 7
    },
    {
      "id": 4,
      "content": "ine a corresponding same route transportation problem as:\nmin cTX\nX\nn\ns.t. P x = b\nj=1 ijτ iτ\nn\nP x = a\ni=1 ijτ jτ\nx ≥ 0 (3)\nijτ\nx ≤ u\nijτ ijτ\nx = t ∀τ ∈ Class(t )\nikτ ik ik\nx ∈ Z\nijτ\nDefinition 1.1. Class: We define the set of all arcs in a same transportation with same\nvalue and same indexes as Class(t ) where indices are represented as usual interpreta-\nikτ\ntion\nExample 1.1.1. Class(t ) represents set of all source vectors that are equal to t\ni,, i\nExample 1.1.2. Class(t ) represents set of all destination vectors that are equal to t\n,k, k\nExample 1.1.3. Class(t ) represents set of all arc scalars that are equal to t across\ni,k, ik\nall τ\nExample 1.1.4. Class(t ) represents set of all transportation problems that have same\n,,\nsolution space across all τ\nOften in usage we will ignore the , and leave it for interpretation with the subscript\nused. Onecanextend thesame problem to amuch broader setting ofassignment problem.",
      "size": 934,
      "sentences": 8
    },
    {
      "id": 5,
      "content": ",,\nsolution space across all τ\nOften in usage we will ignore the , and leave it for interpretation with the subscript\nused. Onecanextend thesame problem to amuch broader setting ofassignment problem. A typical same inventory assignment problem would look like:\nmin cTX\nX\nn\ns.t. P x = 1\nj=1 ijτ\nP n x = 1 (4)\ni=1 ijτ\nx ∈ {0,1}\nijτ\nx = t ∀τ ∈ Class(t )\nikτ ik ik\n2\n=== 페이지 3 ===\nOne could formulate generalized assignment and generalized transportation problems\nunder the same breadth. We will specifically deal with a generalized same route assign-\nment problem, which can be formulated as:\nmin cTX\nX\nn\ns.t. P x = b\nj=1 ijτ iτ\nP n x = 1 (5)\ni=1 ijτ\nx ∈ {0,1}\nijτ\nx = t ∀τ ∈ Class(t )\nikτ ik ik\n2 Feasibility Certificates\nFeasibility certificate or a gale certificate [4] typically can be understood as determining\nif the constraints in a network optimization have a feasible flow or not.",
      "size": 886,
      "sentences": 6
    },
    {
      "id": 6,
      "content": "ik ik\n2 Feasibility Certificates\nFeasibility certificate or a gale certificate [4] typically can be understood as determining\nif the constraints in a network optimization have a feasible flow or not. This is very\neasy to determine in a simple transportation problem - if it’s balanced we are always\nguaranteed to have a feasible solution. One can quickly verify it using a simple north-\nwest corner solution. For a more rigorous treatment of the same we will need a Matroid\ntheory. In specific to solving a forbidden arc transportation problem we will need to\nprove the existence of a Monge sequence as observed by Shamir et al. [1]. We can define\na forbidden-arc same route assignment problem as below. Definition 2.1. We call the set of all arcs where the flow is constrained to void as\nforbidden arcs and represent this set by F\nF = {(i,k,τ) | x = 0}\nikτ\nmin cTX\nX\nn\ns.t.",
      "size": 874,
      "sentences": 9
    },
    {
      "id": 7,
      "content": "assignment problem as below. Definition 2.1. We call the set of all arcs where the flow is constrained to void as\nforbidden arcs and represent this set by F\nF = {(i,k,τ) | x = 0}\nikτ\nmin cTX\nX\nn\ns.t. P x = b\nj=1 ijτ iτ\nn\nP x = 1\ni=1 ijτ (6)\nx ∈ {0,1}\nijτ\nx = t ∀τ ∈ Class(t )\nikτ ik ik\nx = 0 ∀(i,j,λ) ∈ F\nijλ\nwhere F is the set of all forbidden arcs (note that the equal flow arcs are counted\nmultiple times in the forbidden arc constraints F as they are equally 0 everywhere). Inasimilar setting onecoulddefine thefeasibility certificate problemofaforbidden-arc\nsame route generalized assignment problem as:\n∃ X\nn\ns.t. P x = b\nj=1 ijτ iτ\nn\nP x = 1\ni=1 ijτ (7)\nx ∈ {0,1}\nijτ\nx = t ∀τ ∈ Class(t )\nikτ ik ik\nx = 0 ∀(i,j,λ) ∈ F\nijλ\n3\n=== 페이지 4 ===\n3 Problem reformulations\n3.1 Stacking By index\nOne could reformulate the problem by stacking the individual transportation problems\nintoonebigtransportationproblemandsetting orforcingall theirrelevant arcsforciblyto\nzero.",
      "size": 966,
      "sentences": 6
    },
    {
      "id": 8,
      "content": "ns\n3.1 Stacking By index\nOne could reformulate the problem by stacking the individual transportation problems\nintoonebigtransportationproblemandsetting orforcingall theirrelevant arcsforciblyto\nzero. Once this is done the transportation matrix would look like a block diagonal matrix\nwith indexed transportation problems along the block diagonal and the entire matrix can\nitself be handled as a forbidden arc transportation problem. A similar transportation matrix would look like:\nx x 0 0 ··· 0\n000 010\nx x 0 0 ··· 0\n100 110\n0 0 x x ··· 0\n001 011\n.. . . 0 0 x x . . 101 111\n. . . . . . .. ..\n. . . . . x\n01τ\n0 0 0 ··· x x\nn0τ n1τ\n3.2 Resolving Sparsity\nA diagonal transportation matrix like the one above has serious sparsity problems making\nit difficult to solve using conventional transportation strategies.",
      "size": 810,
      "sentences": 18
    },
    {
      "id": 9,
      "content": "0 0 ··· x x\nn0τ n1τ\n3.2 Resolving Sparsity\nA diagonal transportation matrix like the one above has serious sparsity problems making\nit difficult to solve using conventional transportation strategies. Hence we will modify the\ncost function to throw high cost to get rid of the sparse arcs or force set them to 0s, so\nan equivalent form of a sparse transportation problem can be reinterpreted as:\nmin cTX +ΛTY ∀y ∈ F\n(i,j,λ)\nX\nn\ns.t. P x = b\nj=1 ij i\nn\nP x = 1\ni=1 ij (8)\nx ∈ {0,1}\nij\nx = t ∀ik ∈ Class(t )\nik ik ik\nλ >> 1\nNote that we have converted the sparsity constraints into the objective by taking the\ndual form for those particular constraints. 3.3 Resolving equality constraints\nOne could further the same idea and even get rid of the equality conditions but at the\ncost of introducing a quadratic objective. One could reformulate the problem as\nmin cTX +ΛTY +λP (x −t )2 ∀y ∈ F\n∀(i,k)∈Class(t ) ik ik (i,j,λ)\nX ik\nn\ns.t.",
      "size": 928,
      "sentences": 5
    },
    {
      "id": 10,
      "content": "t rid of the equality conditions but at the\ncost of introducing a quadratic objective. One could reformulate the problem as\nmin cTX +ΛTY +λP (x −t )2 ∀y ∈ F\n∀(i,k)∈Class(t ) ik ik (i,j,λ)\nX ik\nn\ns.t. P x = b\nj=1 ij i\nP n x = 1 (9)\ni=1 ij\nx ∈ {0,1}\nij\nλ >> 1\n4\n=== 페이지 5 ===\nThe above formulation is a standard generalized quadratic transportation problem\nwhich has some known approaches. One could use an equalization method as proposed\nby Marcin et al. [2]. But this is still a quadratic transportation problem with no bounds\non convergence that can be given. One could even stack the indexes in a multidimensional way and arrive at a 3D trans-\nportation problem which has some known solutions as proposed by Stefan et al. [10]. But\neven this approach cannot get rid of the quadratic cost function. One could have easy\nsolutions to this problem once it has been linearized in some form as noted by Bertsekas\net al. [11].",
      "size": 921,
      "sentences": 11
    },
    {
      "id": 11,
      "content": ". [10]. But\neven this approach cannot get rid of the quadratic cost function. One could have easy\nsolutions to this problem once it has been linearized in some form as noted by Bertsekas\net al. [11]. However it is not possible to linearize a quadratic transportation problem the\nway it could be done with an assignment problem using Glover Linearization [5]. So it\nis significantly harder to solve a quadratic transportation problem than even solving a\nquadratic assignment problem and the state of the art solutions for QAP almost never\nscale over n = 20 [3]. In case of quadratic transportation problem its much harder to\neven formulate the complexity as a dependent of n.\n4 Exploiting the inherent symmetries\nDefinition 4.1. Similar Route: Similar routes in a same route transportation problem\nare the row vector which are bounded by the equality constraint. It is represented as µ .",
      "size": 886,
      "sentences": 10
    },
    {
      "id": 12,
      "content": "the inherent symmetries\nDefinition 4.1. Similar Route: Similar routes in a same route transportation problem\nare the row vector which are bounded by the equality constraint. It is represented as µ . k\nIt is simply the arcs represented by indices in Class(t ):\ni\nµ = {x | (i,τ) ∈ Class(t )}\nk ikτ k\nDefinition 4.2. Equibounded: A same route transportation problem is called equibounded\nif all the arcs in the similar routes have the same bounds, A same route transportation\nproblem is equibounded if it satisfies the predicate:\n∃l ,∃u (l < t < u ,∀x ∈ A ∈ A | x = t )\nik ik ik ik ik ikτ ik k ikτ ik\nDefinition 4.3. Symbol of A transportation: The span of a same route transportation\nproblem is the count of its sources, destinations and similarity classes. It is represented\nby ς . It can be assigned a value i∗k∗τ, called the size of a transportation. In general,\nikτ\na transportation problem is said feasible by its symbol ς directly. ikτ\nDefinition 4.4.",
      "size": 955,
      "sentences": 10
    },
    {
      "id": 13,
      "content": "It is represented\nby ς . It can be assigned a value i∗k∗τ, called the size of a transportation. In general,\nikτ\na transportation problem is said feasible by its symbol ς directly. ikτ\nDefinition 4.4. Symbol of An Assignment: The span of a same route Assignmentproblem\nis the count of its sources, destinations and similarity classes. It is represented by α . It\nikτ\ncan be assigned a value i∗k∗τ, called the size of a Assignment. In general, an Assignment\nproblem is said feasible by its symbol α directly. ikτ\n4.1 Equivalence Theorems\nTheorem 1 (Weak Equivalence). For every same route Assignment problem with a fea-\nsibility certificate there exists a corresponding Same route transportation problem with a\nfeasibility certificate whenever the problems are equibounded. Proof. Its very easy to see that for every transportation setup there exists an equivalent\nassignment problem that can be solved but to prove the equivalence we need to prove the\n5\n=== 페이지 6 ===\nconverse as well.",
      "size": 984,
      "sentences": 12
    },
    {
      "id": 14,
      "content": "ry easy to see that for every transportation setup there exists an equivalent\nassignment problem that can be solved but to prove the equivalence we need to prove the\n5\n=== 페이지 6 ===\nconverse as well. Sincethetransportationproblemanditsequivalent Assignment problemareequibounded,\nwe will assume that the lower bound is 0 and just prove for the case of upper bound. Similar proof can be extended to the case of double bound as well. We conduct the proof by induction:\nFor n = 1, if we have x +x +... = b , wherever we have x > 0 the corresponding\n0i 0(i+1) i ij\nassignment variables should all be set to 1 else 0. If the assignment is surplus then we can\nrandomlysample anyset ofvariables. Ifassignment isinsufficient, thenthetransportation\nproblem would have never given a feasibility certificate. If for some n = k, (ς ⇐⇒ α )∧ς then we need to prove that α .",
      "size": 859,
      "sentences": 7
    },
    {
      "id": 15,
      "content": "lysample anyset ofvariables. Ifassignment isinsufficient, thenthetransportation\nproblem would have never given a feasibility certificate. If for some n = k, (ς ⇐⇒ α )∧ς then we need to prove that α . ikτ ikτ i(k+1)τ i(k+1)τ\nFor the (k + 1)th route take the x values from ς and randomly assign 1s to\ni(k+1) i(k+1)τ\ncorrespondingvariablesandsubtracttheseassignedvaluesfrombothς andα . i(k+1)τ i(k+1)τ\nThe remaining constraints correspondingly constitute ς and α , which we know are\ni(k)τ i(k)τ\nfeasible by inductive step definition. Intuitively we can reduce every α into α and α , both of which we know are\ni(k+1)τ i(k)τ i(1)τ\nfeasible. Theorem 2 (Strong Equivalence). For every same route Assignment problem with a\nfeasibility certificate there exists a corresponding Same route transportation problem with\na feasibility certificate\nProof. In case of unequibound problem we split the variables into two and realize that\nthe equivalent problem is solvable for every variable in ς .",
      "size": 980,
      "sentences": 9
    },
    {
      "id": 16,
      "content": "ansportation problem with\na feasibility certificate\nProof. In case of unequibound problem we split the variables into two and realize that\nthe equivalent problem is solvable for every variable in ς . We just need to realize that\nikτ\nthere exists a ς i(k+k′)τ | ς ikτ ⊂ ς i(k+k′)τ ∧ς ikτ is equibound. We also need to reformulate\na corresponding α i(k+k′)τ . One could also use direct induction like in equibound case. Detailed proof is left to the reader and is explained further with an example in section\n8.3. 5 Category Theory\nDefinition 5.1. Covariant Functor: If A and B are two categories then a functor between\nthem is a map that carries every arrow of the category A to an arrow in B between the\nsame two objects such that identity and composition are preserved. Example 5.1.1. Category of open sets in a topology and boolean algebras representing\nthe inclusion the base sets. Definition 5.2.",
      "size": 900,
      "sentences": 11
    },
    {
      "id": 17,
      "content": "he\nsame two objects such that identity and composition are preserved. Example 5.1.1. Category of open sets in a topology and boolean algebras representing\nthe inclusion the base sets. Definition 5.2. Contravariant Functor: If A and B are two categories then a functor\nbetween them i a map that carries every arrow of the category A to an arrow in B between\nthe same two objects such that identity and composition are preserved and the direction\nof the arrows are reversed. Example 5.2.1. Presheafs in geometry\nExample 5.2.2. category of convex sets and category of sets of linear in-equations can\nhave a contravariant functor that represents the set of all linear equations that contain\nthe given hull. Inclusions are reversed\n6\n=== 페이지 7 ===\nDefinition 5.3.",
      "size": 758,
      "sentences": 8
    },
    {
      "id": 18,
      "content": "ry of sets of linear in-equations can\nhave a contravariant functor that represents the set of all linear equations that contain\nthe given hull. Inclusions are reversed\n6\n=== 페이지 7 ===\nDefinition 5.3. Natural transformation: Natural transformation is a morphism that car-\nries every arrow on the functors naturally such that the below diagram commutes [7]:\nF(f)\nF(X) F(Y)\nη η\nx y\nG(f)\nG(X) G(Y)\n6 Elimination Strategies\nFourier-Motzkin Elimination (FME) is one of the most common ways to assign feasibility\ncertificates through variable elimination. However, it has limited practicality due to its\ndouble-exponential worst time complexity. Even the parallel deployment of FME can\nonly linearly speed-up the process, for both dense and sparse problems [6]. One could\nalso eliminate variables by realizing that for binary constraints we would never have more\nthan 2n constraints unlike in the case of Fourier-Motzkin where coefficients can be other\nthan 0 or 1.",
      "size": 958,
      "sentences": 6
    },
    {
      "id": 19,
      "content": "could\nalso eliminate variables by realizing that for binary constraints we would never have more\nthan 2n constraints unlike in the case of Fourier-Motzkin where coefficients can be other\nthan 0 or 1. So most constraints are going to be duplicates or just inclusions and the\nweaker constraints can be eliminated straight away. In fact one can rigorously prove that\nthe constraint space would form a measure with values as integers. But for now we will\nomit that and just propose the algorithm for generating the constraints in the section\nbelow which is all that is needed for the purpose of this article. We call this Elimination\nstrategy Fourier-Binary-Constraint-Elimination (FBCE). 7 Solution Approaches\nTheorem 3. Variable elimination is a natural transformation of projection between con-\nvex spaces. Proof. Its clear to see that every set of linear equations can be mapped to a convex\nspace by a contravariant functor.",
      "size": 924,
      "sentences": 9
    },
    {
      "id": 20,
      "content": "e elimination is a natural transformation of projection between con-\nvex spaces. Proof. Its clear to see that every set of linear equations can be mapped to a convex\nspace by a contravariant functor. Every elimination morphism is an inclusion map in the\ncategory of convex sets hence it must have a contravariant inclusion. Simply put if a\nconvex set contains another, then its corresponding linear algebraic set must also have a\nmorphism. The following diagram commutes where h is the inclusion map on the set of\nlinear equations (a kin to presheaf in algebraic geometry):\nlin(h)\nlin(X) lin(Y)\nη η\nx y\nplin(h)\nplin(X) plin(Y)\nCorollary 4 (Projection). For every ς there exists a projection in O(2i) constraints and\nik\nk variables. Proof. EliminationstrategyFBCE(6) isaprojectionontheconvex space, hence theproof\nfollows from above theorem. Corollary 5 (Intersection). For every ς there exists a corresponding constraint satis-\nikτ\nfaction problem in O(2i) constraints and k variables.",
      "size": 985,
      "sentences": 11
    },
    {
      "id": 21,
      "content": "nvex space, hence theproof\nfollows from above theorem. Corollary 5 (Intersection). For every ς there exists a corresponding constraint satis-\nikτ\nfaction problem in O(2i) constraints and k variables. 7\n=== 페이지 8 ===\nProof. Proofistrivial. Oncewe have established thenatural transformation, all inclusions\nin case of linear equation, are trivial. This is similar to gluing axiom on sheaves. 8 Case Study: Car Rental\nSimilar variant of transportation problem is used to solve the feasibility of different types\nof requests that a car rental service provider can simultaneously satisfy. In general, the service provider owns a fleet of cars belonging to different models\n(brand/build). Since, at least few cars are always under maintenance/service, number\nof cars available for renting varies over days for every model. We represent m as the\ndb\nnumber of cars of model b available on dth day. Further B represents list of all models\nwhich the service provider owns, so, b ∈ B.",
      "size": 973,
      "sentences": 12
    },
    {
      "id": 22,
      "content": "renting varies over days for every model. We represent m as the\ndb\nnumber of cars of model b available on dth day. Further B represents list of all models\nwhich the service provider owns, so, b ∈ B. A typical request is represented as r (d ,τ ,j ,n ) where, r is the request of ith cus-\ni i i i i i\ntomer; d and τ are the staring day of the request and the number of days for which cars\ni i\nare to be rented such that 1 ≤ d +τ −1 ≤ T; j is models of cars requested such that\ni i i\nj ⊂ B; and, n is the total number of cars requested. Also, let’s say R is the set of all\ni i\nthe requests r (d ,τ ,j ,n ) and T is the total Time Period under consideration. Finally,\ni i i i i\nlet’s say R is the set of all the request which spans across dth day. d\nCase 8.1. No car is under maintenance and cars can be rented for only one day\nWe begin with a simplified scenario where no car is under maintenance at any point in\ntime. Hence, m can be simply written as m .",
      "size": 953,
      "sentences": 9
    },
    {
      "id": 23,
      "content": ". No car is under maintenance and cars can be rented for only one day\nWe begin with a simplified scenario where no car is under maintenance at any point in\ntime. Hence, m can be simply written as m . Further in this case, we assume that cars\ndb b\nare rented for just one day, making τ = 1 for all requests. We would lift these restrictions\ni\nin subsequent sections. Since this scenario doesn’t have requests spanning over multiple days, it doesn’t require\nequal flow analysis and can be solved independently for every day. Let’s say x is the\nibd\nnumber of cars allocated to ith request from brand b on dth day. So, all the requests can\nbe accepted iff,\n∃ X\ns.t. P x ≥ n ∀i ∈ R\nb∈B ibd i d\nx = 0 ∀(i,b,d) ∈ F\nibd\n(10)\nP x ≤ m ∀b ∈ B\ni∈R ibd b\nx ≥ 0\nibd\nx ∈ Z\nibd\nHere second equation represents the forbidden arcs F introduced in section 2 and are\ndefined here as:\nF = {(i,b,d) | i ∈ R ;b 6∈ j }\nd i\nCase 8.2.",
      "size": 908,
      "sentences": 9
    },
    {
      "id": 24,
      "content": "bd\n(10)\nP x ≤ m ∀b ∈ B\ni∈R ibd b\nx ≥ 0\nibd\nx ∈ Z\nibd\nHere second equation represents the forbidden arcs F introduced in section 2 and are\ndefined here as:\nF = {(i,b,d) | i ∈ R ;b 6∈ j }\nd i\nCase 8.2. No car is under maintenance and cars can be rented for multiple consecutive\ndays\nLet’s say x is the number of cars allocated to ith request from brand b on dth day,\nibd\nsuch that, d ≤ d ≤ d +τ −1. In this scenario, we need to establish equal flow constraints\ni i i\nas same set of cars need to be allocated across all requested days for a particular request. 8\n=== 페이지 9 ===\nWe can use Class(x ), introduced in section 1, to represent all the arcs (i,b,d) that are\nib\nequal to x across all d, such that, d ≤ d ≤ d + τ - 1. Hence, all requests can be\nib i i i\naccepted iff,\n∃ X\ns.t.",
      "size": 780,
      "sentences": 5
    },
    {
      "id": 25,
      "content": "use Class(x ), introduced in section 1, to represent all the arcs (i,b,d) that are\nib\nequal to x across all d, such that, d ≤ d ≤ d + τ - 1. Hence, all requests can be\nib i i i\naccepted iff,\n∃ X\ns.t. P x ≥ n ∀i ∈ R;d : d ≤ d ≤ d +τ −1\nb∈B ibd i i i i\nx = 0 ∀(i,b,d) ∈ F\nibd\nP x ≤ m ∀b ∈ B;d : 1 ≤ d ≤ T (11)\ni∈R ibd b\nd\nx = x ∀(i,b,d) ∈ Class(x )\nibd ib ib\nx ≥ 0\nibd\nx ∈ Z\nibd\nHere forbidden arcs F are defined as:\nF = {(i,b,d) | i ∈ R; either b 6∈ j or d 6∈ [d ,d +τ −1]}\ni i i i\nCase 8.3. Some cars are under maintenance and cars can be rented for multiple consec-\nutive days\nIn the most generalized scenario, we take the case where m is not constant over days\nb\nand hence needs to be represented as m to reflect the supply of brand b on dth day. bd\nSince same set of cars are supposed to be allocated to a particular request across all the\nrequested days, replacing m with m in equation 11 doesn’t solve the problem directly.",
      "size": 928,
      "sentences": 5
    },
    {
      "id": 26,
      "content": "brand b on dth day. bd\nSince same set of cars are supposed to be allocated to a particular request across all the\nrequested days, replacing m with m in equation 11 doesn’t solve the problem directly. b bd\nLet’s say cars with serial number S1 and S2 are available on day 1 and cars with serial\nnumber S2 and S3 are available on day 2. Although, in this case, m = 2 for d = 1,2,\nbd\nthere is only 1 car with serial number S2 that can be given to a request asking for cars\non both days. This unequibound problem is solved by using variable splitting method described in\nsection4.1. Therecanbeasetofcarsforeverybrand/buildwhichareavailablethroughout\nT, so their numbers can be represented as m . Number of cars of a particular model b\nbT\nwhich are available on day d but are not available throughout T can be written as m ′. bd\nHence we have:\nm bT +m bd ′ = m bd\nInventories whichareavailableforaset ofconsecutive days dsuchthat d ≤ d ≤ d +τ −1,\ni i i\nbut are not available throughout T, are given by m .",
      "size": 999,
      "sentences": 8
    },
    {
      "id": 27,
      "content": "be written as m ′. bd\nHence we have:\nm bT +m bd ′ = m bd\nInventories whichareavailableforaset ofconsecutive days dsuchthat d ≤ d ≤ d +τ −1,\ni i i\nbut are not available throughout T, are given by m . It should be noted that m ≤\nbd τ bd τ\ni i i i\nm bd ′ where d i ≤ d ≤ d i +τ i −1. Finally, we also split the variable x into x+ and x − , where x+ is supplied from\nibd ibd ibd ibd\n−\ncommon pool of m , whereas x is supplied from m . Here all requests are accepted\nbT ibd bd i τ i\niff,\n9\n=== 페이지 10 ===\n∃ X\ns.t.",
      "size": 508,
      "sentences": 5
    },
    {
      "id": 28,
      "content": "ariable x into x+ and x − , where x+ is supplied from\nibd ibd ibd ibd\n−\ncommon pool of m , whereas x is supplied from m . Here all requests are accepted\nbT ibd bd i τ i\niff,\n9\n=== 페이지 10 ===\n∃ X\ns.t. P x+ +x − ≥ n ∀i ∈ R;d : d ≤ d ≤ d +τ −1\nb∈B ibd ibd i i i i\nx+ ,x − = 0 ∀(i,b,d) ∈ F\nibd ibd\nP x+ ≤ m ∀b ∈ B;d : 1 ≤ d ≤ T\ni∈R ibd bT\nd −\nP i∈R d x i − bd ≤ m bd ′ ∀b ∈ B;d : 1 ≤ d ≤ T (12)\nx ≤ m ∀i ∈ R;b ∈ B;d : d ≤ d ≤ d +τ −1\nibd bd i τ i i i i\nx+ = x+ ∀(i,b,d) ∈ Class(x+)\nibd ib ib\n− − −\nx = x ∀(i,b,d) ∈ Class(x )\nibd ib ib\nx+ ,x − ≥ 0\nibd ibd\nx+ ,x − ∈ Z\nibd ibd\nAgain forbidden arcs F are defined as earlier:\nF = {(i,b,d) | i ∈ R; either b 6∈ j or d 6∈ [d ,d +τ −1]}\ni i i i\nReferences\n[1] Ilan Adler, Alan J. Hoffman, and Ron Shamir. Monge and feasibility sequences in\ngeneral flow problems. Discrete Applied Mathematics, 44(1):21 – 38, 1993. [2] Marcin Anholcer. The nonlinear generalized transportation problem with convex\ncosts. In Discrete Applied Mathematics, 2015. [3] R.E.",
      "size": 989,
      "sentences": 9
    },
    {
      "id": 29,
      "content": "w problems. Discrete Applied Mathematics, 44(1):21 – 38, 1993. [2] Marcin Anholcer. The nonlinear generalized transportation problem with convex\ncosts. In Discrete Applied Mathematics, 2015. [3] R.E. Burkard, S. Karisch, and F. Rendl. Qaplib-a quadratic assignment problem\nlibrary. European Journal of Operational Research, 55(1):115 – 119, 1991. [4] David Gale. A theorem on flows in networks. Pacific J. Math., 7(2):1073–1082, 1957. [5] Serigne Gueye and Philippe Michelon. A linearization framework for unconstrained\nquadratic (0-1) problems. Discrete Applied Mathematics, 157(6):1255 – 1266, 2009. Reformulation Techniques and Mathematical Programming. [6] Christoph W. Keler. Parallel fourier-motzkin elimination. Boug L., Fraigniaud P.,\nMignotte A., Robert Y. (eds) Euro-Par’96 Parallel Processing. Euro-Par 1996. Lec-\nture Notes in Computer Science, vol 1124. Springer, Berlin, Heidelberg, 1124:66–71,\n1996. [7] Saunders MacLane. Categories for the Working Mathematician.",
      "size": 978,
      "sentences": 26
    },
    {
      "id": 30,
      "content": "r’96 Parallel Processing. Euro-Par 1996. Lec-\nture Notes in Computer Science, vol 1124. Springer, Berlin, Heidelberg, 1124:66–71,\n1996. [7] Saunders MacLane. Categories for the Working Mathematician. Springer-Verlag,\nNew York, 1971. Graduate Texts in Mathematics, Vol. 5. [8] Carol A. Meyers andAndreas S. Schulz. Integer equal flows. Oper. Res. Lett., 37:245–\n249, 2009. [9] David R. Morrison, Jason J. Sauppe, and Sheldon H. Jacobson. A network simplex\nalgorithm for the equal flow problem on a generalized network. INFORMS Journal\non Computing, 25:2–12, 2013. [10] C Wei, S Knust, N.V. Shakhlevich, and Stefan Waldherr. The assignment prob-\nlem with nearly monge arrays and incompatible partner indices. Discrete Applied\nMathematics, 211, 01 2015. 10\n=== 페이지 11 ===\n[11] M. M. Zavlanos, L. Spesivtsev, and G. J. Pappas. A distributed auction algorithm\nfor the assignment problem. In 2008 47th IEEE Conference on Decision and Control,\npages 1212–1217, Dec 2008. 11",
      "size": 966,
      "sentences": 24
    }
  ]
}