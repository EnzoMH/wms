{
  "source": "ArXiv",
  "filename": "011_Scalable_and_low-cost_remote_lab_platforms__Teachi.pdf",
  "total_chars": 35339,
  "total_chunks": 49,
  "chunks": [
    {
      "id": 1,
      "content": "=== 페이지 1 ===\nScalable and low-cost remote lab platforms:\nTeaching industrial robotics using open-source\ntools and understanding its social implications⋆\nAmit Kumar[0000−0001−6698−0855]1, Jaison Jose[0000−0002−4132−1359]2, Archit\nJain[0009−0007−4290−9537]2, Siddharth Kulkarni[0009−0000−4353−3884]2, and Kavi\nArya[0000−0002−7601−317X]3\n1Centre for Systems and Control, Indian Institute of Technology Bombay,\nMumbai, India, amit.k.kumar@iitb.ac.in\n2Embedded Real-Time Systems / e-Yantra Lab, Indian Institute of Technology\nBombay, Mumbai, India,\n{jaisonjose241,arrchit.jain,siddharth.ydk}@gmail.com\n3Computer Science and Engineering Department, Indian Institute of\nTechnology Bombay, Mumbai, India, kavi@cse.iitb.ac.in\nAbstract. With recent advancements in industrial robots, educating\nstudents in new technologies and preparing them for the future is im-\nperative.",
      "size": 864,
      "sentences": 2
    },
    {
      "id": 2,
      "content": "echnology Bombay, Mumbai, India, kavi@cse.iitb.ac.in\nAbstract. With recent advancements in industrial robots, educating\nstudents in new technologies and preparing them for the future is im-\nperative. However, access to industrial robots for teaching poses chal-\nlenges, such as the high cost of acquiring these robots, the safety of the\noperator and the robot, and complicated training material. This paper\nproposestwolow-costplatformsbuiltusingopen-sourcetoolslikeRobot\nOperating System (ROS) and its latest version ROS 2 to help students\nlearn and test algorithms on remotely connected industrial robots. Uni-\nversal Robotics (UR5) arm and a custom mobile rover were deployed\nin different life-size testbeds, a greenhouse, and a warehouse to create\nan Autonomous Agricultural Harvester System (AAHS) and an Au-\ntonomous Warehouse Management System (AWMS).",
      "size": 857,
      "sentences": 5
    },
    {
      "id": 3,
      "content": "rover were deployed\nin different life-size testbeds, a greenhouse, and a warehouse to create\nan Autonomous Agricultural Harvester System (AAHS) and an Au-\ntonomous Warehouse Management System (AWMS). These platforms\nweredeployedforaperiodof7monthsandweretestedfortheirefficacy\nwith1,433and1,312students,respectively.ThehardwareusedinAAHS\nandAWMSwascontrolledremotelyfor160and355hours,respectively,\nby students over a period of 3 months. Keywords: Educational robots; Robot Operating System (ROS); ROS\n2; Industrial robots; Agricultural robots\n1 Introduction and Related Work\nOne of the key aspects of Industry 5.0 is to adopt a human-centric approach\nto digital technologies [3]. With the world transitioning to this fifth industrial\nrevolution, training students in current and upcoming technologies is necessary. However, access to the latest technologies, like those used in industrial robotics,\nis expensive. As a result, only a handful of students tend to learn them.",
      "size": 972,
      "sentences": 6
    },
    {
      "id": 4,
      "content": "t and upcoming technologies is necessary. However, access to the latest technologies, like those used in industrial robotics,\nis expensive. As a result, only a handful of students tend to learn them. ⋆ AcceptedatSpringer’s16thInternationalConferenceonSocialRobotics+AI2024\n4202\nceD\n91\n]OR.sc[\n1v96351.2142:viXra\n=== 페이지 2 ===\n2 A. Kumar et al. Fig.1: Set up of remote testbeds in a greenhouse (top) and a warehouse (bot-\ntom) for Autonomous Agricultural Harvester System (AAHS) and Autonomous\nWarehouseManagementSystem(AWMS)usingaUR5roboticarmandamobile\nrover.Studentsusedourplatformstotesttheiralgorithmsinthesimulated-world\n(left) and real-world (right). Mostmanufacturersofindustrialrobotsprovideamodeloftheirrobotsthat\ncan be imported into various simulators [22,32]. However, in general cases, a\nsim-to-real [12] gap is prevalent. Hence, it is a well-adapted practice to develop\nrudimentary algorithms in simulation and then make them more robust by test-\ning them in hardware.",
      "size": 982,
      "sentences": 8
    },
    {
      "id": 5,
      "content": "general cases, a\nsim-to-real [12] gap is prevalent. Hence, it is a well-adapted practice to develop\nrudimentary algorithms in simulation and then make them more robust by test-\ning them in hardware. ROS [24] and ROS 2 [19] provide a robust modular platform for easy and\nfast deployment of robotic applications. They are open-source; hence, many ex-\nisting libraries, in the form of ROS packages, can be configured for a particular\napplication instead of being rewritten. Many industries and organizations like\nNASA [23] have also harnessed the power of ROS in their projects. It is then\nonly logical to train students in industrial robotics using ROS. Setting up designated laboratories to provide remote access to industrial\nrobots is not unheard of [2,7,10,17]. These remote labs bridge the gap between\nbuying multiple expensive robots and giving access to many students. Several\nworks have proposed and tested different architectures for teaching students\nthrough remote robotic labs.",
      "size": 987,
      "sentences": 9
    },
    {
      "id": 6,
      "content": "the gap between\nbuying multiple expensive robots and giving access to many students. Several\nworks have proposed and tested different architectures for teaching students\nthrough remote robotic labs. Researchers in [16] have created a web app and integrated virtual network\ncomputing (VNC)-based graphical desktop-sharing and docker containers. The\nweb app allows the users to access the small Robotont mobile robot and the\nUFACTORY xArm7 manipulator robot individually. They have deployed their\nrobots in a simple and small arena, which may not reproduce all the compli-\ncations generally accompanied while deploying industrial robots in real-world\nsettings like noise in sensors due to direct light, heat, etc. A low-cost and lightweight robotic manipulator using Raspberry Pi 3 com-\nputer is deployed in [33] to teach primary-school and university-level students.",
      "size": 865,
      "sentences": 6
    },
    {
      "id": 7,
      "content": "se in sensors due to direct light, heat, etc. A low-cost and lightweight robotic manipulator using Raspberry Pi 3 com-\nputer is deployed in [33] to teach primary-school and university-level students. Although the cost of the robotic arm is low, these arms do not offer industrial\n=== 페이지 3 ===\nScalable and low-cost remote lab platforms 3\nstandardfunctionalitieslikeforce-torquesensing.Thepayloadandreachofthese\narmsarealsounsuitabletobedeployedinareal-worldsetting.ROSwasnotin-\ntegratedintotheirarchitecturesincetheyaimedtointroducebasicmanipulation\nconcepts to young students. Researchers in [2] transfer the script to the NAO humanoid robot initially\nand then run the script locally. However, the user cannot obtain live feedback\nduringtheexecutionofthecode.KUKARobotLearningLab[31]usesaqueue-\nbasedparallelprocessingarchitectureforrunningcodeontostaticroboticarms.",
      "size": 868,
      "sentences": 5
    },
    {
      "id": 8,
      "content": "e script locally. However, the user cannot obtain live feedback\nduringtheexecutionofthecode.KUKARobotLearningLab[31]usesaqueue-\nbasedparallelprocessingarchitectureforrunningcodeontostaticroboticarms. Whenever a user submits a code using their web interface, it is first tested in a\nsimulator, Gazebo, and then sent to the actual robot. Although this improves\nthe safety of the hardware, it comes with a computational overhead. Moreover,\nin a real-world setting, as shown in AAHS and AWMS, where a depth camera,\nrobotic arm, and a mobile robot work in parallel, this can significantly slow the\nexecution.Integratingthesafetyoftherobotsinthehardwareitselfmaybebet-\ntersuitedforscalableapplications.Additionally,noneoftheremoteroboticlabs\nmentioned above have tested their architecture on a large scale. These methods\nmay not function as intended or even be expensive when thousands of students\nuse them.",
      "size": 901,
      "sentences": 6
    },
    {
      "id": 9,
      "content": "onally,noneoftheremoteroboticlabs\nmentioned above have tested their architecture on a large scale. These methods\nmay not function as intended or even be expensive when thousands of students\nuse them. In totality, developing efficient platforms, encompassing simulations, for re-\nmote labs using open-source tools like ROS is an important and scalable step to\nprepare our students for Industry 5.0. One of the learning-based methodologies,\nproject-based learning (PBL), has shown to be an effective method for learners\nto master new concepts, including ROS [8,11,15,20,21,27]. Our research focuses\nondevelopingtheseremotelabplatformsandtestingtheirefficacybydeploying\nthem in our PBL-based competition called the e-Yantra Robotics Competition\n(eYRC). Our platforms were used by students to develop algorithms for an Au-\ntonomous Agricultural Harvester System (AAHS) and Autonomous Warehouse\nManagement System (AWMS), as shown in Figure 1.",
      "size": 937,
      "sentences": 6
    },
    {
      "id": 10,
      "content": "ion\n(eYRC). Our platforms were used by students to develop algorithms for an Au-\ntonomous Agricultural Harvester System (AAHS) and Autonomous Warehouse\nManagement System (AWMS), as shown in Figure 1. These platforms helped\nstudents learn about image processing, navigation algorithms for mobile rovers,\nmotion planning algorithms for manipulators, Proportional Integral Derivative\n(PID)controllers,andROS.Themajorcontributionsofthisworkareasfollows:\n1. Design of two low-cost, scalable, and customizable platforms using open-\nsource tools for teaching industrial robotics remotely. 2. Study our platforms’ effectiveness by deploying them in a PBL-based com-\npetition spread over six months with more than 1000 students. 2 Methodology\n2.1 Setup of Platforms\nScalability is one of the main factors considered while designing our platforms. While adding multiple work cells can easily increase the number of students\nthat access a remote laboratory, it comes at an additional cost.",
      "size": 978,
      "sentences": 8
    },
    {
      "id": 11,
      "content": "the main factors considered while designing our platforms. While adding multiple work cells can easily increase the number of students\nthat access a remote laboratory, it comes at an additional cost. Even though\nthesimulationcreated,asshowninFigure1,foreachplatformcloselymimicked\nthe real-world, we can not eliminate the sim-to-real gap. Hence, in both of our\n=== 페이지 4 ===\n4 A. Kumar et al. Fig.2:OperationalWorkflowArchitectureofStacks1and2forremotelabplat-\nform:Thearchitectureisdividedintotwomajorsections:TheStudentandHost\nSide.Stack1usesonlyapeer-to-peerVPN,whereasStack2usesacombination\nof peer-to-peer VPN and remote desktop application. platforms, students first tested their algorithm using a simulator, Gazebo [14],\nand then only selected students (50-100), based on their performance, tested\nthem using remote hardware. The students connected to the hardware in one-\nhour slots for three months.",
      "size": 908,
      "sentences": 7
    },
    {
      "id": 12,
      "content": "ator, Gazebo [14],\nand then only selected students (50-100), based on their performance, tested\nthem using remote hardware. The students connected to the hardware in one-\nhour slots for three months. These students participated by forming a team of\n2-4 members in our 7-month eYRC competition. The multi-robot system (MRS) used in both of our platforms is shown in\nFigure 1. The four-wheeled mobile rover works on a skid steer drive control\nmechanism. It is powered by Intel NUC12WSHI7 8GB and comprises various\nsensorssuchasencoders,2DLIDAR,andanInertialMeasurementUnit(IMU). The UR5 robotic arm [26] has a payload capacity of 5 kg and a reach of 850\nmm. Custom interchangeable grippers, like a parallel arm or magnetic, can be\ninterfaced easily with the arm. 2.2 Stack 1: Using peer-to-peer VPN only\nWe propose a peer-to-peer VPN-based architecture for remote operation using\nthe ROS framework, as depicted in Figure 2.",
      "size": 921,
      "sentences": 9
    },
    {
      "id": 13,
      "content": "can be\ninterfaced easily with the arm. 2.2 Stack 1: Using peer-to-peer VPN only\nWe propose a peer-to-peer VPN-based architecture for remote operation using\nthe ROS framework, as depicted in Figure 2. The mobile rover and the UR5\narm traverse inside a greenhouse at IIT Bombay with artificial plants, as shown\nin Figure 1(top-right). The students have to pluck artificial fruits (attached to\nplantswithamagnet)usingagripperconnectedtothearmanddepositthemin\na box in front of the robot. A student-side computer uses ROS communication\nprotocols in this stack to control the MRS, including navigation, manipulation,\nand perception. A peer-to-peer VPN like Husarnet [9] connection allows stu-\n=== 페이지 5 ===\nScalable and low-cost remote lab platforms 5\ndents to run their code directly on the remote hardware using their workspace.",
      "size": 825,
      "sentences": 6
    },
    {
      "id": 14,
      "content": ". A peer-to-peer VPN like Husarnet [9] connection allows stu-\n=== 페이지 5 ===\nScalable and low-cost remote lab platforms 5\ndents to run their code directly on the remote hardware using their workspace. Consequently, only data is exchanged between the MRS and the student’s com-\nputer, creating a virtual ecosystem for students to work on the MRS. For visual\nfeedback, they are provided with a webpage showing all the live camera feeds\nusing the RTSP [28] protocol. The sub-system of the architecture, as shown in Figure 2, is divided into\ntwo sections: student and host side. Detailed explanations of the same are given\nbelow:\n1. Student-Side:\n(a) Slot selection: The students are made aware of the upcoming remote\nhardware access slots using a common discussion forum. They can book\ntheir slots by filling out a form. Once the slot is booked, the same is\nreflected on a shared spreadsheet showing the time, team-id, status of\nthe slot, and a joining link to an online video call platform.",
      "size": 987,
      "sentences": 8
    },
    {
      "id": 15,
      "content": "slots by filling out a form. Once the slot is booked, the same is\nreflected on a shared spreadsheet showing the time, team-id, status of\nthe slot, and a joining link to an online video call platform. (b) VPN Host:Abashscript[4]isusedtoconnectthestudent’scomputer\nto the host computer network. This is done by using an open-source\npeer-to-peer VPN. A joining code to join the VPN is given by the host. The student can publish or subscribe to all the data with MRS using\ntheROScommunicationprotocolsoncetheygetconnected.Theaverage\nlatencyfordatacommunicationinthisstackhasbeenobservedtobe300\nmilliseconds. The student is provided with the IPV6 (Internet Protocol\nVersion 6) link and a port number for the web page hosting the live\ncamerafeedusingRTSP[28]protocol.Alagofapproximately2seconds\nhas been observed at the student’s end in viewing the camera feed. This\ndoes not affect the control of the MRS as communication with MRS is\nseparate. 2.",
      "size": 941,
      "sentences": 9
    },
    {
      "id": 16,
      "content": "ngRTSP[28]protocol.Alagofapproximately2seconds\nhas been observed at the student’s end in viewing the camera feed. This\ndoes not affect the control of the MRS as communication with MRS is\nseparate. 2. Host-Side:\n(a) Communication and Remote Access: The host and student are in\nthe same network using the peer-to-peer VPN. This allows for continu-\nous monitoring of the data that is transferred to the MRS. The names\nand types of the topics in ROS are kept the same as in the simulation. Thus,withnegligiblechanges,studentscanruntheiralgorithminremote\nhardware that was developed for simulation. (b) Host System: This physical system consists of a computer with an\nopen-source Ubuntu [29] OS connected to the MRS in a local wireless\nnetwork. This system has all the drivers installed to relay data between\nthe student and the MRS. The data is mapped to different ROS topic\nnames in the host computer using a Python [30] script.",
      "size": 925,
      "sentences": 10
    },
    {
      "id": 17,
      "content": "less\nnetwork. This system has all the drivers installed to relay data between\nthe student and the MRS. The data is mapped to different ROS topic\nnames in the host computer using a Python [30] script. This allows the\nhosttohavecontrolofMRSincaseofemergencyorneed.Thissystemis\nalso the server for hosting 5 PoE (Power over Ethernet) enabled CCTV\n(Closed Circuit Television) cameras on a webpage using RTSP protocol. (c) Multi-Robot System: The MRS has the UR5 mounted on the top of\nthe mobile rover. Using USB (Universal Serial Bus) and ethernet cable,\nthe depth camera and UR5 are connected respectively to the mobile\nrover’scomputer.SincethehostcomputerandtheMRSareinthesame\n=== 페이지 6 ===\n6 A. Kumar et al.",
      "size": 706,
      "sentences": 6
    },
    {
      "id": 18,
      "content": "(Universal Serial Bus) and ethernet cable,\nthe depth camera and UR5 are connected respectively to the mobile\nrover’scomputer.SincethehostcomputerandtheMRSareinthesame\n=== 페이지 6 ===\n6 A. Kumar et al. local network, the host operator can use SSH (Secure Shell) to access\nfiles or run any program on the MRS.\nSafety Measures: The safety and security of stack 1 also come into play since\nthearchitectureinvolvesremoteaccessofMRS.Anymishapsduetothecollision\nof MRS with walls or objects can happen due to incorrect values of navigation\nor manipulation commands sent by students. The latency in communication\ncan also play a significant role here.",
      "size": 641,
      "sentences": 3
    },
    {
      "id": 19,
      "content": "ecollision\nof MRS with walls or objects can happen due to incorrect values of navigation\nor manipulation commands sent by students. The latency in communication\ncan also play a significant role here. To avoid any mishap, the host operator is\nnotified about a possible collision by a) using a local Python script running in\nthe MRS that checks for collision by measuring distance using LIDAR (Light\nDetection And Ranging) sensor values, b) continuously checking the frequency\nof incoming data from MRS on the host system, c) adding a safety stop script\nfor UR5 in the MRS to stop when a collision is detected while manipulation,\nd) adding speed, joint and movement-space limits to the UR5 arm. The host\nsystem stops the relay of data between MRS and the student if it detects any\nofthepoints mentionedabove crossingaspecificthreshold. Theoperatorisalso\nnotified using different sounds from the host system for added safety.",
      "size": 922,
      "sentences": 5
    },
    {
      "id": 20,
      "content": "y of data between MRS and the student if it detects any\nofthepoints mentionedabove crossingaspecificthreshold. Theoperatorisalso\nnotified using different sounds from the host system for added safety. 2.3 Stack 2: Using remote desktop and VPN\nIn this stack, we propose a remote desktop-based architecture using the ROS\n2[19]frameworktofacilitatemonitoringandremotecontrolofAWMSasshown\nin Figure 1. Students use this system to autonomously navigate a mobile robot\nto collect racks in the warehouse and deliver them to the robotic arm using the\nROS2navigationstack [18].Theythensortpackagesontherackusingcamera-\nbased perception.",
      "size": 626,
      "sentences": 4
    },
    {
      "id": 21,
      "content": "tonomously navigate a mobile robot\nto collect racks in the warehouse and deliver them to the robotic arm using the\nROS2navigationstack [18].Theythensortpackagesontherackusingcamera-\nbased perception. Hence, students can work on the mobile rover for mapping\nand navigation and on the robotic arm for perception and manipulation, indi-\nviduallyandintandem,toperformwarehouseautomationtasks.InstallingROS\n2 [25] along with the necessary packages is time-consuming and may dispirit\nnewlearners.Additionally,executingtheROS2scriptswithinthelocalnetwork\nensures low latency and high repeatability. Hence, our approach is to give stu-\ndents direct control of the host system’s desktop. A student only needs a laptop\nwith any operating system installed. Figure 2 demonstrates this stack’s archi-\ntecture. The architecture is divided into two sub-systems: the Student-Side and\nthe Host-Side. 1. Student-Side:\n(a) Slot selection: The process for slot selection is similar to Stack 1, as\nmentioned above.",
      "size": 993,
      "sentences": 8
    },
    {
      "id": 22,
      "content": "e. The architecture is divided into two sub-systems: the Student-Side and\nthe Host-Side. 1. Student-Side:\n(a) Slot selection: The process for slot selection is similar to Stack 1, as\nmentioned above. To enhance user interface and provide seamless expe-\nrience,awebportalwasdesignedforbookingslotsusinganopen-source\ntech stack, namely the Vue Inertia Laravel Tailwind (VILT). The host\noperator can monitor all slots that have been created and have access\nto activate (add the slot for students) or deactivate (disable the slot for\nstudents) any slot as per lab requirements. Slots that the host operator\nhas confirmed are communicated to the student teams. A spreadsheet is\n=== 페이지 7 ===\nScalable and low-cost remote lab platforms 7\ngenerated from the portal and is shared with all students. The student\nconnects to the host-side operator through video conferencing for setup\nand coordination.",
      "size": 892,
      "sentences": 8
    },
    {
      "id": 23,
      "content": "le and low-cost remote lab platforms 7\ngenerated from the portal and is shared with all students. The student\nconnects to the host-side operator through video conferencing for setup\nand coordination. (b) VPN Host: Same as stack 1, but instead of using bash script, we di-\nrectly used the video call communication for the camera feed IPV6 link,\nsimplifying the setup. 2. Host-Side:\n(a) Communication and Remote Access: The stack uses a free and\nplatform-independent Virtual Network Computing (VNC) application,\nlike Anydesk [1], for remote desktop sharing. It provides students access\nto the host system for remote operations. (b) HostSystem:Itconsistsofacomputerwithanopen-sourceUbuntu[29]\noperatingsysteminstalled.Ithasallthesoftware/hardwaredrivers,ROS\n2 [19] packages, and RViz [13] installed. This host system serves the fol-\nlowing purposes - host desktop for VNC application and host device\nfor camera setup.",
      "size": 914,
      "sentences": 8
    },
    {
      "id": 24,
      "content": "Ithasallthesoftware/hardwaredrivers,ROS\n2 [19] packages, and RViz [13] installed. This host system serves the fol-\nlowing purposes - host desktop for VNC application and host device\nfor camera setup. The UR5 robotic arm and the mobile rover are also\ncontrolled using Python scripts on this host system. (c) Multi-RobotSystem:Thissystemconsistsoftwoseparaterobots;the\nmobileroverisconnectedviaWi-Fitoexecutethenavigationcommands,\nwhiletheUR5roboticarmandadepthcameraareconnectedtothehost\nsystemusinganEthernet&USBcableformanipulationandperception. SincebothrobotsoperateinthesameVPN,thestudentscanaccessthe\nrobots’ data on the host system and on their laptops. SafetyMeasures: Weincorporatedafewstrategiestoreduceprivacyandsecu-\nritythreatsrelatedtoremotehostaccess.Topreventunauthorizedaccessduring\nremotesessions,werestrictedstudentaccesstotheirdesignatedROSworkspace\nonly. For this, we used the Encoded File System (EncFS) [6] package to encrypt\npersonal directories for security.",
      "size": 982,
      "sentences": 7
    },
    {
      "id": 25,
      "content": "zedaccessduring\nremotesessions,werestrictedstudentaccesstotheirdesignatedROSworkspace\nonly. For this, we used the Encoded File System (EncFS) [6] package to encrypt\npersonal directories for security. We also adopt a non-privileged user account\nstrategy to protect the integrity of the host system. This dramatically improves\nsecurity by stopping students from unintentionally or intentionally erasing files,\naltering system settings, or installing unwanted software. Students don’t need\nsuperuseraccessasthenecessarysoftwarepackagesarepre-installed.Lastly,the\nVNC software allows file transferring and other remote access features. Hence,\nwe use VNC software like Anydesk to control and monitor sessions, which pro-\nvides admin privileges. The host can revoke desktop access, reset IP addresses,\ncontrol file transferring, and manage session access. Additionally, we use safety\nscripts to prevent robot collisions during student testing, as in Stack 1.",
      "size": 952,
      "sentences": 8
    },
    {
      "id": 26,
      "content": "revoke desktop access, reset IP addresses,\ncontrol file transferring, and manage session access. Additionally, we use safety\nscripts to prevent robot collisions during student testing, as in Stack 1. 3 Results\nWe developed problem statements for eYRC 2022-23 and 2023-24 based on the\nproposed platforms. These problem statements were divided into tasks, each\nspanning approximately three weeks, and completing each helped the students\ndevelop the entire solution. We provided learning resources and set up online\n=== 페이지 8 ===\n8 A. Kumar et al. (a) eYRC 2022-23 (b) eYRC 2023-24\nFig.3:Self-reportedexpertisebystudentsinbothyearsofeYRCbeforethestart\nof the competition. discussionforums.Thecompetitionwasdividedintotwostages:stage1forsim-\nulation and stage 2 for hardware implementation. The teams were continuously\nevaluatedbasedontheirrelativeperformanceinthesetasks.Thetop-performing\nteams were selected to proceed to the hardware implementation stage.",
      "size": 954,
      "sentences": 8
    },
    {
      "id": 27,
      "content": "2 for hardware implementation. The teams were continuously\nevaluatedbasedontheirrelativeperformanceinthesetasks.Thetop-performing\nteams were selected to proceed to the hardware implementation stage. eYRC 2022-23(AAHS): Stack1wasusedfortheeYRCcompetitionof2022-\n23.ThetaskforthestudentswastodevelopalgorithmsfortheAAHS,setupin\na greenhouse at IIT Bombay. The competition here was divided into six tasks. The first four tasks were simulation-based, whereas we provided remote access\nfor hardware implementation during tasks 5 and 6. A total of 373 teams, with\n1433 students, registered for the competition. Out of which 197 participating\nteams submitted the first task, i.e., task 0. We asked students to self-rate their\nknowledge of ROS at the start of the competition, as shown in Figure 3a. The first task, i.e., task 0, required students to set up the ROS workspace\nand development environment. The task was to draw a shape using Turtlesim.",
      "size": 942,
      "sentences": 10
    },
    {
      "id": 28,
      "content": "start of the competition, as shown in Figure 3a. The first task, i.e., task 0, required students to set up the ROS workspace\nand development environment. The task was to draw a shape using Turtlesim. They were followed by tasks 1, 2, and 3, where we taught students about the\nnavigation of mobile rover, perception, and manipulation of UR5 Arm in the\nGazebo simulation environment. For task 4, the students had to develop robust\nalgorithms to completely automate the AAHS in the shortest time possible in\nsimulation.Figure4ashowsthenumberofteamsthatwereabletocompletethe\ngiven tasks. The data signifies that this approach was successful in educating\n173 teams on the basics of ROS. The participating teams, primarily consisting\nof beginners in robotics, developed the algorithm for AAHS in simulation till\ntask 4. A known issue in MOOCs has been the high dropout rates [5]. We faced the\nsame problem, with 54 percent of teams dropping out after task 0.",
      "size": 952,
      "sentences": 9
    },
    {
      "id": 29,
      "content": "developed the algorithm for AAHS in simulation till\ntask 4. A known issue in MOOCs has been the high dropout rates [5]. We faced the\nsame problem, with 54 percent of teams dropping out after task 0. After this,\nwe experienced around 45 percent dropouts as the complexity increased with\neach task, as shown in Figure 4a. We had no dropouts after task 4. Based on\nthe teams’ performance in all four simulation tasks, 14 teams were shortlisted\nfor the hardware implementation. To ease the sim-to-real transition, we divided\n=== 페이지 9 ===\nScalable and low-cost remote lab platforms 9\n(a) eYRC 2022-23 (b) eYRC 2023-24\nFig.4: Performance of teams in each task during the two separate editions of\neYRC. A total of 197 teams participated in eYRC 2022-23, whereas 296 teams\nparticipated in eYRC 2023-24. Teams were awarded a bonus if they completed\nthe submission within the deadline. the hardware tasks into sub-tasks, as shown in Figure 5a.",
      "size": 934,
      "sentences": 10
    },
    {
      "id": 30,
      "content": "YRC 2022-23, whereas 296 teams\nparticipated in eYRC 2023-24. Teams were awarded a bonus if they completed\nthe submission within the deadline. the hardware tasks into sub-tasks, as shown in Figure 5a. Although we didn’t\nhave teams dropping out of the competition altogether after task 4, some of\nthe participating teams missed some remote access slots, which can be observed\nin Figure 5a. We progressively increased the complexity of these tasks, starting\nwith perception using a depth camera, followed by manipulation of the UR5,\nand finally, the navigation of the mobile rover. As complexity increased, more\nremote access slots were provided. Stack 1 was tested over 160 slots of 1 hour\neach by 70 students over three months to remotely access the robots. eYRC 2023-24(AWMS): Stack 2 was implemented during the eYRC 2023-\n24. The task for the students was to develop an algorithm for the AWMS that\nwas set up in a warehouse at IIT Bombay.",
      "size": 939,
      "sentences": 9
    },
    {
      "id": 31,
      "content": "cess the robots. eYRC 2023-24(AWMS): Stack 2 was implemented during the eYRC 2023-\n24. The task for the students was to develop an algorithm for the AWMS that\nwas set up in a warehouse at IIT Bombay. A total of 1312 students forming\n349 teams registered for the competition. Out of which 296 teams completed\nthe task 0. The simulation stage here was divided into two main tasks and\nfive sub-tasks. We asked students to self-rate their knowledge of ROS at the\nstart of the competition, as shown in Figure 3b. Task 0 was very preliminary\nand only included software installation and workspace setup. For tasks 1 and\n2, students had to study image processing and develop a script to manipulate\nthe UR5 ARM to pick up the payload (boxes). Students also had to complete\nautonomous navigation using the mobile rover in the simulation environment. The performance of all participating teams can be seen in Figure 4b.",
      "size": 908,
      "sentences": 11
    },
    {
      "id": 32,
      "content": "up the payload (boxes). Students also had to complete\nautonomous navigation using the mobile rover in the simulation environment. The performance of all participating teams can be seen in Figure 4b. In2023-24,weshortlistedteamsinthreestages,asshowninFigure4b.First,\nbased on the performance in the simulation stage, we shortlisted 38 teams for\nstage 2, i.e., hardware implementation. The following two short listings were\nbased on the team’s relative performance in the remote access hardware slots. Fortask4,24teamswereshortlisted,ofwhichonlyfourteamsdroppedout.Here,\nwe had a mixture of both simulation and hardware. The students were provided\n4hoursofremoteaccesstotherobots,inwhichtheyhadtopickandplaceboxes\nusing UR5 and implement navigation and docking of the mobile rover. As the\n=== 페이지 10 ===\n10 A. Kumar et al. (a) eYRC 2022-23 (b) eYRC 2023-24\nFig.5: Total remote access slots (hours) given per hardware task vs the number\nof teams participating in the task.",
      "size": 969,
      "sentences": 9
    },
    {
      "id": 33,
      "content": "le rover. As the\n=== 페이지 10 ===\n10 A. Kumar et al. (a) eYRC 2022-23 (b) eYRC 2023-24\nFig.5: Total remote access slots (hours) given per hardware task vs the number\nof teams participating in the task. More remote access hours were provided for\ncomplex tasks. lastsub-taskoftask4,teamshadtocompletetheentiretaskimplementationin\nsimulation.Theteamsweregradedrelatively.Similartostack1,weimplemented\nthestrategytointroduceeachhardwarecomponentasasmallsub-task,asshown\nin Figure 5b. This strategy helped students easily overcome the sim-to-real gap\nand quickly tackle complex automation problems. For stack 2, 76 teams consisting of beginners were able to complete both\nmobile rover navigation and arm manipulation using image processing in the\nsimulation stage. All 36 teams that got remote access achieved the results on\nhardware,asshowninFigure4b.DuringeYRC2023-24,wesuccessfullyprovided\nremote access to 36 teams, i.e., 146 students. Stack 2 was tested for over 355\nhours of remote access.",
      "size": 988,
      "sentences": 9
    },
    {
      "id": 34,
      "content": "cess achieved the results on\nhardware,asshowninFigure4b.DuringeYRC2023-24,wesuccessfullyprovided\nremote access to 36 teams, i.e., 146 students. Stack 2 was tested for over 355\nhours of remote access. We successfully trained 1312 students in robotics and\nROSduringtheeYRC2023-24usingstack2.AlthoughtheMOOCdropoutrate\nhas been a prominent issue, after the initial drop of more than 50 percent, we\nretained a significantly high number of participants during stage 2, with only 6\nteams dropping out, as shown in Figure 4b. Table 1 highlights the key differentiating factors of both the approaches\ndemonstratedbystack1andstack2.Thefinalistsofthecompetitionin2022-23\ngotanaverageof19.4hoursofremoteaccesstotherobots,whilethoseofeYRC\n2023-24 got an average of 30.8 hours. This, combined with the data from Fig-\nure 4, signifies that finalists, primarily consisting of beginners, could completely\nautomate AAHS and AWMS in such limited hours.",
      "size": 934,
      "sentences": 5
    },
    {
      "id": 35,
      "content": "got an average of 30.8 hours. This, combined with the data from Fig-\nure 4, signifies that finalists, primarily consisting of beginners, could completely\nautomate AAHS and AWMS in such limited hours. 4 Conclusion\nIn this paper, we present two remote platforms for teaching industrial robotics\nto students. Compared to previous work, our platforms use open-source tools\nand are tested with thousands of students. Testing these platforms as a part of\nour robotics competition, eYRC, showed that the finalist teams could develop\nfullyautonomousalgorithmsforrobotsinagreenhouseandawarehousewithan\naverage of 19.4 hours and 30.8 hours of remote hardware access, respectively. In\n=== 페이지 11 ===\nScalable and low-cost remote lab platforms 11\nTable 1: Key differentiating factors of stack 1 and stack 2, based on the data\nacquired from eYRC 2022-23 and eYRC 2023-24.",
      "size": 858,
      "sentences": 6
    },
    {
      "id": 36,
      "content": "spectively. In\n=== 페이지 11 ===\nScalable and low-cost remote lab platforms 11\nTable 1: Key differentiating factors of stack 1 and stack 2, based on the data\nacquired from eYRC 2022-23 and eYRC 2023-24. - Stack1 Stack2\nMedium Peer-to-PeerVPN VNCGraphicalandPeer-to-Peer\nVPN\nTypeofRobot(s) Staticandmobiletogetherinsingletestbed\nTestbed used in Re- GreenhouseSize:10mx6m WarehouseSize:8mx6m\nmoteLab(m-meters)\nAlgorithmExecution Student-Side Host-Side\nCommunication Thestudent,host,androbotsareinthesameVPN.ROSisused\nforbidirectionaldatacommunication. No. of student teams 14 38\n(trainedonhardware)\nHardwareaccessgiven\nto students (over 3 160hours 355hours\nmonths)\n– Simplehost-sidesetup – Low latency during execu-\n– Students have the free- tionofalgorithm\ndom to use any pack- – Low minimum system re-\nAdvantages ages/dependencies. quirementsforstudents\n– Safety scripts run on the – Safety scripts run on the\nhost-sidetopreventdamage host-side to prevent damage\ntotherobotsandthearena.",
      "size": 983,
      "sentences": 6
    },
    {
      "id": 37,
      "content": "mum system re-\nAdvantages ages/dependencies. quirementsforstudents\n– Safety scripts run on the – Safety scripts run on the\nhost-sidetopreventdamage host-side to prevent damage\ntotherobotsandthearena. totherobotsandthearena. – Averagelatencyof300ms – Complicatedhost-sidesetup\n– High system requirements – High setup time: Students\nfor students developing needtocopytheirscriptsto\nDisadvantages computationally demand- thehostpcatthebeginning. ingalgorithms. – Studentsarerestrictedtous-\ning packages supported by\nthehost. eYRC2022-23,weprovidedtrainingto197teamsusingasimulatorand14teams\nusing hardware. For eYRC 2023-24, this increased to 296 teams trained on the\nsimulatorand38teamstrainedwithhardware.Acomparisonofbothapproaches\nhasbeenpresentedwithitsadvantagesanddisadvantages.Onemajordrawback\nof a remote lab in a full-size real-world setting is that the host operator has to\nreset the components after every run.",
      "size": 919,
      "sentences": 8
    },
    {
      "id": 38,
      "content": "happroaches\nhasbeenpresentedwithitsadvantagesanddisadvantages.Onemajordrawback\nof a remote lab in a full-size real-world setting is that the host operator has to\nreset the components after every run. This reduces the hours a remote lab can\nbeoperatedeachday.Additionally,thestudentsshouldbeabletoautomatically\nresettherobotsandthevariouscomponentsinthearena.Futureworkwillfocus\non automating the greenhouse and the warehouse to minimize host operator\ninvolvement, improving the safety of the robots, reducing the latency between\nthe host and the student’s system, and maximizing the remote lab’s efficiency\nin terms of lab hours. 5 Acknowledgments. WewouldliketothanktheMinistryofEducation(MoE),Govt.ofIndia,fortheirsup-\nport.ThisworkwasfundedbyMoE,Govt.ofIndia,intheprojecte-Yantra(RD/0121-\n[표 데이터 감지됨]\n\n=== 페이지 12 ===\n12 A. Kumar et al. MHRD000-002). We are grateful to Arjun Sadananda, Ravikumar Chaurasia, Saail\nNarvekar,SimranjeetSingh,SmitKesaria,SoofiyaanAtar,andVishalGuptafortheir\nsupport.",
      "size": 998,
      "sentences": 6
    },
    {
      "id": 39,
      "content": "감지됨]\n\n=== 페이지 12 ===\n12 A. Kumar et al. MHRD000-002). We are grateful to Arjun Sadananda, Ravikumar Chaurasia, Saail\nNarvekar,SimranjeetSingh,SmitKesaria,SoofiyaanAtar,andVishalGuptafortheir\nsupport. This project utilized open-source software packages, too many to enumerate. We sincerely thank all the software developers and users for their contributions. We\nalso thank anonymous reviewers for their insightful comments and suggestions. Disclosure of Interests. The authors have no competing interests to declare that\nare relevant to the content of this article. References\n1. AnyDesk:Anydesk:Thefastremotedesktopapplication.(n.d. ).anydesk.,https:\n//anydesk.com/en/, accessed: 2024-06-26\n2. Casañ, G.A., Cervera, E., Moughlbay, A.A., Alemany, J., Martinet, P.: Ros-based\nonlinerobotprogrammingforremoteeducationandtraining.In:2015IEEEInter-\nnational Conference on Robotics and Automation (ICRA). pp. 6101–6106 (2015). https://doi.org/10.1109/ICRA.2015.7140055\n3.",
      "size": 965,
      "sentences": 15
    },
    {
      "id": 40,
      "content": "s-based\nonlinerobotprogrammingforremoteeducationandtraining.In:2015IEEEInter-\nnational Conference on Robotics and Automation (ICRA). pp. 6101–6106 (2015). https://doi.org/10.1109/ICRA.2015.7140055\n3. Commission, E., for Research, D.G., Innovation, Renda, A., Schwaag Serger, S.,\nTataj,D.,Morlet,A.,Isaksson,D.,Martins,F.,MirRoca,M.,Hidalgo,C.,Huang,\nA., Dixson-Declève, S., Balland, P., Bria, F., Charveriat, C., Dunlop, K., Giovan-\nnini, E.: Industry 5.0, a transformative vision for Europe – Governing systemic\ntransformations towards a sustainable industry. Publications Office of the Euro-\npean Union (2021). https://doi.org/doi/10.2777/17322\n4. GNU, P.: Free software foundation. bash (3.2. 48)[unix shell program] (2007)\n5. Goopio, J., Cheung, C.: The mooc dropout phenomenon and reten-\ntion strategies. Journal of Teaching in Travel & Tourism 21(2), 177–197\n(2021). https://doi.org/10.1080/15313220.2020.1809050, https://doi.org/\n10.1080/15313220.2020.1809050\n6.",
      "size": 969,
      "sentences": 13
    },
    {
      "id": 41,
      "content": "phenomenon and reten-\ntion strategies. Journal of Teaching in Travel & Tourism 21(2), 177–197\n(2021). https://doi.org/10.1080/15313220.2020.1809050, https://doi.org/\n10.1080/15313220.2020.1809050\n6. Gough, V.: Encfs - an encrypted filesystem, https://vgough.github.io/encfs/,\naccessed: 2024-06-26\n7. Heradio, R., de la Torre, L., Galan, D., Cabrerizo, F.J., Herrera-\nViedma, E., Dormido, S.: Virtual and remote labs in education:\nA bibliometric analysis. Computers & Education 98, 14–38 (2016). https://doi.org/https://doi.org/10.1016/j.compedu.2016.03.010,\nhttps://www.sciencedirect.com/science/article/pii/S0360131516300677\n8. Hultman, E., Leijon, M.: Integration of real-world project tasks in a course on\nautomation and robot engineering. In: 2019 IEEE Global Engineering Education\nConference (EDUCON). pp. 107–114 (2019). https://doi.org/10.1109/EDUCON. 2019.8725198\n9. Husarnet:Operateattheedgeoflatency,https://husarnet.com,accessed:2024-\n06-26\n10.",
      "size": 955,
      "sentences": 14
    },
    {
      "id": 42,
      "content": "Global Engineering Education\nConference (EDUCON). pp. 107–114 (2019). https://doi.org/10.1109/EDUCON. 2019.8725198\n9. Husarnet:Operateattheedgeoflatency,https://husarnet.com,accessed:2024-\n06-26\n10. Jara, C.A., Candelas, F.A., Puente, S.T., Torres, F.: Hands-on experi-\nences of undergraduate students in automatics and robotics using a vir-\ntual and remote laboratory. Computers & Education 57(4), 2451–2461\n(2011). https://doi.org/https://doi.org/10.1016/j.compedu.2011.07.003,\nhttps://www.sciencedirect.com/science/article/pii/S0360131511001515\n11. Jdidou, A., Aammou, S.: Exploring the potential of ros in education: A project-\nbased learning approach to teaching programming to children. In: Proceedings\nof the E-Learning and Smart Engineering Systems (ELSES 2023). pp. 29–35. === 페이지 13 ===\nScalable and low-cost remote lab platforms 13\nAtlantis Press (2024). https://doi.org/10.2991/978-94-6463-360-3_4, https:\n//doi.org/10.2991/978-94-6463-360-3_4\n12.",
      "size": 959,
      "sentences": 15
    },
    {
      "id": 43,
      "content": "SES 2023). pp. 29–35. === 페이지 13 ===\nScalable and low-cost remote lab platforms 13\nAtlantis Press (2024). https://doi.org/10.2991/978-94-6463-360-3_4, https:\n//doi.org/10.2991/978-94-6463-360-3_4\n12. Kadian, A., Truong, J., Gokaslan, A., Clegg, A., Wijmans, E., Lee, S., Savva, M.,\nChernova, S., Batra, D.: Sim2real predictivity: Does evaluation in simulation pre-\ndict real-world performance? IEEE Robotics and Automation Letters 5(4), 6670–\n6677 (2020). https://doi.org/10.1109/LRA.2020.3013848\n13. Kam, H.R., Lee, S.H., Park, T., Kim, C.H. : Rviz: a toolkit for real domain data\nvisualization. Telecommun. Syst. 60(2), 337–345 (oct 2015). https://doi.org/\n10.1007/s11235-015-0034-5, https://doi.org/10.1007/s11235-015-0034-5\n14. Koenig, N., Howard, A.: Design and use paradigms for gazebo, an open-source\nmulti-robotsimulator.In:2004IEEE/RSJInternationalConferenceonIntelligent\nRobots and Systems (IROS) (IEEE Cat. No.04CH37566). vol. 3, pp. 2149–2154\nvol.3 (Sep 2004).",
      "size": 972,
      "sentences": 19
    },
    {
      "id": 44,
      "content": "radigms for gazebo, an open-source\nmulti-robotsimulator.In:2004IEEE/RSJInternationalConferenceonIntelligent\nRobots and Systems (IROS) (IEEE Cat. No.04CH37566). vol. 3, pp. 2149–2154\nvol.3 (Sep 2004). https://doi.org/10.1109/IROS.2004.1389727\n15. Krithivasan, S., Shandilya, S., Lala, K., Arya, K.: Massive project based learning\nthrough a competition: Impact of and insights from the e-yantra robotics compe-\ntition (eyrc – 2013). In: 2014 IEEE Sixth International Conference on Technology\nfor Education. pp. 156–163 (2014). https://doi.org/10.1109/T4E.2014.13\n16. Kru¯minš, D., Schumann, S., Vunder, V., Põlluäär, R., Laht, K., Raudmäe, R.,\n,\nAabloo, A., Kruusamäe, K.: Open remote web lab for learning robotics and ros\nwith physical and simulated robots in an authentic developer environment. IEEE\nTransactions on Learning Technologies 17, 1325–1338 (2024). https://doi.org/\n10.1109/TLT.2024.3381858\n17. Ma,J.,Nickerson,J.V.",
      "size": 926,
      "sentences": 15
    },
    {
      "id": 45,
      "content": "hysical and simulated robots in an authentic developer environment. IEEE\nTransactions on Learning Technologies 17, 1325–1338 (2024). https://doi.org/\n10.1109/TLT.2024.3381858\n17. Ma,J.,Nickerson,J.V. :Hands-on,simulated,andremotelaboratories:Acompar-\nativeliteraturereview.ACMComput.Surv.38(3),7–es(sep2006).https://doi. org/10.1145/1132960.1132961, https://doi.org/10.1145/1132960.1132961\n18. Macenski, S., Martín, F., White, R., Ginés Clavero, J.: The marathon 2: A navi-\ngationsystem.In:2020IEEE/RSJInternationalConferenceonIntelligentRobots\nand Systems (IROS) (2020), https://github.com/ros-planning/navigation2\n19. Macenski, S., Foote, T., Gerkey, B., Lalancette, C., Woodall, W.: Robot operat-\ning system 2: Design, architecture, and uses in the wild. Science Robotics 7(66)\n(May 2022). https://doi.org/10.1126/scirobotics.abm6074, http://dx.doi. org/10.1126/scirobotics.abm6074\n20. Mills, J., Treagust, D.: Engineering education, is problem-based or project-based\nlearning the answer.",
      "size": 991,
      "sentences": 12
    },
    {
      "id": 46,
      "content": "https://doi.org/10.1126/scirobotics.abm6074, http://dx.doi. org/10.1126/scirobotics.abm6074\n20. Mills, J., Treagust, D.: Engineering education, is problem-based or project-based\nlearning the answer. Aust J Eng Educ 3 (01 2003)\n21. Panwar, A., Chauhan, A., Arya, K.: Analyzing learning outcomes for a mas-\nsive online competition through a project-based learning engagement. In: 2020\nIEEEGlobalEngineeringEducationConference(EDUCON).pp.1246–1251(April\n2020). https://doi.org/10.1109/EDUCON45650.2020.9125379\n22. Pitonakova,L.,Giuliani,M.,Pipe,A.,Winfield,A. :Featureandperformancecom-\nparison of the v-rep, gazebo and argos robot simulators. In: Giuliani, M., Assaf,\nT.,Giannaccini,M.E.(eds.)TowardsAutonomousRoboticSystems.pp.357–368. Springer International Publishing, Cham (2018)\n23. Probe,A.,Oyake,A.,Chambers,S.W.,Deans,M.,Brat,G.,Cramer,N.B.,Kempa,\nB.,Roberts,B.,Hambuchen,K. :SpaceROS:AnOpen-SourceFrameworkforSpace\nRobotics and Flight Software. https://doi.org/10.2514/6.2023-2709\n24.",
      "size": 991,
      "sentences": 14
    },
    {
      "id": 47,
      "content": "A.,Oyake,A.,Chambers,S.W.,Deans,M.,Brat,G.,Cramer,N.B.,Kempa,\nB.,Roberts,B.,Hambuchen,K. :SpaceROS:AnOpen-SourceFrameworkforSpace\nRobotics and Flight Software. https://doi.org/10.2514/6.2023-2709\n24. Quigley, M., Conley, K., Gerkey, B., Faust, J., Foote, T., Leibs, J., Wheeler, R.,\nNg,A. :Ros:anopen-sourcerobotoperatingsystem.In:ICRAWorkshoponOpen\nSource Software. vol. 3 (01 2009)\n25. Robotics, O.: Ros 2 humble hawksbill installation guide, https://docs.ros.org/\nen/humble/Installation.html\n=== 페이지 14 ===\n14 A. Kumar et al. 26. Robots, U.: Ur5 technical specifications, https://www.universal-robots.com/\nmedia/50588/ur5_en.pdf, accessed: 2024-06-26\n27. Sarkar, A., Pandey, A., Kumar, A., Furtado, A., Karia, K., Arya, K.: Teaching\ncomplex skills through an online robotics competition during covid-19 pandemic. In: 2022 International Conference on Advanced Learning Technologies (ICALT). pp. 199–200 (2022). https://doi.org/10.1109/ICALT55010.2022.00065\n28.",
      "size": 962,
      "sentences": 15
    },
    {
      "id": 48,
      "content": "nline robotics competition during covid-19 pandemic. In: 2022 International Conference on Advanced Learning Technologies (ICALT). pp. 199–200 (2022). https://doi.org/10.1109/ICALT55010.2022.00065\n28. Schulzrinne, H., Rao, A., Lanphier, R.: Rfc2326: Real time streaming protocol\n(rtsp) (1998)\n29. Sobell, M.G. : A practical guide to Ubuntu Linux. Pearson Education (2015)\n30. Van Rossum, G., Drake Jr, F.L. : Python reference manual. Centrum voor\nWiskunde en Informatica Amsterdam (1995)\n31. Wiedmeyer, W., Mende, M., Hartmann, D., Bischoff, R., Ledermann, C., Kroger,\nT.:Roboticseducationandresearchatscale:Aremotelyaccessibleroboticsdevel-\nopment platform. In: 2019 International Conference on Robotics and Automation\n(ICRA). pp. 3679–3685 (2019). https://doi.org/10.1109/ICRA.2019.8793976\n32. Wijaya,G.D.,Caesarendra,W.,Petra,M.I.,Królczyk,G.,Glowacz,A. :Compara-\ntivestudyofgazeboandunity3dinperformingavirtualpickandplaceofuniversal\nrobot ur3 for assembly process in manufacturing.",
      "size": 985,
      "sentences": 19
    },
    {
      "id": 49,
      "content": "3976\n32. Wijaya,G.D.,Caesarendra,W.,Petra,M.I.,Królczyk,G.,Glowacz,A. :Compara-\ntivestudyofgazeboandunity3dinperformingavirtualpickandplaceofuniversal\nrobot ur3 for assembly process in manufacturing. Simulation Modelling Practice\nandTheory132,102895(2024).https://doi.org/https://doi.org/10.1016/j. simpat.2024.102895, https://www.sciencedirect.com/science/article/pii/\nS1569190X24000091\n33. Čehovin Zajc, L., Rezelj, A., Skočaj, D.: Low-cost open-source robotic platform\nfor education. IEEE Transactions on Learning Technologies 16(1), 18–25 (2023). https://doi.org/10.1109/TLT.2022.3224227",
      "size": 591,
      "sentences": 8
    }
  ]
}