{
  "source": "ArXiv",
  "filename": "006_Enhancing_Inventory_Management_with_Progressive_We.pdf",
  "total_chars": 17540,
  "total_chunks": 25,
  "chunks": [
    {
      "id": 1,
      "content": "=== 페이지 1 ===\nEnhancing Inventory Management with\nProgressive Web Applications (PWAs): A\nScalable Solution for Small and Large\nEnterprises\nAbhi Desai\nNew England College, Henniker, New Hampshire, US\nadesai_gps@nec.edu | desai.abhi94@gmail.com\nAbstract—Efficient inventory management is cru- logistics, trade, and manufacturing sectors. This is-\ncial for both small and large enterprises to optimize sue gains prominence as companies face increasing\noperational workflows and reduce overhead costs. demands for process automation and a reduction in\nThis paper explores the development and implementa-\nerrors due to manual management. The challenge\ntion of a Progressive Web Application (PWA) designed\nto enhance the inventory management experience. is exacerbated for new market entrants that often\nThe application integrates key functionalities such lack the necessary capital to develop specialized\nas barcode and QR code scanning, geolocation-based software for every device type.",
      "size": 982,
      "sentences": 5
    },
    {
      "id": 2,
      "content": "nts that often\nThe application integrates key functionalities such lack the necessary capital to develop specialized\nas barcode and QR code scanning, geolocation-based software for every device type. warehouse identification, and cross-device accessibil-\nity. By leveraging PWA technology, the solution en-\nB. Goal Header\nsures offline capabilities, responsive user experience,\nand seamless adaptability across various platforms. Our goal is to create a tool that will help compa-\nThe study discusses the challenges and benefits of\nnies track and manage assets more efficiently. The\nimplementing PWA in inventory management systems,\nmain technical assumption was to create a PWA\nincluding its limitations in performance compared to\nnative applications. Insights from the development application in the MVP (Minimal Viable Product)\nprocess provide a roadmap for future developers version, i.e.",
      "size": 892,
      "sentences": 7
    },
    {
      "id": 3,
      "content": "limitations in performance compared to\nnative applications. Insights from the development application in the MVP (Minimal Viable Product)\nprocess provide a roadmap for future developers version, i.e. with CRUD functions, enabling the\nlooking to integrate PWA technology into enterprise management of warehouses, stock levels, product\napplications. This research contributes to the growing\navailability and assigned product categories. The\ndomain of web-based inventory solutions, offering a\nfunctionality of the application has been extended to\nscalable and cost-effective alternative to traditional\ninventory management software. include a QR code and barcode scanning module. Another element is the implementation of geolo-\nI. INTRODUCTION\ncation, which aims to accelerate the identification\nA. Problem Characteristics of the warehouse based on the user’s location.",
      "size": 867,
      "sentences": 9
    },
    {
      "id": 4,
      "content": "g module. Another element is the implementation of geolo-\nI. INTRODUCTION\ncation, which aims to accelerate the identification\nA. Problem Characteristics of the warehouse based on the user’s location. Our\nWarehouse resource management is a key el- goal is to create a tool that will help companies\nement of the effective functioning of many en- track and manage resources more effectively. The\nterprises, especially in industries related to logis- main technical assumption was to create an MVP\ntics, trade, and production. This problem becomes (Minimal Viable Product) version of the PWA ap-\nparticularly important in the context of growing plication, i.e., one that has CRUD functionalities\nexpectations related to process automation and the to manage warehouses, inventory, product avail-\nminimization of errors resulting from manual man- ability, and assigned product categories. The goal\nagement.",
      "size": 900,
      "sentences": 8
    },
    {
      "id": 5,
      "content": "ons related to process automation and the to manage warehouses, inventory, product avail-\nminimization of errors resulting from manual man- ability, and assigned product categories. The goal\nagement. of creating a PWA application was to create a\nInventory management is crucial for the efficient single tool that could be used on many devices,\noperation of many businesses, particularly in the regardless of whether the device is running on\n=== 페이지 2 ===\nthe preferred system. The application’s functionality warehouses. We want to investigate whether achiev-\nwas supposed to be extended with a QR code and ing similar functionality, as well as automating\nbarcode scanning module. Scanning the codes was some operations (receiving and issuing products) is\nto enable faster obtaining of information about a possible using PWA (Progressive Web Application). given product.",
      "size": 870,
      "sentences": 7
    },
    {
      "id": 6,
      "content": "g module. Scanning the codes was some operations (receiving and issuing products) is\nto enable faster obtaining of information about a possible using PWA (Progressive Web Application). given product. Another sensor-based functionality PWA technology offers several significant advan-\nis geolocation, which can speed up warehouse iden- tages that can translate into greater flexibility and\ntification based on the user’s location. QR code lower maintenance costs compared to classic SaaS\nscanning was to be extended to edit the warehouse solutions:\nstatus after scanning the QR code. The QR code • Lower maintenance costs - PWAs do not re-\nwas to contain data that the system would read quire maintaining separate versions for differ-\nand present to the employee for processing. This ent platforms (e.g., iOS, Android, desktop). solution could significantly speed up the receipt and • Offline operation and resource savings - PWA\nissuance of products from warehouses.",
      "size": 966,
      "sentences": 8
    },
    {
      "id": 7,
      "content": "rocessing. This ent platforms (e.g., iOS, Android, desktop). solution could significantly speed up the receipt and • Offline operation and resource savings - PWA\nissuance of products from warehouses. can operate offline thanks to Service Worker’s\ntechnology, which means that basic functions\nC. The Benefits\nare available even with limited internet access. In the business context, this project sought to • Independence from the App Store and Play\nenhance resource management efficiency, decrease Store - No need to publish applications in\nthe time required for warehouse operations, and app stores eliminates the associated costs and\nminimize errors stemming from manual tasks. On waiting time for acceptance. the technical side, the main objective was to develop In the context of technology, barcode and QR\na user-friendly and effective tool that seamlessly code integration has become a cornerstone of mod-\nintegrates with current enterprise systems and is ern inventory systems.",
      "size": 983,
      "sentences": 7
    },
    {
      "id": 8,
      "content": "echnology, barcode and QR\na user-friendly and effective tool that seamlessly code integration has become a cornerstone of mod-\nintegrates with current enterprise systems and is ern inventory systems. Libraries such as ZXing\nand is usable on mobile devices and computers. In [6] offer reliable and efficient methods for decod-\na business setting, the project sought to develop ing these codes, making product identification and\na user-friendly and effective tool that is readily tracking much easier. accessible on both mobile devices and computers. Progressive Web Apps (PWAs) [7] are gaining\nAdditionally, the system aimed to reduce mistakes traction for their ability to combine the accessibility\nassociated with manual inventory management. of web applications with the native performance of\nmobile apps. Their features include offline func-\nII.",
      "size": 848,
      "sentences": 7
    },
    {
      "id": 9,
      "content": "on for their ability to combine the accessibility\nassociated with manual inventory management. of web applications with the native performance of\nmobile apps. Their features include offline func-\nII. THE RELATED WORKS\ntionality, simple installation, and access to device\nEnterprise Resource Planning (ERP) systems, capabilities such as cameras and geolocation. PWAs\nsuch as SAP [1], Oracle NetSuite [2], and Odoo [3], also enable unified development across platforms,\nare popular solutions in this domain offering com- reducing costs and maintenance efforts. prehensive features ranging from inventory tracking\nIII. THE RESULTS\nto financial management. However, these platforms\noften require significant resources for deployment A. The Summary\nand maintenance, making them less accessible for The project implementation was successful. We\nsmaller enterprises.",
      "size": 859,
      "sentences": 10
    },
    {
      "id": 10,
      "content": ", these platforms\noften require significant resources for deployment A. The Summary\nand maintenance, making them less accessible for The project implementation was successful. We\nsmaller enterprises. included all important functionalities and compre-\nFor small- and medium-scale enterprises, SaaS hensively checked the usability and ease of use of\n(Software as a Service) solutions like Zoho Inven- PWA technology. tory [4] and TradeGecko [5] are popular alterna- Our project builds upon these insights to deliver a\ntives. These tools are user-friendly, lightweight, and PWA-based inventory management system tailored\nintegrate well with other software, but they lack for enterprises of varying sizes. By integrating\nscalability and deep customization for larger op- technologies such as Angular [8], Spring Boot [9],\nerations.",
      "size": 827,
      "sentences": 7
    },
    {
      "id": 11,
      "content": "well with other software, but they lack for enterprises of varying sizes. By integrating\nscalability and deep customization for larger op- technologies such as Angular [8], Spring Boot [9],\nerations. The above-mentioned software is mainly PostgreSQL [10], and AWS [11], we aim to create\nused to process orders and ship items from given a scalable, cost-effective, and accessible solution\n=== 페이지 3 ===\nthat combines the simplicity of SaaS tools with the 2) Improved Efficiency: Simplified management\npower of ERP platforms. of incoming and outgoing deliveries enhances\nThe implementation of the project proceeded organization, reduces processing times, and\nas planned and was successful. We managed to boosts overall productivity. include all important functionalities and use of PWA\ntechnology. B. The Technical Goals\nB.",
      "size": 821,
      "sentences": 8
    },
    {
      "id": 12,
      "content": "ion, reduces processing times, and\nas planned and was successful. We managed to boosts overall productivity. include all important functionalities and use of PWA\ntechnology. B. The Technical Goals\nB. The Project Assumptions\n1) Cross-Platform Compatibility: Using Progres-\nOur use of PWA implements on multiple de- sive Web App (PWA) technology ensures the\nvices while maintaining a single code base. At the app works seamlessly across devices while\nsame time, it provides access to device sensors, maintaining a single codebase, reducing de-\nlike the camera or geolocation, which we used to velopment and maintenance efforts. add additional functionalities, such as scanning bar 2) Scalable Architecture: The backend, designed\ncodes and QR codes and pinpointing the exact ware- with Spring Boot and deployed on AWS using\nhouse the user is currently stationed in. This makes Terraform, is built to handle increasing data\nit especially helpful for businesses with multiple loads and user demands.",
      "size": 994,
      "sentences": 9
    },
    {
      "id": 13,
      "content": "and deployed on AWS using\nhouse the user is currently stationed in. This makes Terraform, is built to handle increasing data\nit especially helpful for businesses with multiple loads and user demands. warehouses. 3) Secure Data Management: The app protects\nuser data and ensures resource access autho-\nIV. THEFUNCTIONALITIES\nrization by using Amazon Cognito for authen-\n• CRUD operations, i.e., Create, Read, Update, tication and other security measures. Delete, allowing full modification of data 4) Modern Development Practices: Technologies\nstored in the database., like Terraform, Docker, and Nginx highlight\n• Ability to scan barcodes and QR codes in an the use of efficient, modern tools for devel-\nintuitive way for quick access to a specific opment, deployment, and infrastructure man-\nproduct in the warehouse, agement.",
      "size": 827,
      "sentences": 6
    },
    {
      "id": 14,
      "content": "n barcodes and QR codes in an the use of efficient, modern tools for devel-\nintuitive way for quick access to a specific opment, deployment, and infrastructure man-\nproduct in the warehouse, agement. • Inventory management in multiple warehouses, 5) Testability: The software that was developed\n• Managing users and their access to functional- is comprehensively tested with over 80% code\nities offered by the system layer coverage. • Create, Read, Update, and Delete (CRUD)\noperations, allowing for full modification of\nC. The TechStack\ndata stored in the database, such as items,\nwarehouses, inventor,y and item categories, Our project uses a modern and robust tech stack\n• Ability to scan barcodes and QR codes in designed to deliver both scalability and reliability:\nan intuitive way to quickly access a specific Angular [8], Spring Framework [9], AWS (Amazon\nproduct in stock, Web Services) [11], Docker [12], Hashicorp Ter-\n• Inventory management across multiple ware- raform [13].",
      "size": 987,
      "sentences": 3
    },
    {
      "id": 15,
      "content": "to quickly access a specific Angular [8], Spring Framework [9], AWS (Amazon\nproduct in stock, Web Services) [11], Docker [12], Hashicorp Ter-\n• Inventory management across multiple ware- raform [13]. houses, Moreover, we used: ZXing: A library integrated\n• Management of users and their access to func- into our application to facilitate barcode and QR\ntionalities offered by the system layer, code scanning. Utilizing the device’s camera, we\nimplemented ZXing to efficiently read both QR\nA. The Business Goals\ncodes and EAN-13 barcodes, ensuring accurate and\n1) Enhanced Inventory Management: The sys- seamless data capture directly within the applica-\ntem integrates barcode and QR code scan- tion. This approach leverages PWA capabilities to\nning to improve asset tracking, streamline access hardware resources, eliminating the need for\ninventory control, and provide quick access external scanning devices and enhancing usability\nto details such as stock levels and locations.",
      "size": 980,
      "sentences": 5
    },
    {
      "id": 16,
      "content": "amline access hardware resources, eliminating the need for\ninventory control, and provide quick access external scanning devices and enhancing usability\nto details such as stock levels and locations. on various platforms. [6]\n=== 페이지 4 ===\nD. The Project Assumptions tools such as AWS and Terraform, aligning\nwith enterprise-level best practices and conven-\nAt the beginning of the project, we established\ntions. It makes use of AWS infrastructure, and\nvarious constraints and assumptions to limit the\nthrough the usage of private subnets, appro-\nscope and guide the development in the right di-\npriately applied security groups, and Amazon\nrection. Cognito, the application is secured, and thanks\nOur goal was to create a simple and intuitive\nto the application load balancing and auto-\napplication that would allow users of various skill\nscaling, the application is scalable without\nlevels to successfully use our application. Thanks\ngenerating unnecessary costs.",
      "size": 965,
      "sentences": 6
    },
    {
      "id": 17,
      "content": "d balancing and auto-\napplication that would allow users of various skill\nscaling, the application is scalable without\nlevels to successfully use our application. Thanks\ngenerating unnecessary costs. to PWA technology, we wanted to obtain an ap-\nplication available on many devices, with simple V. THE CONCLUSION\ninstallation and a native graphical interface. To sum up, the application we designed is in-\nWe decided to limit the scope and support only\ntuitive to use and provides basic functionalities\none company with multiple warehouses. These\nrequired by warehouse workers. It will allow for\nwarehouses may contain items shared between them\nmore efficient and simpler inventory management. and have individual inventories.",
      "size": 726,
      "sentences": 7
    },
    {
      "id": 18,
      "content": "e warehouses. These\nrequired by warehouse workers. It will allow for\nwarehouses may contain items shared between them\nmore efficient and simpler inventory management. and have individual inventories. There will be no\nThanks to PWA technology, it is available on both\nregistration form - each employee in the company\nmobile devices and computers, supporting instal-\nwill have to be added manually by the administrator\nlation and quick and easy access in conditions of\nAt the beginning of the project, we set multiple\nlimited Internet access. restrictions and assumptions to limit the scope and\nWhat is important for the technological recipient\nguide the development in the right direction. is that we have tested the capabilities of PWA tech-\nWe set out to create a simple and intuitive appli-\nnology and proved that it is profitable for creating\ncation to allow users across all skill levels to suc-\napplications for multiple devices while maintaining\ncessfully use our application.",
      "size": 982,
      "sentences": 7
    },
    {
      "id": 19,
      "content": "ve appli-\nnology and proved that it is profitable for creating\ncation to allow users across all skill levels to suc-\napplications for multiple devices while maintaining\ncessfully use our application. Thanks to the PWA\none code base. technology,y we wanted to achieve an application\nIn summary, the app we developed uses PWA\nthat is available on multiple devices with simple\ntechnology to enable more flexible and cost-\ninstallation and a native feel. effective inventory management. Unlike traditional\nWe decided to limit the scope and support only a\nsolutions that require dedicated barcode scanning\nsingle company owning multiple warehouses. Those\ndevices, this app can be easily used on standard\nwarehouses can contain items shared between them\nsmartphones, making it a more attractive option for\nand have individual stocks. There will not be a\nsmall businesses.",
      "size": 865,
      "sentences": 7
    },
    {
      "id": 20,
      "content": "p can be easily used on standard\nwarehouses can contain items shared between them\nsmartphones, making it a more attractive option for\nand have individual stocks. There will not be a\nsmall businesses. registration form—the administrator will have to\nWith PWA technology, the app works seamlessly\nmanually add each employee to the company. This\non both mobile and desktop devices, eliminating the\nwill ensure that only users declared by the compa-\nneed for separate apps for different platforms. It\nnies will use the application, reducing the cost of\nruns as a native app, providing access to device\nmaintaining it. resources such as camera and location services,\nand can maintain functionality even with limited or\nE. The Additional Highlights\nno internet access.",
      "size": 762,
      "sentences": 6
    },
    {
      "id": 21,
      "content": "ve app, providing access to device\nmaintaining it. resources such as camera and location services,\nand can maintain functionality even with limited or\nE. The Additional Highlights\nno internet access. This cross-platform compatibil-\n• Feasibility Demonstration: The app proves the ity, combined with reduced hardware requirements,\npotential of PWAs for small and medium-sized\nmakes it a practical solution for modern inventory\ncompanies thanks to the quick development\nmanagement. process. Additionally, the use of hardware sen-\nsors makes it a good solution for an inventory VI. THE FURTHER RESEARCH\nmanagement application, allowing for quality- For further development of the project, it would\nof-life features like scanning of the QR codes. be necessary to take into account what other func-\n• Technical Design: Built with scalability and tionalities may be useful for employees and ware-\nsecurity in mind, the system employs modern house managers, e.g.",
      "size": 955,
      "sentences": 7
    },
    {
      "id": 22,
      "content": "to take into account what other func-\n• Technical Design: Built with scalability and tionalities may be useful for employees and ware-\nsecurity in mind, the system employs modern house managers, e.g. === 페이지 5 ===\n• optimization of the arrangement of items in the [6] Z. T. Sean Owen, Daniel Switkin, “Zxing repository,” https:\nwarehouse, //github.com/zxing/zxing, accessed: 2024-11-30. [7] A. Russell, “Pwa website,” https://web.dev/explore/\n• using geolocation to determine the shortest progressive-web-apps, accessed: 2024-11-30.\nroute to the desired section in the warehouse, [8] Google, “Angular documentation,” https://angular.dev, ac-\n• Calculating route and cart capacity require- cessed: 2024-11-30. [9] R. Johnson, “Spring boot documentation,” https://docs. ments to complete an order from the ware-\nspring.io/spring-boot/index.html, accessed: 2024-11-30.\nhouse, [10] P. G. D. Group, “Postgresql website,” https://www.",
      "size": 928,
      "sentences": 5
    },
    {
      "id": 23,
      "content": "ing boot documentation,” https://docs. ments to complete an order from the ware-\nspring.io/spring-boot/index.html, accessed: 2024-11-30.\nhouse, [10] P. G. D. Group, “Postgresql website,” https://www. • expanding the application to a commercial postgresql.org, accessed: 2024-11-30. [11] M. G. (CEO), “Aws documentation,” https://docs.aws. version that can support many companies in\namazon.com, accessed: 2024-11-30.\na comprehensive way, [12] D. Inc., “Docker documentation,” https://docs.docker.com,\n• and many others. accessed: 2024-11-30.",
      "size": 540,
      "sentences": 6
    },
    {
      "id": 24,
      "content": "rsion that can support many companies in\namazon.com, accessed: 2024-11-30.\na comprehensive way, [12] D. Inc., “Docker documentation,” https://docs.docker.com,\n• and many others. accessed: 2024-11-30. [13] HashiCorp, “Hashicorp terraform documentation,” https:\nFor further development of the project, it would\n//developer.hashicorp.com/terraform/docs, accessed: 2024-\nbe important to consider what other functionality 11-30.\nmight be useful for warehouse workers and man-\nagers, such as:\n• optimization of the layout of items in the\nwarehouse,\n• use of geolocation to determine the shortest\nroute to the desired section in the warehouse,\n• calculation of the route and cart capacity re-\nquirements to complete an order from the\nwarehouse,\n• expansion of the application to a commercial\nversion that can support multiple companies in\na comprehensive way\n• handling deliveries and releases of products\nfrom the warehouse\n• managing accounts through the company\n• supporting inventory processes\n• keeping statistics and generating appropriate\nreports and charts based on the data\n• enabling integration with other systems to au-\ntomate the processes of deliveries and releases\nfrom warehouses (adding generation of QR\ncodes and invoices) or generating QR codes\nbased on invoices.",
      "size": 1275,
      "sentences": 3
    },
    {
      "id": 25,
      "content": "• enabling integration with other systems to au-\ntomate the processes of deliveries and releases\nfrom warehouses (adding generation of QR\ncodes and invoices) or generating QR codes\nbased on invoices. REFERENCES\n[1] C. K. (CEO), “Sap website,” https://www.sap.com/cmp/dg/\nna-corporate-brand/index.html, accessed: 2024-11-30. [2] Oracle, “Oracle netsuite website,” https://www.netsuite. com/portal/home.shtml, accessed: 2024-11-30. [3] O. SA, “Odoo website,” www.odoo.com/, accessed: 2024-\n11-30. [4] T. G. T. Sridhar Vembu, Sreenivas Kanumuru, “Zoho inven-\ntory website,” https://www.zoho.com/inventory/, accessed:\n2024-11-30. [5] C. P. (CEO), “Tradegecko website,” http://www.tradegecko. com, accessed: 2024-11-30.",
      "size": 714,
      "sentences": 8
    }
  ]
}