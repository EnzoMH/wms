{
  "source": "ArXiv",
  "filename": "014_GSRM__Building_Roadmaps_for_Query-Efficient_and_Ne.pdf",
  "total_chars": 32866,
  "total_chunks": 48,
  "chunks": [
    {
      "id": 1,
      "content": "=== 페이지 1 ===\nGSRM: Building Roadmaps for Query-Efficient\nand Near-Optimal Path Planning Using a Reaction\nDiffusion System\nChristian Henkel1, Marc Toussaint2, and Wolfgang Ho¨nig2\nAbstract—Mobile robots frequently navigate on roadmaps,\ni.e., graphs where edges represent safe motions, in applications\nsuch as healthcare, hospitality, and warehouse automation. Often the environment is quasi-static, i.e., it is sufficient to\nconstruct a roadmap once and then use it for any future\nplanning queries. Roadmaps are typically used with graph\nsearchalgorithmtofindfeasiblepathsfortherobots.Therefore,\nthe roadmap should be well-connected, and graph searches\nshouldproducenear-optimalsolutionswithshortsolutionpaths\nwhile simultaneously be computationally efficient to execute\nqueries quickly. We propose a new method to construct roadmaps based on\ntheGray-ScottreactiondiffusionsystemandDelaunaytriangu-\nlation.",
      "size": 906,
      "sentences": 4
    },
    {
      "id": 2,
      "content": "hs\nwhile simultaneously be computationally efficient to execute\nqueries quickly. We propose a new method to construct roadmaps based on\ntheGray-ScottreactiondiffusionsystemandDelaunaytriangu-\nlation. Our approach, GSRM, produces roadmaps with evenly\ndistributed vertices and edges that are well-connected even in\nenvironments with challenging narrow passages. Empirically,\nwe compare to classical roadmaps generated by 8-connected\ngrids, probabilistic roadmaps (PRM, SPARS2), and optimized\nroadmap graphs (ORM). Our results show that GSRM con-\nFig.1. Exampleroadmapwith290nodesand957edgesonthemapSlam\nsistently produces superior roadmaps that are well-connected, from Fig. 3d. Blue dots are the vertices of the roadmap, black lines are\nhave high query efficiency, and result in short solution paths. the edges. The red line is an example path with a length of 0.479. The\nroadmapwasproducedfromthesimulationoftheGray-Scottsystemshown\nI. INTRODUCTION inFig.2d.",
      "size": 958,
      "sentences": 12
    },
    {
      "id": 3,
      "content": "ncy, and result in short solution paths. the edges. The red line is an example path with a length of 0.479. The\nroadmapwasproducedfromthesimulationoftheGray-Scottsystemshown\nI. INTRODUCTION inFig.2d. TousepathfindingalgorithmssuchasA*forrobotmotion\nplanning, a discretization of the environment is necessary. a path. Third, the roadmap should allow for short paths\nA common approach is to discretize the environment as a\nbetween any two vertices. Finally, it is desirable to compute\ngrid. However, such gridmaps generalize to non-rectangular\nor update roadmaps efficiently. Our work focuses mostly on\nenvironments ineffectively. More generally, an environment\nthe path length while maintaining connectedness and query-\ncan be discretized to a roadmap, which is a graph where\nefficiency. The roadmap it built once and then used for any\nverticesarelocationsthattherobotcanoccupy,andtheedges\npath finding query.",
      "size": 908,
      "sentences": 13
    },
    {
      "id": 4,
      "content": "nd query-\ncan be discretized to a roadmap, which is a graph where\nefficiency. The roadmap it built once and then used for any\nverticesarelocationsthattherobotcanoccupy,andtheedges\npath finding query. Therefore, the query-efficiency and path\narepossiblemotionsbetweentheselocations.Asimplegraph\nlengthoftheroadmaparemoreimportantpropertiesthanthe\nsearchinthisroadmapwillresultinafeasiblemotionthrough\ncomputationalefficiencyofitsconstruction.Whilegenerally,\nthe given environment. The quality of the path is measured\nroadmaps are often constructed in high-dimensional spaces,\nby its length and directly determined by the construction of\ne.g.,formanipulators,wefocusthispaperandtheevaluation\nthe roadmap, assuming an optimal graph search algorithm. explicitly on the two-dimensional case that is common for\nThe construction of a roadmap has multiple goals. First,\nmobile robots.",
      "size": 876,
      "sentences": 6
    },
    {
      "id": 5,
      "content": "heevaluation\nthe roadmap, assuming an optimal graph search algorithm. explicitly on the two-dimensional case that is common for\nThe construction of a roadmap has multiple goals. First,\nmobile robots. the roadmap should be well-connected, such that any two\nverticesareconnectedbyapath.Second,theroadmapshould Areactiondiffusionsystemisaclassofpartialdifferential\nallow for efficient queries, i.e. it should have few vertices, equations that model the diffusion of substances and their\nbecause this improves the planning time when searching for reaction with each other. This model can produce spotted\npatterns [1] that fill a given space, see Fig. 2d. It can be\n1RobertBoschGmbH,Stuttgart,Germanyhec2le@bosch.com seen that these spots have a similar density throughout the\n2TUBerlin,Germany{toussaint, hoenig}@tu-berlin.de accessible space.",
      "size": 839,
      "sentences": 8
    },
    {
      "id": 6,
      "content": "e Fig. 2d. It can be\n1RobertBoschGmbH,Stuttgart,Germanyhec2le@bosch.com seen that these spots have a similar density throughout the\n2TUBerlin,Germany{toussaint, hoenig}@tu-berlin.de accessible space. This allows the generation of a roadmap\nThe research was partially funded by the Deutsche Forschungsgemein-\ngraph by using the center points of these spots as vertices\nschaft(DFG,GermanResearchFoundation)-448549715. ©2024IEEE.Personaluseofthismaterialispermitted.Permissionfrom and connecting them locally by edges. To find the edges, we\nIEEE must be obtained for all other uses, in any current or future media, use the Delaunay triangulation [2]. The resulting roadmap is\nincludingreprinting/republishingthismaterialforadvertisingorpromotional\ndepicted in Fig. 1. We call this approach Gray-Scott Model\npurposes,creatingnewcollectiveworks,forresaleorredistributiontoservers\norlists,orreuseofanycopyrightedcomponentofthisworkinotherworks. Based Roadmap (GSRM).",
      "size": 960,
      "sentences": 10
    },
    {
      "id": 7,
      "content": "1. We call this approach Gray-Scott Model\npurposes,creatingnewcollectiveworks,forresaleorredistributiontoservers\norlists,orreuseofanycopyrightedcomponentofthisworkinotherworks. Based Roadmap (GSRM). 4202\ntcO\n41\n]OR.sc[\n1v42011.0142:viXra\n=== 페이지 2 ===\n(a) At the beginning of optimization (b)After10simulationsteps. (c)After500simulationsteps. (d)After10000simulationsteps. afterrandominitialization. Fig. 2. Concentration of substance U over time. The grid size is l=300. Black areas are obstacles, where the concentration is zero. The brighter the\ncolor,thehighertheconcentrationofsubstanceU.Itisvisiblehowthespottedpatternemerges. II. RELATEDWORK to motion planning instead. Rather than constructing a new\nroadmap for each navigation task, we aim to leverage a\nThe basic idea of Probabilistic Roadmaps (PRMs) is to\nroadmap that has been pre-computed and encodes informa-\nsamplerandompointsfromthegivenconfigurationspaceand\ntion about the environment.",
      "size": 953,
      "sentences": 16
    },
    {
      "id": 8,
      "content": "everage a\nThe basic idea of Probabilistic Roadmaps (PRMs) is to\nroadmap that has been pre-computed and encodes informa-\nsamplerandompointsfromthegivenconfigurationspaceand\ntion about the environment. connect these with motions generated by a local planner [3]. Theseroadmapsareconstructedonceandcanthenbequeried It is also common to construct roadmaps using Voronoi\nmultiple times at runtime. These queries can be performed graphs [11]. For example, [12] proposes a method to build\nwith a classic graph search like A* [4] to retrieve viable a roadmap by using so-called local clearance triangulations. motionsthroughthegivenconfigurationspace.Areviewover This method can be used to generate paths with an arbitrary\ndifferent PRMs is given in [5]. clearance. There are also approaches to generate general-\nOneversionthatisasymptoticallyoptimaliscalledPRM* ized Voronoi diagrams for sensor coverage [13]. A method\n[6].",
      "size": 916,
      "sentences": 9
    },
    {
      "id": 9,
      "content": "fferent PRMs is given in [5]. clearance. There are also approaches to generate general-\nOneversionthatisasymptoticallyoptimaliscalledPRM* ized Voronoi diagrams for sensor coverage [13]. A method\n[6]. Here, vertices are connected to more vertices compared that uses Hamilton-Jacobi Skeletons for dynamic topological\ntothetraditionalPRM,toensureasymptoticaloptimality.As SLAM maps is [14]. A similar approach can also be used\na drawback this makes maps denser, which leads to more to generate navigation roadmaps for robot exploration [15]. expensive path finding queries. Since it is not delivering SphereMap [16] builds a roadmap for UAV exploration in\nsparse roadmaps, we do not evaluate against it. subterranean environments by sampling spherical segments.",
      "size": 758,
      "sentences": 9
    },
    {
      "id": 10,
      "content": "ng queries. Since it is not delivering SphereMap [16] builds a roadmap for UAV exploration in\nsparse roadmaps, we do not evaluate against it. subterranean environments by sampling spherical segments. The alternative approach called SPArse Roadmap Span- A roadmap for exploration of mobile robots can be built by\nner (SPARS) maintains near-optimality, but it additionally sampling disks and connecting them with a visibility graph\nenforces the sparsity of the roadmap [7]. It consists of one [17]. We do not consider these methods in our evaluation,\ndense asymptoticallyoptimal roadmap, similarto PRM* and because they are optimized for area coverage of a sensor or\nan additional spanner of that graph that maintains sparsity for exploration, not for path planning. by only adding new points if necessary for path quality Roadmapscanalsobespecificallyconstructedformultiple\nor connectivity. SPARS2 is an extension that improves the agents.",
      "size": 938,
      "sentences": 8
    },
    {
      "id": 11,
      "content": "n, not for path planning. by only adding new points if necessary for path quality Roadmapscanalsobespecificallyconstructedformultiple\nor connectivity. SPARS2 is an extension that improves the agents. For example, by optimization [18] or hierarchical\ncomputational performance of the roadmap construction [8]. segmentation[19].In[20],SPARSisusedtoplantrajectories\nWe evaluate our approach against SPARS2, because we for heterogeneous swarms of different aerial and ground\nconsider it to be the state of the art in terms of sparsity robots.OptimizedRoadmapGraph(ORM),presentedin[18]\nand path length. We will show that our roadmap produces initializes the roadmap poses randomly and optimizes them\nshorter paths with the same number of vertices. by minimizing the length of randomly sampled paths. We\nAnother work constructs a roadmap by focussing only on evaluate GSRM against it in the evaluation section. While\ncritical sections, e.g. doorways [9].",
      "size": 948,
      "sentences": 10
    },
    {
      "id": 12,
      "content": "imizing the length of randomly sampled paths. We\nAnother work constructs a roadmap by focussing only on evaluate GSRM against it in the evaluation section. While\ncritical sections, e.g. doorways [9]. This can also lead to a generally, the multi-agent use case can also be solved by the\nsparse graph. However, we want to construct a graph that roadmaps we propose, it is not the focus of this paper. spans the whole configuration space because we want to use Reactiondiffusionsystemsareaclassofpartialdifferential\nit for the full path of the robot. equations that model the diffusion of substances and their\nRoadmaps can also be built tailored to specific queries. reaction with each other. They can show complex patterns,\nRapidly-exploring Random Tree (RRT), introduced by also called Turing Patterns [21]. One of the most famous\nLaValle [10], involves the incremental growth of a tree-like examples is the Gray-Scott system [22]. When simulated in\nstructure from an initial pose.",
      "size": 980,
      "sentences": 12
    },
    {
      "id": 13,
      "content": "led Turing Patterns [21]. One of the most famous\nLaValle [10], involves the incremental growth of a tree-like examples is the Gray-Scott system [22]. When simulated in\nstructure from an initial pose. This growth is achieved by a grid, it produces spotted patterns [1] as can be seen in\nsystematically sampling potential new poses and verifying Fig. 2.\ntheir connectivity within the environment. In our research, Reaction diffusion systems have been used in robotics\nwe place particular emphasis on the multi-query approach before, for example in robot navigation [23]–[26], controller\n=== 페이지 3 ===\nsynthesis [27], exploration [28], and sensor coverage [29]. The substances are generally called U and V and their\nchemical reaction is defined as\nIII. PROBLEMFORMULATION\nU +2V →3V, (7)\nLet C ⊂ R2 be the free space of the environment. Let\nfree\nV ⊂C free be the vertices of the roadmap. And let E ⊆V×V where x→y means that reactants x yield products y.\nbe the edges of the roadmap.",
      "size": 978,
      "sentences": 10
    },
    {
      "id": 14,
      "content": "(7)\nLet C ⊂ R2 be the free space of the environment. Let\nfree\nV ⊂C free be the vertices of the roadmap. And let E ⊆V×V where x→y means that reactants x yield products y.\nbe the edges of the roadmap. This forms the roadmap G = Additionally, the system models a constant addition of\n⟨V,E⟩. substanceU accordingtothefeedrateAaswellasaconstant\nWe assume planning queries to be defined by a start removal of V according to the kill rate B. The diffusion of\nlocation s ∈ C free and a goal location g ∈ C free . In C free , the substances is quantified by the diffusion parameters D U\nwe define the continuous path π c sg : R → C free from s to g. and D V respectively. We use the vertices closest to s and g as start vertex v s and Foracertainconfigurationoftheaforementionedvariables\ngoal vertex v g , respectively, i.e. A, B, D U , and D V , it produces stable spotted patterns that\nfill a given two-dimensional space [30].",
      "size": 919,
      "sentences": 9
    },
    {
      "id": 15,
      "content": "s and Foracertainconfigurationoftheaforementionedvariables\ngoal vertex v g , respectively, i.e. A, B, D U , and D V , it produces stable spotted patterns that\nfill a given two-dimensional space [30]. v =argmin∥v−s∥\ns\nv∈V\n(1) A. Simulation\nv =argmin∥v−g∥,\ng\nv∈V We simulate this system in a grid of l ×k cells, where\nu ∈ Rl×k and v ∈ Rl×k are the concentration of sub-\nwhere ∥·∥ is the Euclidean distance. The discrete path πsg : {0,1,...,n} → V is defined by stance U and V, respectively. The Gray-Scott Model Based\nπsg(0)=v and πsg(n) d =v , where Roadmap(GSRM)ConstructioninAlgorithm1describesthe\nd s d g\nsimulation of the Gray-Scott system. We will elaborate the\n∀i∈{0,1,...,n−1},⟨πsg(i),πsg(i+1)⟩∈E. (2) algorithm in the following. d d\nIts length is defined as\nAlgorithm 1 Gray-Scott Model Based Roadmap (GSRM)\nn−1 Construction\nlength (cid:0) π d sg(cid:1) := (cid:88) ∥π d sg(i+1)−π d sg(i)∥.",
      "size": 897,
      "sentences": 8
    },
    {
      "id": 16,
      "content": ")⟩∈E. (2) algorithm in the following. d d\nIts length is defined as\nAlgorithm 1 Gray-Scott Model Based Roadmap (GSRM)\nn−1 Construction\nlength (cid:0) π d sg(cid:1) := (cid:88) ∥π d sg(i+1)−π d sg(i)∥. (3) 1: Input: A, B, D U , D V , l, k, C free , u l , u h , v l , v h\ni=0 2: Output: V, E\nLet Πsg be the set of all discrete paths from v to v . Then 3: u←random uniform(l,k,u l ,u h )\nthe sh d ortest path between v and v is defined s as g 4: v ←random uniform(l,k,v l ,v h )\ns g\n5: for [0,N] do\nπˆs d g =argminlength (cid:0) π d sg(cid:1) .",
      "size": 540,
      "sentences": 5
    },
    {
      "id": 17,
      "content": ". Then 3: u←random uniform(l,k,u l ,u h )\nthe sh d ortest path between v and v is defined s as g 4: v ←random uniform(l,k,v l ,v h )\ns g\n5: for [0,N] do\nπˆs d g =argminlength (cid:0) π d sg(cid:1) . (4) 6: ∀(x,y)∈/ C free :u(x,y)←0\nπ d sg∈Πs d g 7: ∀(x,y)∈/ C free :v(x,y)←0\nW len e g d th efi o n f e t t h h e e s le h n o g rt t e h st of di t s h c e re p t a e th pa π t c s h g i w n h C ic fr h ee i a n s cl t u h d e e g s e t o h m e e d tr i i s c - 8 9 : : δ δ δ δ u v t t ← ← D D V U ∆ ∆ v u + − u u v v 2 2 − + ( A A (1 + − B u ) ) v\ntance from s to the first vertex and the distance from the last 10: u←u+ δ δ u t\nvertex to g: 11: v ←v+ δ δ v t\n12: end for (cid:40)\nlength(πsg):=length (cid:0) πˆsg(cid:1) +∥πˆsg(0)−s∥+∥πˆsg(n)−g∥.",
      "size": 746,
      "sentences": 3
    },
    {
      "id": 18,
      "content": "tance from s to the first vertex and the distance from the last 10: u←u+ δ δ u t\nvertex to g: 11: v ←v+ δ δ v t\n12: end for (cid:40)\nlength(πsg):=length (cid:0) πˆsg(cid:1) +∥πˆsg(0)−s∥+∥πˆsg(n)−g∥. 1 if v(x,y)> maxv\nc d d d (5) 13: v threshold ← 0 if v(x,y)≤ ma 2 xv\n2\nThegoaloftheroadmapconstructionistofindaroadmap 14: contours←find contours(v threshold )\nG that minimizes the expected length of the paths while 15: V ←∅\nlimiting the number of vertices in the graph to a maximum 16: for contour∈contours do\nnumber n max : 17: center←average(contour)\n18: V ←V ∪{center}\n(cid:90) 19: end for\nargmin P(s,g)length(πsg) s.t. |V|<n . (6)\nG c max 20: V dummy ←make vertices in obstacles(C free )\n(s,g)∈Cfree×Cfree 21: E ←∅\nIn this paper, we assume P(s,g) to be a uniform distribu- 22: triangles←delaunay(V ∪V dummy )\n23: for (a,b,c)∈triangles do\ntion over C ×C . free free 24: for e∈{(a,b),(b,c),(c,a)} do\nIV.",
      "size": 905,
      "sentences": 5
    },
    {
      "id": 19,
      "content": "ree 21: E ←∅\nIn this paper, we assume P(s,g) to be a uniform distribu- 22: triangles←delaunay(V ∪V dummy )\n23: for (a,b,c)∈triangles do\ntion over C ×C . free free 24: for e∈{(a,b),(b,c),(c,a)} do\nIV. GRAY-SCOTTSYSTEM 25: if free(e,C free ) then\n26: E ←E ∪{e}\nTo generate the roadmap we first need to define vertex\n27: end if\npositions in free space. For this, we use the Gray-Scott\n28: end for\nsystem [22]. The Gray-Scott system is a simplified model of\n29: end for\nachemicalreaction-diffusionsystem.Itmodelstwochemical\n30: return V, E\nsubstances that react with each other and move by diffusion. === 페이지 4 ===\n(a)MapPlain. (b)MapDen. (c)MapRooms. (d)MapSlam. Fig.3. Mapsusedinevaluation.Grayandblackareasareobstacles.Whiteareasarefreespace. Let u and u be the lower and upper bounds of the their centroid. The result is a set of points V that are the\nl h\nconcentration of substance U and v and v be the lower vertices of the roadmap.",
      "size": 934,
      "sentences": 13
    },
    {
      "id": 20,
      "content": "space. Let u and u be the lower and upper bounds of the their centroid. The result is a set of points V that are the\nl h\nconcentration of substance U and v and v be the lower vertices of the roadmap. l h\nand upper bounds of the concentration of substance V. We To avoid artifacts in the following step, we need to addi-\ninitialize u with values between u and u in line 3 and tionally create dummy vertices in line 20. These are vertices\nl h\nv with values between v and v in line 4. The function that are located in the non-free areas of the environment. l h\nrandom uniform(l,k,x,y) returns an l × k matrix filled Iftheywouldnotexist,thefollowingDelaunaytriangulation\nwith values, each independently sampled from the uniform wouldproducealotofsmall,acutetriangleintheareasclose\ndistribution of values between x and y. to obstacles. However, these vertices will not be considered\nAt the borders of the grid and in obstacles, we set both in the final roadmap. concentrations to zero in line 6.",
      "size": 990,
      "sentences": 9
    },
    {
      "id": 21,
      "content": "f values between x and y. to obstacles. However, these vertices will not be considered\nAt the borders of the grid and in obstacles, we set both in the final roadmap. concentrations to zero in line 6. This stops the pattern from\nC. Identifying Edges\nspreadingintotheseregions.Inline8andline9,wecalculate\ntheupdatefortheconcentrationsofthesubstancesaccording ThenextstepistoidentifytheedgesE oftheroadmap.We\nto the following differential equations: usetheDelaunaytriangulation[2]forthispurpose.Theresult\nis a set of triangles calculated in line 22 of Algorithm 1. In\nδu\nδt =D U ∆u−uv2+A(1−u) lines 23 to 29 we add an edge between each pair of vertices\nδv (8) thatareconnectedbyatrianglesideifftheedge(a,b)isfree,\nδt =D V ∆v+uv2−(A+B)v, meaning that the straight line between a and b is a subset of\nC :\nfree\nwhere ∆ is the Laplace operator and all other operations are\nperformed element-wise. free((a,b),C )=(tb+(1−t)a)∈C ,∀t∈[0,1].",
      "size": 929,
      "sentences": 6
    },
    {
      "id": 22,
      "content": ")v, meaning that the straight line between a and b is a subset of\nC :\nfree\nwhere ∆ is the Laplace operator and all other operations are\nperformed element-wise. free((a,b),C )=(tb+(1−t)a)∈C ,∀t∈[0,1]. (9)\nfree free\nTheupdateisperformedinaloop,N times.SeeFig.2for\nan example of the concentration of substance U at different V. EVALUATION\nstates of the simulation. TheGray-ScottModelBasedRoadmap(GSRM)algorithm\nis implemented in C++ using methods from the OpenCV\nB. Identifying Vertices\nlibrary1. The source code is publicly available2. Based on the result of the simulation of the Gray-Scott For the evaluation we rely on four maps with different\nsystem, we have to identify the separate spots in Fig. 2d and properties, that are all located in the unit square [0,1]2:\nuse them as vertices V of the roadmap to produce a result\n• Map Plain in Fig. 3a is an open square with no obsta-\nas shown in Fig. 1. First, we transform the concentration of\ncles.",
      "size": 947,
      "sentences": 10
    },
    {
      "id": 23,
      "content": "nit square [0,1]2:\nuse them as vertices V of the roadmap to produce a result\n• Map Plain in Fig. 3a is an open square with no obsta-\nas shown in Fig. 1. First, we transform the concentration of\ncles. This map demonstrates how the roadmaps allow\nsubstance V into a binary image by thresholding it at half of\nthe agents to move in an open space. the maximum concentration in line 13 of Algorithm 1. Then\n• Map Den in Fig. 3b is from a path-finding benchmark\nwe apply the border following algorithm [31] to separate the\n[32]. Its special property is that it has comparatively\nspots in line 14. The function find contours(x) is called\norganicshapesandweuseittoevaluatetheperformance\non the binary image x and returns a list of unique contours,\nof the roadmaps in a more complex environment. each represented as a list of points. The lists include all the\n• MapRoomsinFig.3cisamapwith4roomsconnected\noutermost points per contour, i.e. those that have the value 1\nby narrow corridors.",
      "size": 978,
      "sentences": 13
    },
    {
      "id": 24,
      "content": "onment. each represented as a list of points. The lists include all the\n• MapRoomsinFig.3cisamapwith4roomsconnected\noutermost points per contour, i.e. those that have the value 1\nby narrow corridors. One of the corridors is curved and\nand at least one neighbor with the value 0.\nwe want to check how and if the roadmaps can connect\nBased on the contours, we estimate the center of mass of\nthrough it. each spot. We take the average over all points of the contour\nin line 17. Here, the method average(contour) takes the 1https://opencv.org/\npointsthatarepartofthecontourofthegivenspotandreturn 2https://ct2034.github.io/miriam/iros2024/\n=== 페이지 5 ===\n• Map Slam in Fig. 3d is a map that was achieved by per vertex. Maps that are more structured, such as Den and\nrunning SLAM on a real robot in a household environ- Rooms, show a larger difference in path length between the\nment.Itwasincludedtoevaluatetheperformanceofthe GSRM algorithm and the other algorithms.",
      "size": 961,
      "sentences": 10
    },
    {
      "id": 25,
      "content": "unning SLAM on a real robot in a household environ- Rooms, show a larger difference in path length between the\nment.Itwasincludedtoevaluatetheperformanceofthe GSRM algorithm and the other algorithms. This is because\nroadmaps in a real-world environment. the GSRM algorithm can generate roadmaps that adapt to\nWe compare the GSRM algorithm with the following the structure of the environment, while especially the 8-\nalgorithms: connected gridmap is not able to do so. Generally, for most\nroadmaps, the path length regret decreases with the number\n• SPArse Roadmap Spanner 2 (SPARS2) [8]. Fig. 4b\nof vertices. The benefit of the GSRM algorithm is that it can\nshows an example of a roadmap generated by SPARS2. generate roadmaps with a low path length even with a low\nNote that we did not find hyperparameters for SPARS2\nnumber of vertices. to generate roadmaps with as small number of vertices\nFor the roadmaps PRM and SPARS2 it is visible that the\nas we achieved with the other algorithms.",
      "size": 989,
      "sentences": 9
    },
    {
      "id": 26,
      "content": "d hyperparameters for SPARS2\nnumber of vertices. to generate roadmaps with as small number of vertices\nFor the roadmaps PRM and SPARS2 it is visible that the\nas we achieved with the other algorithms. regret increases with a higher number of vertices. This is\n• Optimized Roadmap Graph (ORM), a variant of\ncounterintuitive because it is generally expected that higher\n[18] where all edges are undirected. Fig. 4c shows an\nnumbers of vertices lead to shorter paths. But it can be\nexample of a roadmap generated by ORM. explained by taking the success rates into account: If less\n• Probabilistic Roadmap (PRM) [3]. Fig. 4d shows an\npathqueriesaresuccessful,thosethatarestillsuccessfulmay\nexample of a roadmap generated by PRM. We used an\nresult in longer paths. implementationwhereverticesareconnectediftheyare\nwithinadistanceδ ofeachother.Wesetδ suchthatthe\nB. Success Rate\nnumber of edges is the same as for GSRM.",
      "size": 912,
      "sentences": 13
    },
    {
      "id": 27,
      "content": "ed by PRM. We used an\nresult in longer paths. implementationwhereverticesareconnectediftheyare\nwithinadistanceδ ofeachother.Wesetδ suchthatthe\nB. Success Rate\nnumber of edges is the same as for GSRM. • Gridmap, an 8-connected gridmap that has all vertices Weevaluatethesuccessrateoftheroadmapbymeasuring\nand edges removed that are in obstacles. Fig. 4e shows thefractionofsuccessfulpathplanningqueries.Asdiscussed\nan example of a gridmap. before,pathsareplannedbetweentworandompointsinC . free\nForallalgorithms,wehavechosensetsofparameterssuch A path then includes the section from the start point to the\nthatthenumberofverticesissimilaracrossthealgorithms.In first vertex and from the last vertex to the goal point. We\nthe GSRM algorithm, we can control the number of vertices consider a path unsuccessful if there is no path connecting\nby changing the resolution l = k. For the other parameters, the two vertices in the roadmap or if there is no free path\nsee Table I.",
      "size": 970,
      "sentences": 10
    },
    {
      "id": 28,
      "content": "rtices consider a path unsuccessful if there is no path connecting\nby changing the resolution l = k. For the other parameters, the two vertices in the roadmap or if there is no free path\nsee Table I. These values are necessary to produce a robust on the line between the start point and the first vertex or the\nspotted pattern in the simulation. lastvertexandthegoalpoint.Thiswasalsoevaluatedforthe\nFor the evaluation, we approximate the distribution in (6) 100 same pairs of start and goal configurations per roadmap\nnumerically by a 100 discrete pairs of points per configura- on 10 roadmaps per configuration. tion. Fig. 6 shows the success rate of the different algorithms\nfor the path planning. The GSRM algorithm has the highest\nA. Path length\nsuccess rate in all maps. This can be the fact that other\nWe evaluate the quality of the roadmap by measuring the roadmaps have a high likelihood of being disconnected on\npathlengthoftheshortestpathbetweentworandompointsin more structured maps.",
      "size": 994,
      "sentences": 9
    },
    {
      "id": 29,
      "content": "t that other\nWe evaluate the quality of the roadmap by measuring the roadmaps have a high likelihood of being disconnected on\npathlengthoftheshortestpathbetweentworandompointsin more structured maps. It is visible that for most roadmaps,\nC .Forallroadmapconfigurations10roadmapswerebuilt. the success rate increases with the number of vertices. The\nfree\nAllroadmapsareevaluatedwiththesame100pairsofpoints. benefit of the GSRM algorithm is that it can generate\nThe path length is evaluated according to (5). To find the roadmaps with a high success rate even with a low number\nshortest path in the roadmap graph, we use the A* algorithm of vertices. [4] from the Boost library3 with the Euclidean distance as AlsofortheGSRMroadmap,thesuccessrateisnotalways\nheuristic. 1.0. For example on the map Slam with the lowest number\nFig. 5 shows the average path length regret of the shortest of vertices.",
      "size": 895,
      "sentences": 10
    },
    {
      "id": 30,
      "content": "distance as AlsofortheGSRMroadmap,thesuccessrateisnotalways\nheuristic. 1.0. For example on the map Slam with the lowest number\nFig. 5 shows the average path length regret of the shortest of vertices. This can be explained by the roadmap not fully\npathbetweentworandompointsinC fordifferentroadmap expanding to the small areas of the map that are also visible\nfree\ntypesondifferentmaps.Theregretperdatapointiscalculated in 2d. But since we are sampling these for comparability\nby with a fixed number of vertices, these vertices are needed\nregret=(pl −pl )/pl , to cover the wider areas of the map and can’t penetrate into\nother GSRM other\nsmaller areas. where pl refers to the path length produced on the\nother\nrespective other roadmap, while pl refers to the one\nGSRM C. Query Efficiency (Online Runtime)\non our roadmap.",
      "size": 820,
      "sentences": 7
    },
    {
      "id": 31,
      "content": "other GSRM other\nsmaller areas. where pl refers to the path length produced on the\nother\nrespective other roadmap, while pl refers to the one\nGSRM C. Query Efficiency (Online Runtime)\non our roadmap. To evaluate the query efficiency of the roadmap we use\nIt shows that the GSRM algorithm generates roadmaps\nthe metric of visited vertices during the A* path planning\nwithalowerpathlengththantheotheralgorithmsinallmaps\nalgorithm when planning a path between two random points\nexcept Plain. In the map Plain, the 8-connected gridmap\nin C . This metric serves as a comparable measurement\nproducesshorterpaths,becauseitisdenserintermsofedges free\nof efficiency during the query phase, as the path planning\n3https:www.boost.org process is quicker when it expands fewer vertices.",
      "size": 773,
      "sentences": 5
    },
    {
      "id": 32,
      "content": "easurement\nproducesshorterpaths,becauseitisdenserintermsofedges free\nof efficiency during the query phase, as the path planning\n3https:www.boost.org process is quicker when it expands fewer vertices. === 페이지 6 ===\n(a) Example of a roadmap with 290 vertices and (b) Example of a roadmap with 272 vertices and (c) Example of a roadmap with 270 vertices and\n963edgesgeneratedbytheGSRMalgorithm.The 520edgesgeneratedbySPARS2.Thepathhasa 932 edges generated by ORM. The path has a\npath has a length of 1.134, which is the shortest lengthof1.401. lengthof1.381. pathofallevaluatedroadmaps. (d) Example of a roadmap with 282 vertices and (e) Example of a gridmap with 298 vertices and\n1207 edges generated by PRM. The path has a 877edges.Thepathhasalengthof0.413. lengthof0.448. Fig. 4. Examples of roadmaps generated by different algorithms in map Rooms. The red line is an example path.",
      "size": 881,
      "sentences": 12
    },
    {
      "id": 33,
      "content": "edges generated by PRM. The path has a 877edges.Thepathhasalengthof0.413. lengthof0.448. Fig. 4. Examples of roadmaps generated by different algorithms in map Rooms. The red line is an example path. The paths for GSRM, SPARS2, and\nORMsharethesamestartandgoalpoints,whilethepathsforPRMandGridmapalsosharethesamestartandgoalpoints.Thelasttwoexamplesusea\ndifferentpathquery,becausethequeryfromthefirstexamplesarenotsuccessfullycomputablewiththem. TABLEI\nPARAMETERSFORTHEGSRMALGORITHM. Parameter N DU DV A B u l u h v l v h\nValue 10000 0.14 0.06 0.035 0.065 0.8 1.0 0.0 0.2\nIn Fig. 7, we show the average number of visited vertices D. Roadmap Construction (Offline Runtime)\nin A* path planning for different roadmap types on different\nmaps. In comparison to the PRM algorithm, the GSRM The runtime is an important factor for the applicability of\nalgorithm has a similar number of visited vertices to the the roadmap generation algorithm.",
      "size": 933,
      "sentences": 12
    },
    {
      "id": 34,
      "content": "s. In comparison to the PRM algorithm, the GSRM The runtime is an important factor for the applicability of\nalgorithm has a similar number of visited vertices to the the roadmap generation algorithm. We measure the runtime\nlowest number of visited vertices of the other algorithms. on an Intel Core i7-11850H CPU with 32 GB of RAM. The\nIt is visible that there is a positive correlation between the GSRM algorithm is expensive to compute, but its runtime\nnumber of vertices and the number of visited vertices. But never exceeds 10 seconds on any of the maps up to 2000\nthe GSRM algorithm is the lowest for all maps and across vertices. different numbers of vertices. Fig. 8 shows the runtime of the different algorithms for\nthe roadmap generation. Especially, the SPARS2 algorithm\nhas a very small runtime.",
      "size": 806,
      "sentences": 9
    },
    {
      "id": 35,
      "content": "ll maps and across vertices. different numbers of vertices. Fig. 8 shows the runtime of the different algorithms for\nthe roadmap generation. Especially, the SPARS2 algorithm\nhas a very small runtime. The only algorithm that is slower\n=== 페이지 7 ===\n0.25\n0.20\n0.15 0.10\n0.05\n0.00\n400 600 800 1000\nNumber of Vertices\ntergeR\nhtgneL\nhtaP\nMap Plain\n0.3\n0.2\n0.1\n0.0\n400 600 800 1000\nNumber of Vertices\ntergeR\nhtgneL\nhtaP\nMap Den\n0.3\n0.2\n0.1\n0.0\n400 600 800 1000\nNumber of Vertices\ntergeR\nhtgneL\nhtaP\nMap Rooms\n0.3\n0.2\n0.1\n0.0\n400 600 800 1000\nNumber of Vertices\ntergeR\nhtgneL\nhtaP\nMap Slam\nGSRM SPARS2 ORM PRM GridMap8\nFig.5. Averagepathlengthregretoftheshortestpathbetweentworandom\npoints in C free for different roadmap types. The shaded areas show the\nstandard deviation across 100 trials. GSRM provides the shortest paths in\nmapsotherthanPlain.",
      "size": 841,
      "sentences": 9
    },
    {
      "id": 36,
      "content": "oftheshortestpathbetweentworandom\npoints in C free for different roadmap types. The shaded areas show the\nstandard deviation across 100 trials. GSRM provides the shortest paths in\nmapsotherthanPlain. 1.0000\n0.9975\n0.9950\n0.9925\n0.9900\n0.9875\n0.9850\n0.9825\n400 600 800 1000\nNumber of Vertices\netaR\nsseccuS\nMap Plain\n1.0\n0.9\n0.8\n0.7\n0.6\n0.5\n0.4\n400 600 800 1000\nNumber of Vertices\netaR\nsseccuS\nMap Den\n1.0\n0.9\n0.8\n0.7\n0.6\n0.5\n0.4\n0.3\n400 600 800 1000\nNumber of Vertices\netaR\nsseccuS\nMap Rooms\n1.0\n0.9\n0.8\n0.7\n0.6\n0.5\n400 600 800 1000\nNumber of Vertices\netaR\nsseccuS\n140\n120\n100 80\n60\n40\n20\n400 600 800 1000\nNumber of Vertices\nMap Slam\nGSRM SPARS2 ORM PRM GridMap8\nFig. 6. Success rate of the different algorithms for the path planning. A\nsuccess rate of 1.0 means that all 100 paths were successful. It is visible\nthattheGSRMalgorithmhasthehighestsuccessrateinallmaps. than GSRM is the ORM algorithm. VI.",
      "size": 902,
      "sentences": 10
    },
    {
      "id": 37,
      "content": "orithms for the path planning. A\nsuccess rate of 1.0 means that all 100 paths were successful. It is visible\nthattheGSRMalgorithmhasthehighestsuccessrateinallmaps. than GSRM is the ORM algorithm. VI. CONCLUSION\nWe present GSRM, a new algorithm for roadmap gener-\nation for path planning of mobile robots. Algorithmically,\nwe combine reaction-diffusion systems and triangulation. Empirically, GSRM exhibits a good tradeoff between path-\nlength, query-efficiency, and computational effort compared\nto the state-of-the-art. In future work, we plan to extend the\nalgorithm to 3D and to evaluate it in multi-agent scenarios\nwith distance constraints. secitreV\ndetisiV\nMap Plain\n250\n200\n150\n100\n50\n400 600 800 1000\nNumber of Vertices\nsecitreV\ndetisiV\nMap Den\n175\n150 125\n100\n75\n50\n25\n400 600 800 1000\nNumber of Vertices\nsecitreV\ndetisiV\nMap Rooms\n250\n200\n150\n100\n50\n400 600 800 1000\nNumber of Vertices\nsecitreV\ndetisiV\nMap Slam\nGSRM SPARS2 ORM PRM GridMap8\nFig.7.",
      "size": 957,
      "sentences": 10
    },
    {
      "id": 38,
      "content": "50 125\n100\n75\n50\n25\n400 600 800 1000\nNumber of Vertices\nsecitreV\ndetisiV\nMap Rooms\n250\n200\n150\n100\n50\n400 600 800 1000\nNumber of Vertices\nsecitreV\ndetisiV\nMap Slam\nGSRM SPARS2 ORM PRM GridMap8\nFig.7. AveragenumberofvisitedverticesinA*pathplanningfordifferent\nroadmap types. The shaded areas show the standard deviation. GSRM has\nacomparablenumberorsmallestnumberofvisitedvertices. 104\n103\n102\n400 600 800 1000\nNumber of Vertices\n)sm(\nnoitareneG\nemitnuR\nMap Plain\n104\n103\n102\n400 600 800 1000\nNumber of Vertices\n)sm(\nnoitareneG\nemitnuR\nMap Den\n104\n103\n102\n400 600 800 1000\nNumber of Vertices\n)sm(\nnoitareneG\nemitnuR\nMap Rooms\n104\n103\n102\n400 600 800 1000\nNumber of Vertices\n)sm(\nnoitareneG\nemitnuR\nMap Slam\nGSRM SPARS2 ORM PRM GridMap8\nFig.8. Runtimeofthedifferentalgorithmsfortheroadmapgeneration.The\nshaded areas show the standard deviation. GSRM has the second-slowest\nruntime.",
      "size": 879,
      "sentences": 7
    },
    {
      "id": 39,
      "content": "itareneG\nemitnuR\nMap Slam\nGSRM SPARS2 ORM PRM GridMap8\nFig.8. Runtimeofthedifferentalgorithmsfortheroadmapgeneration.The\nshaded areas show the standard deviation. GSRM has the second-slowest\nruntime. REFERENCES\n[1] W.ChenandM.J.Ward,“TheStabilityandDynamicsofLocalized\nSpot Patterns in the Two-Dimensional Gray–Scott Model,” SIAM\nJournal on Applied Dynamical Systems, vol. 10, no. 2, pp. 582–666,\n2011. [2] B.N.Delaunay,“SurlaSphe`reVide,”BulletinofAcademyofSciences\noftheUSSR,vol.7,no.6,1934. [3] L.Kavraki,P.Svestka,J.-C.Latombe,andM.Overmars,“Probabilistic\nroadmapsforpathplanninginhigh-dimensionalconfigurationspaces,”\nIEEE Transactions on Robotics and Automation, vol. 12, no. 4, pp. 566–580,1996. [4] P.Hart,N.Nilsson,andB.Raphael,“AFormalBasisfortheHeuristic\nDeterminationofMinimumCostPaths,”IEEETransactionsonSystems\nScienceandCybernetics,vol.4,no.2,pp.100–107,1968.",
      "size": 874,
      "sentences": 13
    },
    {
      "id": 40,
      "content": "2, no. 4, pp. 566–580,1996. [4] P.Hart,N.Nilsson,andB.Raphael,“AFormalBasisfortheHeuristic\nDeterminationofMinimumCostPaths,”IEEETransactionsonSystems\nScienceandCybernetics,vol.4,no.2,pp.100–107,1968. [표 데이터 감지됨]\n\n=== 페이지 8 ===\n[5] R. Geraerts and M. H. Overmars, “A Comparative Study of Prob- TrafficManagementofMulti-AGVSystemsWithDeadlockPrevention\nabilistic Roadmap Planners,” Springer Tracts in Advanced Robotics, Applied to Industrial Environments,” IEEE Transactions on Automa-\npp.43–57,2004. tionScienceandEngineering,pp.1–15,2023. [6] S.KaramanandE.Frazzoli,“Sampling-basedAlgorithmsforOptimal [20] M.Debord,W.Ho¨nig,andN.Ayanian,“TrajectoryPlanningforHet-\nMotionPlanning,”InternationalJournalofRoboticsResearch,vol.30, erogeneousRobotTeams,”in2018IEEE/RSJInternationalConference\nno.7,2011. onIntelligentRobotsandSystems(IROS),2018,pp.7924–7931.",
      "size": 853,
      "sentences": 8
    },
    {
      "id": 41,
      "content": "ingforHet-\nMotionPlanning,”InternationalJournalofRoboticsResearch,vol.30, erogeneousRobotTeams,”in2018IEEE/RSJInternationalConference\nno.7,2011. onIntelligentRobotsandSystems(IROS),2018,pp.7924–7931. [7] A.Dobson,A.Krontiris,andK.E.Bekris,“Sparseroadmapspanners,” [21] A.M.Turing,“TheChemicalBasisofMorphogenesis,”Philosophical\nSpringerTractsinAdvancedRobotics,vol.86,pp.279–296,2013. TransactionsoftheRoyalSocietyofLondonB,1952. [8] A. Dobson and K. E. Bekris, “Improving sparse roadmap spanners,” [22] P. Gray and S. K. Scott, “Autocatalytic reactions in the isothermal,\nin2013IEEEInternationalConferenceonRoboticsandAutomation, continuous stirred tank reactor: Oscillations and instabilities in the\n2013,pp.4106–4111. systemA+2B→3B;B→C,”ChemicalEngineeringScience,vol.39,\n[9] B.Ichter,E.Schmerling,T.-W.E.Lee,andA.Faust,“LearnedCritical no.6,pp.1087–1097,1984.",
      "size": 863,
      "sentences": 6
    },
    {
      "id": 42,
      "content": "Oscillations and instabilities in the\n2013,pp.4106–4111. systemA+2B→3B;B→C,”ChemicalEngineeringScience,vol.39,\n[9] B.Ichter,E.Schmerling,T.-W.E.Lee,andA.Faust,“LearnedCritical no.6,pp.1087–1097,1984. ProbabilisticRoadmapsforRoboticMotionPlanning,”in2020IEEE\n[23] A. Adamatzky, B. de Lacy Costello, C. Melhuish, and N. Ratcliffe,\nInternational Conference on Robotics and Automation (ICRA), 2020, “ExperimentalReaction–DiffusionChemicalProcessorsforRobotPath\npp.9535–9541. Planning,”JournalofIntelligentandRoboticSystems,vol.37,no.3,\n[10] S. M. Lavalle, “Rapidly-Exploring Random Trees: A New Tool for pp.233–249,2003. PathPlanning,”Theannualresearchreport,1998.",
      "size": 660,
      "sentences": 5
    },
    {
      "id": 43,
      "content": "535–9541. Planning,”JournalofIntelligentandRoboticSystems,vol.37,no.3,\n[10] S. M. Lavalle, “Rapidly-Exploring Random Trees: A New Tool for pp.233–249,2003. PathPlanning,”Theannualresearchreport,1998. [24] A. Adamatzky, P. Arena, A. Basile, R. Carmona-Gala´n, B. D. L.\n[11] H.Choset,S.Walker,K.Eiamsa-Ard,andJ.Burdick,“Sensor-Based\nCostello, L. Fortuna, M. Frasca, and A. Rodr´ıguez-Va´zquez,\nExploration:IncrementalConstructionoftheHierarchicalGeneralized\n“Reaction-Diffusion Navigation Robot Control: From Chemical to\nVoronoi Graph,” The International Journal of Robotics Research, VLSI Analogic Processors,” IEEE Transactions on Circuits and Sys-\nvol.19,no.2,pp.126–148,2000. temsI:RegularPapers,vol.51,no.5,2004. [12] M.Kallmann,“DynamicandRobustLocalClearanceTriangulations,”\n[25] E. Aidman, V. Ivancevic, and A. Jennings, “A coupled reaction-\nACMTransactionsonGraphics,vol.33,no.5,pp.1–17,2014.",
      "size": 899,
      "sentences": 6
    },
    {
      "id": 44,
      "content": "l.51,no.5,2004. [12] M.Kallmann,“DynamicandRobustLocalClearanceTriangulations,”\n[25] E. Aidman, V. Ivancevic, and A. Jennings, “A coupled reaction-\nACMTransactionsonGraphics,vol.33,no.5,pp.1–17,2014. diffusion field model for perception-action cycle with applications to\n[13] E.G.Tsardoulias,A.T.Serafi,M.N.Panourgia,A.Papazoglou,and\nrobotnavigation,”InternationalJournalofIntelligentDefenceSupport\nL.Petrou,“ConstructionofMinimizedTopologicalGraphsonOccu-\nSystems,vol.1,2008. pancyGridMapsBasedonGVDandSensorCoverageInformation,”\n[26] A. Vazquez-Otero, J. Faigl, and A. P. Munuzuri, “Path planning\nJournalofIntelligent&RoboticSystems,vol.75,no.3-4,pp.457–474,\nbasedonreaction-diffusionprocess,”in2012IEEE/RSJInternational\n2014. Conference on Intelligent Robots and Systems. Vilamoura-Algarve,\n[14] J.Modayil,P.Beeson,andB.Kuipers,“Usingthetopologicalskeleton\nPortugal:IEEE,2012,pp.896–901.",
      "size": 890,
      "sentences": 6
    },
    {
      "id": 45,
      "content": "ss,”in2012IEEE/RSJInternational\n2014. Conference on Intelligent Robots and Systems. Vilamoura-Algarve,\n[14] J.Modayil,P.Beeson,andB.Kuipers,“Usingthetopologicalskeleton\nPortugal:IEEE,2012,pp.896–901. for scalable global metrical map-building,” in 2004 IEEE/RSJ Inter-\n[27] K. Dale and P. Husbands, “The evolution of reaction-diffusion con-\nnationalConferenceonIntelligentRobotsandSystems(IROS),vol.2. trollersfor minimallycognitiveagents,” Artificiallife,vol. 16,no.1,\nIEEE,2004,pp.1530–1536. pp.1–19,2010. [15] M. Rezanejad, B. Samari, I. Rekleitis, K. Siddiqi, and G. Dudek,\n“Robustenvironmentmappingusingfluxskeletons,”in2015IEEE/RSJ [28] A. Va´zquez-Otero, J. Faigl, N. Duro, and R. Dormido, “Reaction-\nInternational Conference on Intelligent Robots and Systems (IROS). DiffusionbasedComputationalModelforAutonomousMobileRobot\nIEEE,2015,pp.5700–5705. Exploration of Unknown Environments,” Int. J. Unconv. Comput.,\n2014.",
      "size": 923,
      "sentences": 12
    },
    {
      "id": 46,
      "content": "ference on Intelligent Robots and Systems (IROS). DiffusionbasedComputationalModelforAutonomousMobileRobot\nIEEE,2015,pp.5700–5705. Exploration of Unknown Environments,” Int. J. Unconv. Comput.,\n2014. [16] T. Musil, M. Petrlik, and M. Saska, “SphereMap: Dynamic Multi-\nLayerGraphStructureforRapidSafety-AwareUAVPlanning,”IEEE [29] A. Va´zquez-Otero, J. Faigl, R. Dormido, and N. Duro, “Reaction\nRobotics and Automation Letters, vol. 7, no. 4, pp. 11007–11014, Diffusion Voronoi Diagrams: From Sensors Data to Computing,”\n2022. Sensors,vol.15,no.6,pp.12736–12764,2015. [17] T. Noe¨l, S. Kabbour, A. Lehuger, E. Marchand, and F. Chaumette, [30] J. E. Pearson, “Complex patterns in a simple system,” Science, vol. “Disk-Graph Probabilistic Roadmap: Biased Distance Sampling for 261,no.5118,pp.189–192,1993.",
      "size": 802,
      "sentences": 12
    },
    {
      "id": 47,
      "content": "r, E. Marchand, and F. Chaumette, [30] J. E. Pearson, “Complex patterns in a simple system,” Science, vol. “Disk-Graph Probabilistic Roadmap: Biased Distance Sampling for 261,no.5118,pp.189–192,1993. PathPlanninginaPartiallyUnknownEnvironment,”in2022IEEE/RSJ [31] S. Suzuki and K. be, “Topological structural analysis of digitized\nInternational Conference on Intelligent Robots and Systems (IROS), binaryimagesbyborderfollowing,”ComputerVision,Graphics,and\n2022,pp.5707–5714. ImageProcessing,vol.30,no.1,pp.32–46,1985. [18] C. Henkel and M. Toussaint, “Optimized Directed Roadmap Graph [32] R.Stern,N.Sturtevant,A.Felner,S.Koenig,H.Ma,T.Walker,J.Li,\nforMulti-AgentPathFindingUsingStochasticGradientDescent,”in D. Atzmon, L. Cohen, T. K. S. Kumar, E. Boyarski, and R. Bartak,\nThe35thACM/SIGAPPSymposiumonAppliedComputing(SAC’20), “Multi-AgentPathfinding:Definitions,Variants,andBenchmarks,”in\n2020.",
      "size": 897,
      "sentences": 5
    },
    {
      "id": 48,
      "content": "Descent,”in D. Atzmon, L. Cohen, T. K. S. Kumar, E. Boyarski, and R. Bartak,\nThe35thACM/SIGAPPSymposiumonAppliedComputing(SAC’20), “Multi-AgentPathfinding:Definitions,Variants,andBenchmarks,”in\n2020. ProceedingsoftheInternationalSymposiumonCombinatorialSearch,\n[19] F.Pratissoli,R.Brugioni,N.Battilani,andL.Sabattini,“Hierarchical 2019.",
      "size": 336,
      "sentences": 2
    }
  ]
}