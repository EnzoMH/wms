{
  "source": "ArXiv",
  "filename": "009_Multi-Dimensional_AGV_Path_Planning_in_3D_Warehous.pdf",
  "total_chars": 43255,
  "total_chunks": 60,
  "chunks": [
    {
      "id": 1,
      "content": "=== 페이지 1 ===\nMulti-Dimensional AGV Path Planning in 3D\nWarehouses Using Ant Colony Optimization and\nAdvanced Neural Networks\nBo Zhang1, Xiubo Liang*, Wei Song2, Yulu Chen2\n1 School of Software Technology, Zhejiang University, Ningbo 315100, China\n2 Loctek Ergonomic Technology Co., Ningbo 315100, China\nCorresponding author: Xiubo Liang (xiubo@zju.edu.cn)\nAbstract. Within modern warehouse scenarios, the rapid expansion of e-com-\nmerce and increasingly complex, multi-level storage environments have exposed\nthe limitations of traditional AGV (Automated Guided Vehicle) path planning\nmethods—often reliant on static 2D models and expert-tuned heuristics that\nstruggle to handle dynamic traffic and congestion. Addressing these limitations,\nthis paper introduces a novel AGV path planning approach for 3D warehouse\nenvironments that leverages a hybrid framework combining ACO (Ant Colony\nOptimization) with deep learning models, called NAHACO (Neural Adaptive\nHeuristic Ant Colony Optimization).",
      "size": 996,
      "sentences": 3
    },
    {
      "id": 2,
      "content": "h for 3D warehouse\nenvironments that leverages a hybrid framework combining ACO (Ant Colony\nOptimization) with deep learning models, called NAHACO (Neural Adaptive\nHeuristic Ant Colony Optimization). NAHACO integrates three key innovations:\nfirst, an innovative heuristic algorithm for 3D warehouse cargo modeling using\nmulti-dimensional tensors, which addresses the challenge of achieving superior\nheuristic accuracy; second, integration of a congestion-aware loss function within\nthe ACO framework to adjust path costs based on traffic and capacity constraints,\ncalled CARL (Congestion-Aware Reinforce Loss), enabling dynamic heuristic\ncalibration for optimizing ACO-based path planning; and third, an adaptive at-\ntention mechanism that captures multi-scale spatial, thereby addressing dynamic\nheuristic calibration for further optimization of ACO-based path planning and\nAGV navigation.",
      "size": 890,
      "sentences": 2
    },
    {
      "id": 3,
      "content": "nd third, an adaptive at-\ntention mechanism that captures multi-scale spatial, thereby addressing dynamic\nheuristic calibration for further optimization of ACO-based path planning and\nAGV navigation. NAHACO significantly boosts path planning efficiency, yield-\ning faster computation times and superior performance over both vanilla and\nstate-of-the-art methods, while automatically adapting to warehouse constraints\nfor real-time optimization. NAHACO outperforms state-of-the-art methods. It\nlowers the total cost by up to 24.7% on TSP benchmarks. In warehouse tests,\nNAHACO cuts cost by up to 41.5% and congestion by up to 56.1% compared to\nprevious methods.",
      "size": 660,
      "sentences": 5
    },
    {
      "id": 4,
      "content": "ms state-of-the-art methods. It\nlowers the total cost by up to 24.7% on TSP benchmarks. In warehouse tests,\nNAHACO cuts cost by up to 41.5% and congestion by up to 56.1% compared to\nprevious methods. Keywords: 3D Warehouse Path PlanningA ·nt Colony OptimizationD ·eep\nLearningN ·eural NetworksC ·argo ModelingC ·ongestion MitigationN ·eu-\nral-Enhanced Meta-Heuristic\n1 Introduction\nAGV (Automated Guided Vehicle) is integral to contemporary warehouse automation,\nparticularly as the rapid expansion of e-commerce transforms storage facilities into\n=== 페이지 2 ===\n2 B. Zhang and X. Liang\nsophisticated, multi-level 3D environments where operational efficiency, energy con-\nservation, and safety are paramount. In such complex settings, AGV not only facilitates\nseamless goods transportation but also serve as crucial nodes in a larger, interconnected\ndigital ecosystem, driving real-time decision making and system-wide optimization.",
      "size": 931,
      "sentences": 5
    },
    {
      "id": 5,
      "content": ", AGV not only facilitates\nseamless goods transportation but also serve as crucial nodes in a larger, interconnected\ndigital ecosystem, driving real-time decision making and system-wide optimization. Among the advanced computational strategies adopted to enhance AGV navigation,\nACO (Ant Colony Optimization) stands out for its bio-inspired approach that effec-\ntively navigates vast, dynamic search spaces by mimicking the collective foraging be-\nhavior of ants. This adaptable algorithm has been widely embraced for AGV path plan-\nning, as it offers a promising means to address the intricacies of multi-level 3D ware-\nhouse configurations and overcome the limitations of static, heuristic-based methods. Despite the historical success of traditional path planning methodologies for AGV,\ntheir reliance on static 2D representations and expert-tuned heuristics has rendered\nthem increasingly inadequate for the demands of modern, multi-level 3D warehouse\nenvironments.",
      "size": 969,
      "sentences": 4
    },
    {
      "id": 6,
      "content": "hodologies for AGV,\ntheir reliance on static 2D representations and expert-tuned heuristics has rendered\nthem increasingly inadequate for the demands of modern, multi-level 3D warehouse\nenvironments. These vanilla methods are challenged by the need to navigate complex\nspatial configurations that involve dynamic obstacles, variable cargo attributes—such\nas differing dimensions, weights, and specialized handling requirements—and the fluc-\ntuating patterns of real-time congestion. As a result, the inability of traditional models\nto capture such multifaceted interactions leads to suboptimal routing decisions, dimin-\nished operational efficiency, and elevated safety risks in high-traffic conditions. Alt-\nhough classical implementations of ACO have demonstrated a degree of robustness and\nadaptability in controlled scenarios, they often struggle to address the nuanced chal-\nlenges presented by intricate 3D environments.",
      "size": 926,
      "sentences": 4
    },
    {
      "id": 7,
      "content": "plementations of ACO have demonstrated a degree of robustness and\nadaptability in controlled scenarios, they often struggle to address the nuanced chal-\nlenges presented by intricate 3D environments. In response, recent research efforts have\nfocused on integrating advanced deep learning models with ACO, with several studies\nproposing hybrid approaches that incorporate deep reinforcement learning to enhance\npath planning capabilities in multi-task AGV scenarios [36, 38, 39]. Despite these\npromising advances, such integrations tend to incur significant computational costs and\nstill fall short of fully mitigating AGV congestion issues or comprehensively account-\ning for the diverse characteristics of cargo in 3D spaces. Consequently, there remains a\npressing need for further innovation to develop more resilient and scalable solutions\nthat can effectively meet the complex operational requirements of contemporary ware-\nhouse systems.",
      "size": 942,
      "sentences": 4
    },
    {
      "id": 8,
      "content": "ere remains a\npressing need for further innovation to develop more resilient and scalable solutions\nthat can effectively meet the complex operational requirements of contemporary ware-\nhouse systems. To address these critical challenges, this paper introduces an advanced hybrid frame-\nwork that synergistically combines an enhanced ACO algorithm with state-of-the-art\ndeep learning techniques to revolutionize AGV path planning in sophisticated 3D ware-\nhouse environments. Central to our methodology is the development of an innovative\nheuristic algorithm that leverages multi-dimensional tensor representations, thereby en-\nabling the detailed modeling of intricate spatial and physical cargo characteristics—\nranging from precise dimensions and weight distributions to specific handling require-\nments.",
      "size": 806,
      "sentences": 3
    },
    {
      "id": 9,
      "content": "ations, thereby en-\nabling the detailed modeling of intricate spatial and physical cargo characteristics—\nranging from precise dimensions and weight distributions to specific handling require-\nments. This refined modeling strategy not only enhances the granularity of the path\nplanning process but also facilitates a comprehensive reflection of the dynamic envi-\nronmental constraints prevalent in modern warehouses. Moreover, our framework in-\ncorporates a dynamically adaptive loss function within the ACO paradigm, called\nCARL (Congestion-Aware Reinforce Loss), which empowers the algorithm to adjust\npath costs in real time by effectively accounting for fluctuating traffic densities and\n=== 페이지 3 ===\nMulti-Dimensional AGV Path Planning 3\ncapacity limitations, thus mitigating congestion and ensuring more optimal routing de-\ncisions.",
      "size": 839,
      "sentences": 3
    },
    {
      "id": 10,
      "content": "ly accounting for fluctuating traffic densities and\n=== 페이지 3 ===\nMulti-Dimensional AGV Path Planning 3\ncapacity limitations, thus mitigating congestion and ensuring more optimal routing de-\ncisions. It employs a neural network framework that integrates GNN (Graph Neural\nNetwork) for spatial feature extraction, an attention-based model for static-dynamic\nfeature fusion module, and an MLP (Multi-Layer Perceptron) for heuristic decoding. This architecture enables the dynamic generation of heuristic information, replacing\nstatic expert-defined heuristics with adaptive, data-driven insights. By leveraging real-\ntime warehouse data, the system refines heuristic values to enhance ACO-based path\nplanning, optimizing AGV navigation in complex 3D environments. Our approach in-\ntroduces a customized fusion mechanism that improves spatiotemporal feature extrac-\ntion and a novel loss function designed to optimize the congestion level of AGV paths.",
      "size": 949,
      "sentences": 5
    },
    {
      "id": 11,
      "content": "vironments. Our approach in-\ntroduces a customized fusion mechanism that improves spatiotemporal feature extrac-\ntion and a novel loss function designed to optimize the congestion level of AGV paths. This allows for more precise predictions of essential operating parameters, significantly\nimproving decision accuracy in dynamic warehouse environments. Loctek’s tests con-\nfirm our NAHACO method. NAHACO reduces transportation cost by up to 47% com-\npared to state-of-the-art methods. It lowers congestion by up to 41% relative to current\nsolutions. These results prove that NAHACO is a scalable and efficient solution for\nmodern warehouse systems. 2 Related Work\n2.1 Neural Combinatorial Optimization\nNCO (Neural Combinatorial Optimization) combines neural networks with reinforce-\nment learning to solve the CO (Combinatorial Optimization) problem.",
      "size": 850,
      "sentences": 8
    },
    {
      "id": 12,
      "content": "Related Work\n2.1 Neural Combinatorial Optimization\nNCO (Neural Combinatorial Optimization) combines neural networks with reinforce-\nment learning to solve the CO (Combinatorial Optimization) problem. In the first cate-\ngory, end-to-end methods are used to acquire knowledge about the construction of au-\ntoregressive solutions or heatmap generation, which are then used in the subsequent\nsampling-based decoding process. In this area, recent progress has been reflected in\nmultiple directions. Specifically, some neural architectures have achieved higher levels\nof alignment [1, 2, 3, 4, 5]. Training paradigms have been upgraded to more complex\nlevels [6, 7, 8]. Solution pipelines have evolved into more advanced forms [9, 10, 11]. The scope of applications has also expanded to a wider range [12, 13, 14]. End-to-end\nmethods are indeed very efficient. Bello et al.",
      "size": 867,
      "sentences": 9
    },
    {
      "id": 13,
      "content": "tion pipelines have evolved into more advanced forms [9, 10, 11]. The scope of applications has also expanded to a wider range [12, 13, 14]. End-to-end\nmethods are indeed very efficient. Bello et al. [15] proposed NCO, which was first\napplied to the TSP (Travelling Salesman Problem), demonstrating the potential of\nlearned solutions over traditional heuristics. Subsequent studies, including Garmendia\net al. [16] and Liu et al. [17], evaluated its effectiveness and limitations, particularly for\nthe TSP, while Verdù et al. [18] improved the results using simulation-guided beam\nsearch. NCO has also been tailored for real-world applications such as online vehicle\nrouting [19], and Wu et al. [20] conducted a comprehensive survey of its application to\nthe vehicle routing problem. Efforts to improve scalability by Luo et al. [21, 22] and\nothers have addressed large-scale CO instances, though Garmendia et al. [23] caution\nagainst context-specific weaknesses.",
      "size": 963,
      "sentences": 14
    },
    {
      "id": 14,
      "content": "le routing problem. Efforts to improve scalability by Luo et al. [21, 22] and\nothers have addressed large-scale CO instances, though Garmendia et al. [23] caution\nagainst context-specific weaknesses. === 페이지 4 ===\n4 B.Zhang and X. Liang\n2.2 Cargo Loading Optimization in Warehouse Environments and Ant\nColony Optimization for AGV Picking Path Planning\nRecent cutting-edge cargo loading optimization heuristics combine greedy and tabu\nsearch algorithms with 3D loading constraints for periodic pickup and delivery, such as\nthe greedy-tabu dual heuristic algorithm by Xu et al. [24], while Ananno et al. [25]\nproposed a multi-heuristic packing algorithm that combines constructive heuristics and\ngenetic optimization to improve stability, space utilization, and practical applicability,\nthereby improving driving efficiency, load stability, and reducing material waste.",
      "size": 867,
      "sentences": 7
    },
    {
      "id": 15,
      "content": "nstructive heuristics and\ngenetic optimization to improve stability, space utilization, and practical applicability,\nthereby improving driving efficiency, load stability, and reducing material waste. In parallel, ACO, inspired by the foraging behavior of real ant colonies, has emerged\nas an efficient metaheuristic for approximate optimization. ACO is a metaheuristic for\napproximate optimization, first proposed by Dorigo et al. [26]. ACO employs indirect\ncommunication through pheromone trails to converge on near-optimal solutions for CO\nproblems, as detailed in surveys by Blum et al. [27] and Dorigo et al. [28]. Foundational\noverviews by Dorigo et al. [29] and Fidanova et al. [30] elucidate its mechanics. Recent\ndevelopments include optimized parameter tuning for TSP [31], bi-heuristic ap-\nproaches [32], and applications in feature selection [33], multi-objective optimization\n[34, 35], and path planning [36].",
      "size": 921,
      "sentences": 11
    },
    {
      "id": 16,
      "content": "evelopments include optimized parameter tuning for TSP [31], bi-heuristic ap-\nproaches [32], and applications in feature selection [33], multi-objective optimization\n[34, 35], and path planning [36]. 3 Preliminary on Ant Colony Optimization for AGV Path\nPlanning\n3.1 Combinatorial Optimization Problem Formulation\nAGV path planning problem can be formulated as a combinatorial optimization task,\nwhere the goal is to determine the most efficient path for the AGV from its starting\npoint to its destination within a 3D warehouse. This requires considering various fac-\ntors, such as distance, cargo attributes, and dynamic obstacles. Warehouse is represented as a graph 𝐺 = (𝑉, 𝐸), where 𝑉 denotes the set of vertices,\neach representing a specific location or waypoint within the warehouse. 𝑉 = {𝑣 ,…,\n0\n𝑣 }, 𝑣 ={𝑥 ,…,𝑥 }, D represents the dimension. 𝐸 represents the set of paths con-\n𝑛 𝑖 0 𝐷\nnecting these vertices. Each edge 𝑒 ∈𝐸 has an associated cost 𝐶(𝑒).",
      "size": 960,
      "sentences": 7
    },
    {
      "id": 17,
      "content": "ypoint within the warehouse. 𝑉 = {𝑣 ,…,\n0\n𝑣 }, 𝑣 ={𝑥 ,…,𝑥 }, D represents the dimension. 𝐸 represents the set of paths con-\n𝑛 𝑖 0 𝐷\nnecting these vertices. Each edge 𝑒 ∈𝐸 has an associated cost 𝐶(𝑒). The objective is\nto find a path 𝑃𝑎𝑡ℎ= {𝑣 ,…, 𝑣 } from the starting position of the AGV to the destina-\n0 𝑖\ntion vertex 𝑣 that minimizes the total cost:\n𝑖\n𝐶𝑜𝑠𝑡 (P)=∑𝑖,𝑗∈𝑃 𝐶(𝑒 ), (1)\n𝑡𝑜𝑡𝑎𝑙 𝑖,𝑗=𝑣0,𝑣1 𝑖,𝑗\nwhere 𝐶𝑜𝑠𝑡 (P) is the total cost of path, 𝐶(𝑒 ) is the cost associated with the edge\n𝑡𝑜𝑡𝑎𝑙 𝑖,𝑗\nbetween vertices 𝑣 and 𝑣 and 𝑃 = {𝑣 ,…, 𝑣 } is the chosen path from the starting\n𝑖 𝑗 0 𝑖\nposition to the destination. === 페이지 5 ===\nMulti-Dimensional AGV Path Planning 5\n3.2 Ant Colony Optimization\nA Combinatorial Optimization Problem model defines a pheromone model in the con-\ntext of ACO. Ant Colony Optimization is a nature-inspired algorithm that emulates the\nforaging behavior of ants to solve combinatorial optimization problems.",
      "size": 932,
      "sentences": 7
    },
    {
      "id": 18,
      "content": "del defines a pheromone model in the con-\ntext of ACO. Ant Colony Optimization is a nature-inspired algorithm that emulates the\nforaging behavior of ants to solve combinatorial optimization problems. In the context\nof AGV path planning within 3D warehouse environments, ACO offers an efficient\napproach to navigate complex spaces efficiently. Pheromone Model in Ant Colony Optimization. ACO simulates the behavior of a colony of ants searching for the shortest path from a\nsource to a destination. Each ant starts at the source location and iteratively constructs\na solution by moving through the graph based on two factors:\n• Pheromone levels: Ants are attracted to edges with higher pheromone concentra-\ntions, which signify favorable paths. • Heuristic information: In path planning, this can be the inverse of the distance or\nsome other property defined by expert, which encourages ants to choose shorter\npaths.",
      "size": 915,
      "sentences": 7
    },
    {
      "id": 19,
      "content": "ch signify favorable paths. • Heuristic information: In path planning, this can be the inverse of the distance or\nsome other property defined by expert, which encourages ants to choose shorter\npaths. In the context of ACO, generally speaking, a pheromone model can be regarded as\na construction graph where decision variables serve as nodes and solution components\nact as edges. Each solution component 𝑠 , which represents the assignment of the\n𝑖,𝑗\nvalue 𝑣 to the decision variable 𝑣, is linked to its pheromone trail τ and heuristic\n𝑖 𝑗 𝑖,𝑗\nmeasure η . Both τ and η suggest the potential of including 𝑣 in a solution. Usu-\n𝑖,𝑗 𝑖,𝑗 𝑖,𝑗 𝑖,𝑗\nally, ACO initializes the pheromone trails uniformly and updates them iteratively, while\nthe heuristic measures are predefined and kept constant. Each ant constructs a path through the graph by probabilistically selecting edges\nbased on pheromone levels and heuristic information.",
      "size": 921,
      "sentences": 7
    },
    {
      "id": 20,
      "content": ", while\nthe heuristic measures are predefined and kept constant. Each ant constructs a path through the graph by probabilistically selecting edges\nbased on pheromone levels and heuristic information. The probability 𝑝𝑡 that an ant at\n𝑖,𝑗\nvertex 𝑣 selects edge 𝑒 leading to vertex 𝑣 at time 𝑡 is given by:\n𝑖 𝑖,𝑗 𝑗\n(τ𝑡 )α⋅(η𝑡 )β\n𝑝𝑡 = 𝑖,𝑗 𝑖,𝑗 , (2)\n𝑖,𝑗 ∑𝑘 ∈ 𝑁𝑖 (τ 𝑖 𝑡 ,𝑘 )α⋅(η 𝑖 𝑡 ,𝑘 )β\nhere τ𝑡 is the pheromone level on edge 𝑒 at time 𝑡. η is the heuristic information\n𝑖,𝑗 𝑖,𝑗 𝑖,𝑗\npredefined by expert for edge 𝑒 , which is usually the inverse of the cost 𝑐 . α and β\n𝑖,𝑗 𝑖,𝑗\nare parameters controlling the relative influence of pheromone and heuristic infor-\nmation, respectively. 𝑁 is the set of neighboring vertices to 𝑣 . 𝑖 𝑖\nPheromone Update Mechanism. After all ants have completed their paths, the pheromone levels are updated to reinforce\nsuccessful routes and diminish less favorable ones.",
      "size": 896,
      "sentences": 7
    },
    {
      "id": 21,
      "content": "eighboring vertices to 𝑣 . 𝑖 𝑖\nPheromone Update Mechanism. After all ants have completed their paths, the pheromone levels are updated to reinforce\nsuccessful routes and diminish less favorable ones. The pheromone update rule is:\nτ𝑡+1 =(1− ρ)τ𝑡 + Δτ𝑡 , (3)\n𝑖,𝑗 𝑖,𝑗 𝑖,𝑗\n=== 페이지 6 ===\n6 B.Zhang and X. Liang\nwhere ρ is pheromone evaporation rate, 0 < ρ < 1. Δτ𝑡 is pheromone deposited on 𝑒\n𝑖,𝑗 𝑖,𝑗\nat time 𝑡, typically calculated as:\nΔτ𝑡 = ∑𝑚 Δτ𝑘 , (4)\n𝑖,𝑗 𝑘=1 𝑖,𝑗\nhere 𝑚 is the number of ants, and Δτ𝑘 is the pheromone contribution from ant, based\n𝑖,𝑗\non the quality of the solution it found. If ant 𝑘 traversed edge 𝑒 in its solution, the\n𝑖,𝑗\npheromone update is proportional to the inverse of the path cost 𝐶𝑜𝑠𝑡(𝑘) of ant 𝑘:\nΔτ𝑘 = 𝑄 , (5)\n𝑖,𝑗 𝐶𝑜𝑠𝑡(𝑘)\nwhere Q is a constant, which is set to 1 in this paper.",
      "size": 807,
      "sentences": 6
    },
    {
      "id": 22,
      "content": "ed edge 𝑒 in its solution, the\n𝑖,𝑗\npheromone update is proportional to the inverse of the path cost 𝐶𝑜𝑠𝑡(𝑘) of ant 𝑘:\nΔτ𝑘 = 𝑄 , (5)\n𝑖,𝑗 𝐶𝑜𝑠𝑡(𝑘)\nwhere Q is a constant, which is set to 1 in this paper. In the context of three-dimensional warehouse environments, the AGV pathfinding\nproblem constitutes a combinatorial optimization challenge that can be effectively rep-\nresented as a graph, with the objective of minimizing path costs. ACO draws inspiration\nfrom the foraging behavior of real ants, wherein artificial agents probabilistically con-\nstruct solutions based on pheromone trails and heuristic information. Upon completion\nof their respective paths, pheromone levels are updated to reinforce favorable routes,\nthereby guiding subsequent iterations toward optimal solutions. 4 Methodology\nAGV path planning problem in 3D warehouses involves determining optimal paths for\nautomated vehicles navigating complex environments.",
      "size": 930,
      "sentences": 5
    },
    {
      "id": 23,
      "content": "ing subsequent iterations toward optimal solutions. 4 Methodology\nAGV path planning problem in 3D warehouses involves determining optimal paths for\nautomated vehicles navigating complex environments. These environments include\nmulti-dimensional cargo properties, dynamic congestion, and a range of operational\nconstraints. To address these challenges, we propose a hybrid methodology combining\nAnt Colony Optimization and Deep Learning techniques, specifically GNN, and MLP. Our approach is designed to provide more adaptive, accurate, and efficient path plan-\nning solutions by leveraging both the strengths of optimization algorithms and deep\nlearning models. 4.1 Cargo Modeling and Path Representation\nWe introduce a multi-dimensional tensor-based cargo modeling system that captures\nthe diverse characteristics of cargo in 3D warehouses. These dimensions include the\ncoordinates, height, size, weight, special handling requirements, and congestion levels.",
      "size": 959,
      "sentences": 7
    },
    {
      "id": 24,
      "content": "eling system that captures\nthe diverse characteristics of cargo in 3D warehouses. These dimensions include the\ncoordinates, height, size, weight, special handling requirements, and congestion levels. Cargo properties are represented as tensors, with each entry encapsulating a specific\naspect of the warehouse's operational state. This modeling approach enables us to better\nunderstand the spatial and functional relationships among different cargo items, which\nimproves the accuracy of AGV path planning. Let 𝐶𝑎𝑟𝑔𝑜 represent the multi-dimensional tensor for cargo i where:\n𝑖\n𝐶𝑎𝑟𝑔𝑜 =[𝑥 ,𝑦,𝑧,𝑠𝑖𝑧𝑒,𝑤𝑒𝑖𝑔ℎ𝑡,𝑠𝑝𝑒𝑐𝑖𝑎𝑙 ], (6)\n𝑖 𝑖 𝑖 𝑖 𝑖 𝑖 𝑖\n=== 페이지 7 ===\nMulti-Dimensional AGV Path Planning 7\nhere 𝑥 ,𝑦,𝑧 are the spatial coordinates in a three-dimensional space, 𝑠𝑖𝑧𝑒 is the phys-\n𝑖 𝑖 𝑖 𝑖\nical size. 𝑤𝑒𝑖𝑔ℎ𝑡 is the mass, and 𝑠𝑝𝑒𝑐𝑖𝑎𝑙 accounts for special characteristics like fra-\n𝑖 𝑖\ngility, perishability or hazardous nature.",
      "size": 916,
      "sentences": 6
    },
    {
      "id": 25,
      "content": "inates in a three-dimensional space, 𝑠𝑖𝑧𝑒 is the phys-\n𝑖 𝑖 𝑖 𝑖\nical size. 𝑤𝑒𝑖𝑔ℎ𝑡 is the mass, and 𝑠𝑝𝑒𝑐𝑖𝑎𝑙 accounts for special characteristics like fra-\n𝑖 𝑖\ngility, perishability or hazardous nature. 4.2 Heuristic Function for ACO Integration\nHeuristic function in the ACO framework for cargo in 3D warehouses is designed to\nguide the optimization process based on the cargo and environmental factors. The heu-\nristic matrix 𝐻 provides guidance by estimating the suitability of each potential move\nfor the AGV. The heuristic is derived from both the cargo characteristics and congestion\nfactors. The heuristic matrix 𝐻 in this paper is calculated as follows:\n𝐻 =\n𝛾⋅𝑠𝑐𝑖,𝑗\n, (7)\n𝑖,𝑗 𝑑𝑖,𝑗+α⋅𝑠𝑖𝑧𝑒𝑖,𝑗+β⋅𝑤𝑡𝑖,𝑗\nhere 𝑠𝑖𝑧𝑒 , 𝑤𝑡 , 𝑠𝑐 denote the combined the size, weight, special characteristics of\n𝑖,𝑗 𝑖,𝑗 𝑖,𝑗\n𝑣 and 𝑣. α, β and 𝛾 are weighting factors that determine the influence of each attribute\n𝑖 𝑗\non the total cost.",
      "size": 912,
      "sentences": 6
    },
    {
      "id": 26,
      "content": ", 𝑤𝑡 , 𝑠𝑐 denote the combined the size, weight, special characteristics of\n𝑖,𝑗 𝑖,𝑗 𝑖,𝑗\n𝑣 and 𝑣. α, β and 𝛾 are weighting factors that determine the influence of each attribute\n𝑖 𝑗\non the total cost. 𝑑 is the Manhattan distance between the locations of cargo items 𝑣\n𝑖,𝑗 𝑖\nand 𝑣:\n𝑗\n𝑑 = ∑𝐷 |𝑣 − 𝑣 |, (8)\n𝑖,𝑗 𝑘=1 𝑖,𝑘 𝑗,𝑘\nhere D is the number of dimensions of the space and is taken as 3 in this paper. 4.3 Integration of Ant Colony Optimization\nAs described in Section 3.2, ACO is used to explore and exploit the search space of\npossible AGV paths. The main goal of the ACO framework is to minimize the path\ncost. In this paper, we propose an innovative algorithm for the path cost of goods in 3D\nwarehouses, introducing the attributes of the goods themselves and the congestion cost. We define the total cost 𝐶𝑜𝑠𝑡 (P) of the 3D warehouse pickup path P as follows:\n𝑡𝑜𝑡𝑎𝑙\n1\n𝐶𝑜𝑠𝑡 (P)=∑ +Con , (9)\n𝑡𝑜𝑡𝑎𝑙 𝑖,𝑗 ∈𝑃 𝐻𝑖,𝑗 𝑖,𝑗\nCon =∑ 𝑡 ⋅δ(\n𝑡𝑐𝑖,𝑗\n), (10)\n𝑖,𝑗 𝑖,𝑗 ∈𝑃 𝑖,𝑗 𝑐𝑎𝑝𝑖,𝑗\nhere 𝐻 is the same as Eq.(7).",
      "size": 992,
      "sentences": 7
    },
    {
      "id": 27,
      "content": "he total cost 𝐶𝑜𝑠𝑡 (P) of the 3D warehouse pickup path P as follows:\n𝑡𝑜𝑡𝑎𝑙\n1\n𝐶𝑜𝑠𝑡 (P)=∑ +Con , (9)\n𝑡𝑜𝑡𝑎𝑙 𝑖,𝑗 ∈𝑃 𝐻𝑖,𝑗 𝑖,𝑗\nCon =∑ 𝑡 ⋅δ(\n𝑡𝑐𝑖,𝑗\n), (10)\n𝑖,𝑗 𝑖,𝑗 ∈𝑃 𝑖,𝑗 𝑐𝑎𝑝𝑖,𝑗\nhere 𝐻 is the same as Eq.(7). 𝑡 is the free flow travel time from cargo 𝑣 to 𝑣. 𝑡𝑐\n𝑖,𝑗 𝑖,𝑗 𝑖 𝑗 𝑖,𝑗\nis the current traffic flow. 𝑐𝑎𝑝 is the capacity of the edge, which is set to 20 in this\n𝑖,𝑗\narticle based on Loctek overseas warehouse. δ is adjustment parameter, which is taken\nas 0.5 in this paper. After several generations of iterations, the ACO algorithm moves ants in the ware-\nhouse map based on pheromone values and heuristic information. The pheromone up-\ndate equation is shown in Eq. (3), where the cost calculation is illustrated in Eq.(9). === 페이지 8 ===\n8 B.Zhang and X. Liang\n4.4 Adaptive Heuristic Modeling for Enhanced Path Optimization in\n3D Warehouse Logistics\nFig.1. The schematic diagrams of NAHACO.",
      "size": 888,
      "sentences": 9
    },
    {
      "id": 28,
      "content": "lation is illustrated in Eq.(9). === 페이지 8 ===\n8 B.Zhang and X. Liang\n4.4 Adaptive Heuristic Modeling for Enhanced Path Optimization in\n3D Warehouse Logistics\nFig.1. The schematic diagrams of NAHACO. It begins with data input and preprocessing, fol-\nlowed by spatial feature extraction via graph-based node and edge embeddings. A static-dynamic\nfeature fusion module then projects refined embeddings into separate subspaces, applies an at-\ntention mechanism, and integrates both static and dynamic information. Cargo modeling intro-\nduces size, weight, and special handling attributes into the ACO framework, and a decoding MLP\ngenerates path heuristics. Finally, the CARL loss function guides backpropagation to produce\noptimized AGV paths, ensuring efficient and accurate warehouse logistics. To enhance the ACO-based path planning process, we integrate neural networks to dy-\nnamically generate heuristic information.",
      "size": 920,
      "sentences": 8
    },
    {
      "id": 29,
      "content": "optimized AGV paths, ensuring efficient and accurate warehouse logistics. To enhance the ACO-based path planning process, we integrate neural networks to dy-\nnamically generate heuristic information. Traditionally, path planning systems often\nrely on expert-defined heuristics, which are static and limited in their ability to adapt to\nreal-time environmental changes. In contrast, our approach leverages deep learning\nmodels to learn the heuristic information from the warehouse's operational data, ena-\nbling the system to adapt and generate more effective heuristics. The structure we pro-\npose is shown in Fig.1, which is called NAHACO in this paper. Spatial Feature Extraction Module\nAt the core of our model is a deep learning module that leverages several GNN com-\nponents to extract and refine spatial relationships from the warehouse layout.",
      "size": 850,
      "sentences": 6
    },
    {
      "id": 30,
      "content": "er. Spatial Feature Extraction Module\nAt the core of our model is a deep learning module that leverages several GNN com-\nponents to extract and refine spatial relationships from the warehouse layout. The mod-\nule comprises distinct pipelines for node and edge feature processing, followed by iter-\native refinement layers that integrate neighborhood information including cargo attrib-\nutes, spatial distribution information of nodes in the warehouse, and edge features\nthrough a mean aggregation mechanism. Initially, raw node features 𝑥 and edge attributes 𝑎 are projected into higher-di-\n𝑖 𝑖\nmensional spaces using linear transformations followed by a non-linear activation Silu. === 페이지 9 ===\nMulti-Dimensional AGV Path Planning 9\nSilu mitigates the issue of dead neurons, ensuring that the network captures the intricate\nspatial relationships inherent in the warehouse layout.",
      "size": 881,
      "sentences": 5
    },
    {
      "id": 31,
      "content": "=== 페이지 9 ===\nMulti-Dimensional AGV Path Planning 9\nSilu mitigates the issue of dead neurons, ensuring that the network captures the intricate\nspatial relationships inherent in the warehouse layout. And it is defined as:\n𝑥(0) =𝑆𝑖𝑙𝑢(𝑊(0)𝑥 ) , (11)\n𝑖 𝑣 𝑖\n𝜔(0) =𝑆𝑖𝑙𝑢(𝑊(0)𝑎 ) , (12)\n𝑖𝑗 𝑒 𝑖𝑗\nhere, x represents node features, a represents edge attributes, ω is edge embeddings,\n𝑊 is weight matric to edge embedding and 𝑊 is weight matric of the node. 𝑒 𝑣\nOver multiple layers (𝑙 =1,…,12), the node features and edge embeddings are it-\neratively refined. For the node branch, four parallel linear mappings are applied to the\nprevious node representation:\n𝑥̂ (𝑙) =𝑊(𝑙)𝑥 (𝑙−1) , 𝑥̂ (𝑙) =𝑊(𝑙)𝑥 (𝑙−1) , 𝑥̂ (𝑙) =𝑊(𝑙)𝑥 (𝑙−1) , 𝑥̂ (𝑙) =𝑊(𝑙)𝑥 (𝑙−1) , (13)\n𝑖1 𝑣1 𝑖1 𝑖2 𝑣2 𝑖2 𝑖3 𝑣3 𝑖3 𝑖4 𝑣4 𝑖4\nneighbor aggregation then consolidates information from neighboring nodes. It plays a\nkey role here.",
      "size": 878,
      "sentences": 5
    },
    {
      "id": 32,
      "content": "𝑊(𝑙)𝑥 (𝑙−1) , 𝑥̂ (𝑙) =𝑊(𝑙)𝑥 (𝑙−1) , 𝑥̂ (𝑙) =𝑊(𝑙)𝑥 (𝑙−1) , (13)\n𝑖1 𝑣1 𝑖1 𝑖2 𝑣2 𝑖2 𝑖3 𝑣3 𝑖3 𝑖4 𝑣4 𝑖4\nneighbor aggregation then consolidates information from neighboring nodes. It plays a\nkey role here. A dedicated neighbor aggregation function collects information from the\nneighboring nodes by weighting each neighbor’s contribution with the transformed\nedge features:\n𝐴𝑔𝑔(𝑙) = 1 ({(𝜔(𝑙−1)𝑥 (𝑙) ):𝑗∈𝑁(𝑖)}) , (14)\n𝑖 |𝑁(𝑖)| 𝑖𝑗 𝑖\nhere, 𝑁(𝑖) and |𝑁(𝑖)| represent the set of all neighboring nodes of node I and the car-\ndinality of this set. This aggregated message is then combined with the intermediate\nnode representation and normalized:\n𝑥(𝑙) =𝑥(𝑙−1)+𝑆𝑖𝑙𝑢(𝐵𝑁(𝑥 (𝑙) +𝐴𝑔𝑔(𝑙))) , (15)\n𝑖 𝑖 𝑖 𝑖\nhere, BN is batch normalization. In parallel, edge branch updates each edge embedding\nby incorporating information from the nodes at its endpoints. Update is given by:\n𝜔(𝑙) =𝜔(𝑙−1)+𝑆𝑖𝑙𝑢(𝐵𝑁(𝑊(𝑙)𝜔(𝑙−1)+𝑊(𝑙)𝑥(𝑙−1)+𝑊(𝑙)𝑥(𝑙−1))) .",
      "size": 912,
      "sentences": 6
    },
    {
      "id": 33,
      "content": "ation. In parallel, edge branch updates each edge embedding\nby incorporating information from the nodes at its endpoints. Update is given by:\n𝜔(𝑙) =𝜔(𝑙−1)+𝑆𝑖𝑙𝑢(𝐵𝑁(𝑊(𝑙)𝜔(𝑙−1)+𝑊(𝑙)𝑥(𝑙−1)+𝑊(𝑙)𝑥(𝑙−1))) . (16)\n𝑖𝑗 𝑖𝑗 𝑒 𝑖𝑗 𝑣𝑖 𝑖 𝑣𝑗 𝑗\nOverall, our module systematically extracts spatial features by iteratively refining node\nand edge representations through linear transformations, neighbor aggregation, and\nbatch normalization, thereby capturing the nuanced spatial topology of the warehouse\nenvironment. Static-Dynamic Feature Fusion Module with Attribute-Aware Attention\nTo comprehensively capture the dynamic characteristics of warehouse operations, our\nmodule incorporates an attention mechanism into its temporal dependency modeling\ncomponent. First, a series of spatiotemporal features are extracted from the warehouse\ndata.",
      "size": 822,
      "sentences": 6
    },
    {
      "id": 34,
      "content": "warehouse operations, our\nmodule incorporates an attention mechanism into its temporal dependency modeling\ncomponent. First, a series of spatiotemporal features are extracted from the warehouse\ndata. These features encompass both static spatial features, which signify the intrinsic\nlayout and connectivity of the warehouse, and dynamic temporal features, such as con-\ngestion data and real-time location. === 페이지 10 ===\n10 B. Zhang and X. Liang\nThese extracted features are combined into two unified spatiotemporal feature ma-\ntrixes 𝑆𝐹𝑀 and 𝑆𝐹𝑀 . To enable the attention mechanism to model temporal depend-\n𝑠 𝑑\nencies effectively, we map these features into a common subspace using linear trans-\nformations:\n𝑄 = 𝑆𝐹𝑀 ⋅𝑊𝑠, 𝑄 = 𝑆𝐹𝑀 ⋅𝑊𝑑, (17)\n𝑠 𝑠 𝑑 𝑑\nhere, 𝑊𝑠and 𝑊𝑠 are the learned weight matrices that project the spatiotemporal fea-\ntures into corresponding subspaces. 𝑄 captures static attributes and 𝑄 captures dy-\n𝑠 𝑑\nnamic attributes.",
      "size": 938,
      "sentences": 6
    },
    {
      "id": 35,
      "content": ")\n𝑠 𝑠 𝑑 𝑑\nhere, 𝑊𝑠and 𝑊𝑠 are the learned weight matrices that project the spatiotemporal fea-\ntures into corresponding subspaces. 𝑄 captures static attributes and 𝑄 captures dy-\n𝑠 𝑑\nnamic attributes. To model temporal dependencies between these two modalities, we\nmeasure the compatibility between 𝑄 and 𝑄 using RBF (Gaussian Radial Basis Func-\n𝑠 𝑑\ntion) kernel. For target ith cargo, the similarity score is computed as:\n𝑒 =exp(−\n‖𝑄𝑠 𝑖−𝑄𝑠 𝑗 ‖ 2\n+𝑇 ),𝑗∈𝑁(𝑖), (18)\n𝑖,𝑗 2σ2 𝑖,𝑗\nwhere σ is a scaling parameter and 𝑇 is a learnable bias term that captures multi-scale\n𝑖,𝑗\ntemporal context. 𝑁(𝑖) is the set of nodes considered for aggregation for node 𝑖. The\nraw scores 𝑒 are normalized over the neighborhood 𝑁(𝑖)to yield the attention\n𝑖,𝑗\nweights:\n𝐴 =\n𝑒𝑖,𝑗\n, (19)\n𝑖,𝑗 ∑𝑗∈𝑁(𝑖)𝑒𝑖,𝑗\nthe output representation for each node is computed solely from the static features.",
      "size": 860,
      "sentences": 6
    },
    {
      "id": 36,
      "content": "res 𝑒 are normalized over the neighborhood 𝑁(𝑖)to yield the attention\n𝑖,𝑗\nweights:\n𝐴 =\n𝑒𝑖,𝑗\n, (19)\n𝑖,𝑗 ∑𝑗∈𝑁(𝑖)𝑒𝑖,𝑗\nthe output representation for each node is computed solely from the static features. In\nparticular, the final output is given by:\n𝑂 =𝑄𝑖 +∑ 𝐴 ⋅𝑄𝑗, (20)\n𝑖 𝑑 𝑗∈𝑁(𝑖) 𝑖,𝑗 𝑠\nin effect, it integrates the temporal dynamics via 𝑄 with complementary spatial con-\n𝑑\ntext via 𝑄 , enabling the model to capture multi-scale spatiotemporal dependencies\n𝑠\nmore effectively. A subsequent squeeze operation is then applied to restore the repre-\nsentation back to the original input dimensions. Thus, the final enriched representations\nencapsulate a comprehensive blend of the warehouse’s static spatial structure and dy-\nnamic operational variations including congestion data while maintaining the required\ndimensional consistency through the squeeze operation. Heuristic Decoding for Path Optimization.",
      "size": 900,
      "sentences": 5
    },
    {
      "id": 37,
      "content": "tructure and dy-\nnamic operational variations including congestion data while maintaining the required\ndimensional consistency through the squeeze operation. Heuristic Decoding for Path Optimization. Processed embeddings from the temporal modeling module are fed into a decoding\nMLP implemented as a fully connected network that transforms these intermediate rep-\nresentations into heuristic values for path optimization. This decoding MLP is com-\nposed of several layers where each hidden layer performs a linear transformation fol-\nlowed by the Silu activation function, and the final layer applies a Sigmoid activation\nto ensure the outputs are properly scaled for integration into the ACO algorithm. Let ℎ(𝑖) denotes the input embedding. It is computed as follows:\n=== 페이지 11 ===\nMulti-Dimensional AGV Path Planning 11\nℎ(𝑖) =Silu(𝑊(𝑖)ℎ(𝑖−1)+𝑏(𝑖)) i=1, …, L-1, (21)\n𝑦̂(𝑖) =Sigmoid(𝑊(𝐿)ℎ(𝐿−1)+𝑏(𝐿)), (22)\nhere 𝑊(𝑖) and 𝑏(𝑖) are the weights and biases of the ith layer. L is the num of layers.",
      "size": 994,
      "sentences": 7
    },
    {
      "id": 38,
      "content": "sional AGV Path Planning 11\nℎ(𝑖) =Silu(𝑊(𝑖)ℎ(𝑖−1)+𝑏(𝑖)) i=1, …, L-1, (21)\n𝑦̂(𝑖) =Sigmoid(𝑊(𝐿)ℎ(𝐿−1)+𝑏(𝐿)), (22)\nhere 𝑊(𝑖) and 𝑏(𝑖) are the weights and biases of the ith layer. L is the num of layers. Hidden layers employ the Silu activation function because it has self-gating properties\nthat allow it to adaptively scale inputs, which is especially beneficial for capturing sub-\ntle patterns in the processed embeddings from the temporal module. The final layer uses\nthe Sigmoid activation function to restrict its output values to the range [0, 1]. The\noutput size is designed to match the number of heuristic predictions for each edge in\nthe graph, enabling dynamically generated heuristics that adapt to fluctuating ware-\nhouse conditions and enhance AGV navigation efficiency in complex environments. 4.5 CARL Loss Function\nTraining objective adjusts network parameters to reduce path cost and congestion,\nthereby boosting AGV performance in warehouse operations.",
      "size": 968,
      "sentences": 6
    },
    {
      "id": 39,
      "content": "efficiency in complex environments. 4.5 CARL Loss Function\nTraining objective adjusts network parameters to reduce path cost and congestion,\nthereby boosting AGV performance in warehouse operations. CARL loss function\nserves as training loss, derived from interactions between network-generated heuristics\nand ACO path cost computation. Model training is conducted in Loctek testing ware-\nhouse environment, using random selection of goods. Loss function follows this equa-\ntion:\nL = 1 ∑𝑛𝑎𝑛𝑡𝑠|𝐶𝑜𝑠𝑡 − 𝐶𝑜𝑠𝑡 |⋅ ln (1+𝑝𝑖) , (23)\n𝑛𝑎𝑛𝑡𝑠 𝑖=1 𝑖 𝑎𝑣𝑔 ln (2)\nwhere 𝐶𝑜𝑠𝑡 is the path cost for the ant i, which is calculated in the same way as Eq.(9). 𝑖\n𝐶𝑜𝑠𝑡 is the mean cost over all ants. 𝑝 is the probability of selecting the path taken\n𝑎𝑣𝑔 𝑖\nby the ant i, computed by the ACO algorithm. 𝑛 is the number of ants in the system. 𝑎𝑛𝑡𝑠\nlogarithmic scaling factor\nln (1+𝑝𝑖)\nmodulates this deviation based on the probability of\nln (2)\nselecting the corresponding path.",
      "size": 951,
      "sentences": 9
    },
    {
      "id": 40,
      "content": "ed by the ACO algorithm. 𝑛 is the number of ants in the system. 𝑎𝑛𝑡𝑠\nlogarithmic scaling factor\nln (1+𝑝𝑖)\nmodulates this deviation based on the probability of\nln (2)\nselecting the corresponding path. This logarithmic term is used to stabilize the influence\nof ants with very low selection probabilities, ensuring that the contribution of each ant\nto the overall loss remains bounded. The goal of training is to adjust the network pa-\nrameters to reduce the path costs, as this will improve the overall performance of the\nAGV in the warehouse. 5 Experimentation\n5.1 Experimental Setup\nIn this section, we present the experimental setup used to evaluate the proposed multi-\ndimensional AGV path planning approach that combines ACO with advanced neural\nnetworks in a 3D warehouse environment.",
      "size": 789,
      "sentences": 6
    },
    {
      "id": 41,
      "content": "s section, we present the experimental setup used to evaluate the proposed multi-\ndimensional AGV path planning approach that combines ACO with advanced neural\nnetworks in a 3D warehouse environment. Our approach leverages a tensor-based mod-\neling system to handle cargo characteristics, a deep learning model designed in Section\n4 for parameter prediction, and a congestion-aware loss function in ACO for dynamic\npath cost adjustment. Our goal is to demonstrate the effectiveness of our approach in\n=== 페이지 12 ===\n12 B. Zhang and X. Liang\noptimizing AGV path planning in a real-world large-scale warehouse instance while\nconsidering key factors such as congestion, cargo size, weight, and special handling\nrequirements. The number of training epochs is 100000 with the CARL loss function. Our experiments were conducted on a workstation equipped with one Intel i7-\n10875H CPU, one Nvidia GeForce 2080 SUPER GPU and Ubuntu 20.04.",
      "size": 930,
      "sentences": 5
    },
    {
      "id": 42,
      "content": "r of training epochs is 100000 with the CARL loss function. Our experiments were conducted on a workstation equipped with one Intel i7-\n10875H CPU, one Nvidia GeForce 2080 SUPER GPU and Ubuntu 20.04. This hard-\nware setup ensured efficient computation during both the deep learning model training\nand the iterative optimization processes of the ACO framework. We compare the proposed model with traditional and state-of-the-art path planning\nmethods in two phases: (1) simulating a large-scale TSP (Traveling Salesman Problem)\nfor baseline comparison; (2) applying it to a real warehouse instance with various op-\nerating conditions under the Loctek test warehouse. The evaluation is based on the fol-\nlowing four key performance indicators:\n• Time: This indicator records the computational time in seconds required to reach\na solution. It is crucial for assessing the efficiency and scalability of the approach,\nparticularly in large-scale or real-time applications.",
      "size": 967,
      "sentences": 6
    },
    {
      "id": 43,
      "content": "ords the computational time in seconds required to reach\na solution. It is crucial for assessing the efficiency and scalability of the approach,\nparticularly in large-scale or real-time applications. • Cost (Objective Function Value): This indicator represents the computed total\ncost of the solution. In our TSP simulation, it is defined in the same way as in\nEq.(12). A lower total cost indicates a more optimal solution. • Gap: This metric measures the percentage deviation of the obtained total cost\nfrom the LKH-3 solution, which is used as the baseline. • Con: A lower Congestion value indicates a more effective routing strategy that\nminimizes traffic bottlenecks in the warehouse environment, which is defined in\nthe same way as in Eq.(10). 5.2 Large-Scale TSP Simulation\nIn the first stage, we evaluate NAHACO on large-scale TSP benchmarks using datasets\nwith 200, 500, and 1000 nodes generated with PyTorch.",
      "size": 917,
      "sentences": 8
    },
    {
      "id": 44,
      "content": "in\nthe same way as in Eq.(10). 5.2 Large-Scale TSP Simulation\nIn the first stage, we evaluate NAHACO on large-scale TSP benchmarks using datasets\nwith 200, 500, and 1000 nodes generated with PyTorch. In this controlled environment,\neach node represents a key waypoint with attributes defined in our model. The objective\nis to reduce the overall path cost by considering both travel distance and congestion\npenalties with δ set to 0. Tab.1. Comparison results on TSP200, TSP500, and TSP1000 (with LKH-3 as the\nbaseline solution). Method\nT\nT\nS\nim\nP\ne\n2 00\nCost Gap\nT\nT\nS\nim\nP\ne\n5 00\nCost Gap\nT\nT\nS\nim\nP\ne\n1 000\nCost Gap\nLKH-3 [37] 1.3s 7 . 3 - 2.8s 17.3 - 12.1s 24.3 -\nACO 3.2s 1 3 . 4 6.4% 8.6s 20.4 7.6% 56.3s 24.9 9.2%\nSO [11] 7.4s 8 . 8 1.9% 15.3s 16.8 3.1% 27.4s 23.8 3.7%\nRRT-ACO [38] 1.3s 8 . 4 1.7% 4.6s 15.4 2.8% 13.2s 24.3 4.2%\nDeepACO [39] 1.6s 7 . 7 1.2% 4.3s 17.7 2.8% 11.5s 23.9 3.8%\nDIMES [8] 4.5s 7.8 1.3% 10.3s 17.8 2.7% 31.7s 24.4 4.7%\nNAHACO 1.3s 5 .",
      "size": 967,
      "sentences": 12
    },
    {
      "id": 45,
      "content": ".8 3.7%\nRRT-ACO [38] 1.3s 8 . 4 1.7% 4.6s 15.4 2.8% 13.2s 24.3 4.2%\nDeepACO [39] 1.6s 7 . 7 1.2% 4.3s 17.7 2.8% 11.5s 23.9 3.8%\nDIMES [8] 4.5s 7.8 1.3% 10.3s 17.8 2.7% 31.7s 24.4 4.7%\nNAHACO 1.3s 5 . 5 1.2% 5.4s 13.3 2.5% 12.8s 21.5 3.7%\n[표 데이터 감지됨]\n\n=== 페이지 13 ===\nMulti-Dimensional AGV Path Planning 13\nTab.1 compares NAHACO with several methods. For TSP200, LKH-3 achieves a total\ncost of 7.3 in 1.3 seconds, while NAHACO achieves a cost of 5.5 in 1.3 seconds, out-\nperforming both ACO and DIMES [8]. In the TSP500 scenario, NAHACO records a\ntotal cost of 13.3 in 5.4 seconds, which is lower than those obtained by ACO and\nDIMES and has a shorter runtime than SO [11]. For TSP1000, NAHACO achieves a\ncost of 21.5 in 12.8 seconds. This is a 11.5% reduction in cost compared to LKH-3’s\n[37] cost of 24.3 and shows a 60% improvement in the optimality gap over ACO. Results show that NAHACO maintains high solution quality while offering compet-\nitive computational efficiency.",
      "size": 976,
      "sentences": 9
    },
    {
      "id": 46,
      "content": "o LKH-3’s\n[37] cost of 24.3 and shows a 60% improvement in the optimality gap over ACO. Results show that NAHACO maintains high solution quality while offering compet-\nitive computational efficiency. Its runtime grows linearly with problem size, unlike\nACO’s exponential increase. Overall, NAHACO demonstrates efficient performance\nand scalability for large-scale TSP optimization, effectively integrating deep learning\nto enhance heuristic search strategies. 5.3 Real-World Warehouse Instance\nTab.2. Comparison results on the Loctek test warehouse with 100, 200 and 500 cargos\nrandomly selected on the shelves. Method\n1\nT\n0\nim\n0\ne\nC argos\nC ost Con\n2\nT\n0\nim\n0\ne\nC argos\nC ost Con\n5\nT\n0\nim\n0\ne\nC argos\nCost Con\nLKH-3 [37] 2.1s 1 9.3 29.4 5.3s 27.4 39.4 14.7s 37.7 47.3\nACO 7.6s 3 5 .9 59.7 32.6s 48.1 62.7 73.8s 65.2 89.1\nSO [11] 10.4s 1 6 .",
      "size": 841,
      "sentences": 7
    },
    {
      "id": 47,
      "content": "ost Con\n2\nT\n0\nim\n0\ne\nC argos\nC ost Con\n5\nT\n0\nim\n0\ne\nC argos\nCost Con\nLKH-3 [37] 2.1s 1 9.3 29.4 5.3s 27.4 39.4 14.7s 37.7 47.3\nACO 7.6s 3 5 .9 59.7 32.6s 48.1 62.7 73.8s 65.2 89.1\nSO [11] 10.4s 1 6 . 8 23.1 23.1s 28.3 34.6 52.6s 41.5 64.2\nRRT-ACO [38] 3.4s 1 4 .7 27.2 9.3s 25.2 39.2 23.8s 34.1 48.7\nDeepACO [39] 3.7s 1 4 .1 31.3 7.6s 25.8 41.6 19.5s 34.9 49.6\nDIMES [8] 8.9s 15.6 30.4 21.4s 34.2 40.1 51.7s 39.6 50.6\nNAHACO 4.3s 1 0.3 15.3 13.4s 18.9 23.4 35.4s 24.3 28.2\nIn the second stage, we test our method on a real warehouse instance from the Loctek\ntest facility. In this experiment, we create a comprehensive 3D warehouse environment\nwith 100, 200, and 500 cargos selected at random from the shelves. Each cargo is rep-\nresented by a multi-dimensional tensor as defined in Eq.(6). The cost function is spec-\nified in Eq. (12) and the congestion function in Eq. (10), with δ set to 0.2. The results are shown in Tab.2.",
      "size": 927,
      "sentences": 8
    },
    {
      "id": 48,
      "content": "-\nresented by a multi-dimensional tensor as defined in Eq.(6). The cost function is spec-\nified in Eq. (12) and the congestion function in Eq. (10), with δ set to 0.2. The results are shown in Tab.2. For 100 cargos, NAHACO reduces cost by 39%\ncompared to SO and lowers congestion by 34%. For 200 cargos, NAHACO achieves a\n25% lower cost than RRT-ACO [38] and cuts congestion by 63% compared to ACO. In the 500-cargo scenario, NAHACO records the lowest cost and congestion values\namong all methods. It reduces cost by 39% relative to DIMES and improves congestion\nby 68% compared to ACO, even though its computation time is slightly longer. In con-\ntrast, ACO suffers from exponential increases in congestion as cargo count grows, and\nSO’s cost rises by 147% when scaling from 100 to 500 cargos. While NAHACO maintains high solution quality and scalability for large-scale TSP\noptimization, its runtime is slightly slower than that of RRT-ACO and DeepACO [39]\ndue to several intertwined factors.",
      "size": 994,
      "sentences": 11
    },
    {
      "id": 49,
      "content": "While NAHACO maintains high solution quality and scalability for large-scale TSP\noptimization, its runtime is slightly slower than that of RRT-ACO and DeepACO [39]\ndue to several intertwined factors. Its integration of deep learning for dynamic heuristic\nadjustment, although beneficial for enhancing search strategies, introduces additional\n[표 데이터 감지됨]\n\n=== 페이지 14 ===\n14 B. Zhang and X. Liang\ncomputational overhead not present in the lighter reinforcement learning frameworks\nof RRT-ACO and DeepACO. Moreover, the hybrid architecture of NAHACO, which\ncombines traditional ant colony optimization with deep neural network components,\nnecessitates extra processing steps and a more complex coordination of algorithms. This intricate balance between exploration and exploitation, along with the continuous\nadaptation of heuristic parameters based on learned insights, results in a marginal in-\ncrease in runtime.",
      "size": 912,
      "sentences": 4
    },
    {
      "id": 50,
      "content": "thms. This intricate balance between exploration and exploitation, along with the continuous\nadaptation of heuristic parameters based on learned insights, results in a marginal in-\ncrease in runtime. Despite this, the trade-off ensures efficient performance and consist-\nently high-quality solutions for complex, large-scale TSP instances. Fig.2.Training CARL loss curves over 100 epochs. Training CARL loss curves is shown in Fig.2. NAHACO achieves the lowest final\nCARL loss among all compared methods, indicating its superior solution quality. Fur-\nthermore, it converges faster and more stably than other approaches, ensuring efficient\nperformance for large-scale warehouse picking route planning. These results demon-\nstrate that NAHACO adapts well to dynamic warehouse environments and efficiently\noptimizes resource allocation, making it an efficient solution for real-world warehouse\nautomation.",
      "size": 903,
      "sentences": 8
    },
    {
      "id": 51,
      "content": "ese results demon-\nstrate that NAHACO adapts well to dynamic warehouse environments and efficiently\noptimizes resource allocation, making it an efficient solution for real-world warehouse\nautomation. 6 Conclusion\nIn this work, we introduce NAHACO, a multi-dimensional AGV path planning frame-\nwork merging Ant Colony Optimization with neural networks. It employs a tensor sys-\ntem for cargo attributes and a hybrid architecture with Spatial Feature Extraction, Tem-\nporal Dependency Modeling, and Heuristic Decoding modules to enable accurate ACO\nparameter prediction and real-time path cost adjustments. In the TSP benchmarks,\nNAHACO consistently achieves lower total costs compared to LKH-3 and other meth-\nods—with cost reductions ranging from approximately 11.5% to nearly 25%. In\nLoctek’s warehouse tests, NAHACO cuts cost by up to 47% and reduces congestion by\nup to 48% compared to LKH-3.",
      "size": 895,
      "sentences": 5
    },
    {
      "id": 52,
      "content": "other meth-\nods—with cost reductions ranging from approximately 11.5% to nearly 25%. In\nLoctek’s warehouse tests, NAHACO cuts cost by up to 47% and reduces congestion by\nup to 48% compared to LKH-3. NAHACO also maintains competitive computational\n=== 페이지 15 ===\nMulti-Dimensional AGV Path Planning 15\nefficiency. These results prove that NAHACO is effective solution for complex logis-\ntics. Acknowledgments. This work was partly supported by Ningbo Youth Science and Technology\nInnovation Leading Talent Project (2024QL044). The authors gratefully acknowledge the sup-\nport and resources provided by Zhejiang University, whose academic environment and research\ninfrastructure have been instrumental in the development and execution of this work. We also\nextend our sincere thanks to Loctek for granting access to their test warehouse facilities, provid-\ning critical datasets, and offering valuable industrial insights that have significantly enriched our\nexperimental evaluations.",
      "size": 982,
      "sentences": 8
    },
    {
      "id": 53,
      "content": "Loctek for granting access to their test warehouse facilities, provid-\ning critical datasets, and offering valuable industrial insights that have significantly enriched our\nexperimental evaluations. Their contributions have been vital to the success of this research. References\n1. O. Vinyals, M. Fortunato, and N. Jaitly. Pointer networks. Advances in neural information\nprocessing systems, 28, 2015. 2. M. Nazari, A. Oroojlooy, L. Snyder, and M. Takác. Reinforcement learning for solving the\nvehicle routing problem. Advances in neural information processing systems, 31, 2018\n3. L. Xin, W. Song, Z. Cao, and J. Zhang. Multi-decoder attention model with embedding\nglimpse for solving vehicle routing problems. In Proceedings of the AAAI Conference on\nArtificial Intelligence, volume 35, pages 12042–12049, 2021. 4. X. Bresson and T. Laurent. The transformer network for the traveling salesman problem. arXiv preprint arXiv:2103.03012, 2021\n5.",
      "size": 944,
      "sentences": 17
    },
    {
      "id": 54,
      "content": "ence on\nArtificial Intelligence, volume 35, pages 12042–12049, 2021. 4. X. Bresson and T. Laurent. The transformer network for the traveling salesman problem. arXiv preprint arXiv:2103.03012, 2021\n5. Y. Jin, Y. Ding, X. Pan, K. He, L. Zhao, T. Qin, L. Song, and J. Bian. Pointerformer: Deep\nreinforced multi-pointer transformer for the traveling salesman problem. arXiv preprint\narXiv:2304.09407, 2023. 6. Wang, C., Yu, Z., McAleer, S., Yu, T., & Yang, Y. (2023). Asp: Learn a universal neural\nsolver! arXiv preprint arXiv:2303.00466. 7. Bi, J., Ma, Y., Wang, J., Cao, Z., Chen, J., Sun, Y., & Chee, Y. M. (2022). Learning gener-\nalizable models for vehicle routing problems via knowledge distillation. arXiv preprint\narXiv:2210.07686. 8. Qiu, R., Sun, Z., & Yang, Y. (2022). Dimes: A differentiable meta solver for combinatorial\noptimization problems. arXiv preprint arXiv:2210.04123. 9. Choo, J., Kwon, Y.-D., Kim, J., Jae, J., Hottung, A., Tierney, K., & Gwon, Y. (2022).",
      "size": 974,
      "sentences": 25
    },
    {
      "id": 55,
      "content": "Dimes: A differentiable meta solver for combinatorial\noptimization problems. arXiv preprint arXiv:2210.04123. 9. Choo, J., Kwon, Y.-D., Kim, J., Jae, J., Hottung, A., Tierney, K., & Gwon, Y. (2022). Sim-\nulation - guided beam search for neural combinatorial optimization. arXiv preprint\narXiv:2207.06190. 10. Sun, Z., & Yang, Y. (2023). Difusco: Graph - based diffusion solvers for combinatorial\noptimization. arXiv preprint arXiv:2302.08224. 11. Cheng, H., Zheng, H., Cong, Y., Jiang, W., & Pu, S. (2023). Select and optimize: Learning\nto solve large - scale tsp instances. In International Conference on Artificial Intelligence and\nStatistics (pp. 1219–1231). PMLR. 12. Zong, Z., Zheng, M., Li, Y., & Jin, D. (2022). Mapdp: Cooperative multi - agent reinforce-\nment learning to solve pickup and delivery problems. In Proceedings of the AAAI Confer-\nence on Artificial Intelligence (Vol. 36, pp. 9980–9988). 13. Chen, J., Zong, Z., Zhuang, Y., Yan, H., Jin, D., & Li, Y. (2022).",
      "size": 979,
      "sentences": 27
    },
    {
      "id": 56,
      "content": "solve pickup and delivery problems. In Proceedings of the AAAI Confer-\nence on Artificial Intelligence (Vol. 36, pp. 9980–9988). 13. Chen, J., Zong, Z., Zhuang, Y., Yan, H., Jin, D., & Li, Y. (2022). Reinforcement learning\nfor practical express systems with mixed deliveries and pickups. ACM Transactions on\nKnowledge Discovery from Data (TKDD). 14. Fan, M., Wu, Y., Liao, T., Cao, Z., Guo, H., Sartoretti, G., & Wu, G. (2022). Deep rein-\nforcement learning for uav routing in the presence of multiple charging stations. IEEE Trans-\nactions on Vehicular Technology. === 페이지 16 ===\n16 B. Zhang and X. Liang\n15. Bello, I., et al. (2016). Neural combinatorial optimization with reinforcement learning. arXiv:1611.09940. 16. Garmendia, A. I., et al. (2022). Neural combinatorial optimization: a new player in the field. arXiv:2205.01356. 17. Liu, S., et al. (2023). How good is neural combinatorial optimization? IEEE Comput. Intell. Mag., 18(3), 14–28. 18.",
      "size": 953,
      "sentences": 31
    },
    {
      "id": 57,
      "content": "Neural combinatorial optimization: a new player in the field. arXiv:2205.01356. 17. Liu, S., et al. (2023). How good is neural combinatorial optimization? IEEE Comput. Intell. Mag., 18(3), 14–28. 18. Verdù, F. J. C., Castelli, L., & Bortolussi, L. (2024). Scaling Combinatorial Optimization\nNeural Improvement Heuristics with Online Search and Adaptation. arXiv preprint\narXiv:2412.10163. 19. James, J. Q., et al. (2019). Online vehicle routing with neural combinatorial optimization. IEEE Trans. Intell. Transp. Syst., 20(10), 3806–3817. 20. Wu, X., et al. (2024). Neural combinatorial optimization algorithms for vehicle routing: a\nsurvey. arXiv:2406.00415. 21. Luo, F., et al. (2024). Self - improved learning for scalable neural combinatorial optimiza-\ntion. arXiv:2403.19561. 22. Luo, F., et al. (2023). Neural combinatorial optimization with heavy decoder. In NeurIPS\n(Vol. 36, pp. 8845–8864). 23. Garmendia, A. I., et al. (2024).",
      "size": 936,
      "sentences": 41
    },
    {
      "id": 58,
      "content": "inatorial optimiza-\ntion. arXiv:2403.19561. 22. Luo, F., et al. (2023). Neural combinatorial optimization with heavy decoder. In NeurIPS\n(Vol. 36, pp. 8845–8864). 23. Garmendia, A. I., et al. (2024). Applicability of neural combinatorial optimization: a critical\nview. ACM Trans. Evol. Learn. Optim., 4(3), 1–26. 24. Xu, W., Li, B., Cui, W., et al. (2024). A Greedy Tabu Dual Heuristic algorithm for the cyclic\npickup and delivery problem with 3D loading constraints. Scientific Reports, 14(1), 31762. 25. Ananno, A. A., & Ribeiro, L. (2024). A multi - heuristic algorithm for multi - container 3 -\nd bin packing problem optimization using real world constraints. IEEE Access, 12, 42105–\n42130\n26. Dorigo, M., et al. (2007). Ant colony optimization. IEEE Comput. Intell. Mag., 1(4), 28–39. 27. Blum, C. (2005). Ant colony optimization: introduction and recent trends. Phys. Life Rev.,\n2(4), 353–373. 28. Dorigo, M., & Blum, C. (2005). Ant colony optimization theory: a survey. Theor. Comput.",
      "size": 991,
      "sentences": 43
    },
    {
      "id": 59,
      "content": ". Blum, C. (2005). Ant colony optimization: introduction and recent trends. Phys. Life Rev.,\n2(4), 353–373. 28. Dorigo, M., & Blum, C. (2005). Ant colony optimization theory: a survey. Theor. Comput. Sci., 344(2 - 3), 243–278. 29. Dorigo, M., & Socha, K. (2018). An introduction to ant colony optimization. In Handbook\nApprox. Alg. Metaheuristics (pp. 395–408). 30. Fidanova, S. (2021). Ant colony optimization. Springer. 31. Wang, Y., & Han, Z. (2021). Ant colony optimization for TSP based on parameters optimi-\nzation. Appl. Soft Comput., 107, 107439. 32. Rokbani, N., et al. (2021). Bi - heuristic ant colony optimization for TSP. Soft Comput., 25,\n3775–3794. 33. Nayar, N., et al. (2021). Ant colony optimization: a review and application in feature selec-\ntion. In ICICIT (pp. 285–297). 34. Xie, X., et al. (2022). Multi - objective inspection path - planning in radioactive environ-\nments. Prog. Nucl. Energy, 144, 104076. 35. Awadallah, M. A., et al. (2024).",
      "size": 966,
      "sentences": 49
    },
    {
      "id": 60,
      "content": "In ICICIT (pp. 285–297). 34. Xie, X., et al. (2022). Multi - objective inspection path - planning in radioactive environ-\nments. Prog. Nucl. Energy, 144, 104076. 35. Awadallah, M. A., et al. (2024). Multi - objective ant colony optimization. Arch. Comput. Meth. Eng., 1–43. 36. Heng, H., et al. (2024). ACO in path planning for unmanned surface vehicles. Ocean Eng.,\n311, 118738. 37. Helsgaun, K. (2017). An extension of the lin - kernighan - helsgaun tsp solver for constrained\ntraveling salesman and vehicle routing problems. In Roskilde: Roskilde University (pp. 24–\n50)\n38. Wang, W., Li, J., Bai, Z., et al. (2024). Toward optimization of AGV path planning: an\nRRT* - ACO algorithm. IEEE Access, 12, 18387–18399. === 페이지 17 ===\nMulti-Dimensional AGV Path Planning 17\n39. Ye, H., Wang, J., Cao, Z., et al. (2023). DeepACO: Neural - enhanced ant systems for com-\nbinatorial optimization. In Advances in neural information processing systems (Vol. 36, pp. 43706–43728).",
      "size": 970,
      "sentences": 38
    }
  ]
}